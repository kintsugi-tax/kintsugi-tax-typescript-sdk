/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { SDKCore } from "../core.js";
import { appendForm, encodeSimple } from "../lib/encodings.js";
import {
  getContentTypeFromFileName,
  readableStreamToArrayBuffer,
} from "../lib/files.js";
import * as M from "../lib/matchers.js";
import { compactMap } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { RequestOptions } from "../lib/sdks.js";
import { resolveSecurity } from "../lib/security.js";
import { pathToFunc } from "../lib/url.js";
import {
  ConnectionError,
  InvalidRequestError,
  RequestAbortedError,
  RequestTimeoutError,
  UnexpectedClientError,
} from "../models/errors/httpclienterrors.js";
import * as errors from "../models/errors/index.js";
import { ResponseValidationError } from "../models/errors/responsevalidationerror.js";
import { SDKError } from "../models/errors/sdkerror.js";
import { SDKValidationError } from "../models/errors/sdkvalidationerror.js";
import * as models from "../models/index.js";
import * as operations from "../models/operations/index.js";
import { APICall, APIPromise } from "../types/async.js";
import { isBlobLike } from "../types/blobs.js";
import { Result } from "../types/fp.js";
import { isReadableStream } from "../types/streams.js";

/**
 * Upload Exemption Certificate
 *
 * @remarks
 * The Upload Exemption Certificate API allows you
 *     to upload a file attachment (e.g., exemption certificate) for a specific exemption.
 *     This is primarily used to associate supporting documents with an exemption record
 *     to ensure compliance and facilitate verification.
 */
export function exemptionsUploadCertificate(
  client: SDKCore,
  security:
    operations.UploadExemptionCertificateV1ExemptionsExemptionIdAttachmentsPostSecurity,
  request:
    operations.UploadExemptionCertificateV1ExemptionsExemptionIdAttachmentsPostRequest,
  options?: RequestOptions,
): APIPromise<
  Result<
    models.AttachmentRead,
    | errors.ErrorResponse
    | errors.BackendSrcExemptionsResponsesValidationErrorResponse
    | SDKError
    | ResponseValidationError
    | ConnectionError
    | RequestAbortedError
    | RequestTimeoutError
    | InvalidRequestError
    | UnexpectedClientError
    | SDKValidationError
  >
> {
  return new APIPromise($do(
    client,
    security,
    request,
    options,
  ));
}

async function $do(
  client: SDKCore,
  security:
    operations.UploadExemptionCertificateV1ExemptionsExemptionIdAttachmentsPostSecurity,
  request:
    operations.UploadExemptionCertificateV1ExemptionsExemptionIdAttachmentsPostRequest,
  options?: RequestOptions,
): Promise<
  [
    Result<
      models.AttachmentRead,
      | errors.ErrorResponse
      | errors.BackendSrcExemptionsResponsesValidationErrorResponse
      | SDKError
      | ResponseValidationError
      | ConnectionError
      | RequestAbortedError
      | RequestTimeoutError
      | InvalidRequestError
      | UnexpectedClientError
      | SDKValidationError
    >,
    APICall,
  ]
> {
  const parsed = safeParse(
    request,
    (value) =>
      operations
        .UploadExemptionCertificateV1ExemptionsExemptionIdAttachmentsPostRequest$outboundSchema
        .parse(value),
    "Input validation failed",
  );
  if (!parsed.ok) {
    return [parsed, { status: "invalid" }];
  }
  const payload = parsed.value;
  const body = new FormData();

  if (
    isBlobLike(
      payload
        .Body_upload_exemption_certificate_v1_exemptions__exemption_id__attachments_post
        .file,
    )
  ) {
    appendForm(
      body,
      "file",
      payload
        .Body_upload_exemption_certificate_v1_exemptions__exemption_id__attachments_post
        .file,
    );
  } else if (
    isReadableStream(
      payload
        .Body_upload_exemption_certificate_v1_exemptions__exemption_id__attachments_post
        .file.content,
    )
  ) {
    const buffer = await readableStreamToArrayBuffer(
      payload
        .Body_upload_exemption_certificate_v1_exemptions__exemption_id__attachments_post
        .file.content,
    );
    const contentType =
      getContentTypeFromFileName(
        payload
          .Body_upload_exemption_certificate_v1_exemptions__exemption_id__attachments_post
          .file.fileName,
      ) || "application/octet-stream";
    const blob = new Blob([buffer], { type: contentType });
    appendForm(
      body,
      "file",
      blob,
      payload
        .Body_upload_exemption_certificate_v1_exemptions__exemption_id__attachments_post
        .file.fileName,
    );
  } else {
    const contentType =
      getContentTypeFromFileName(
        payload
          .Body_upload_exemption_certificate_v1_exemptions__exemption_id__attachments_post
          .file.fileName,
      ) || "application/octet-stream";
    appendForm(
      body,
      "file",
      new Blob([
        payload
          .Body_upload_exemption_certificate_v1_exemptions__exemption_id__attachments_post
          .file.content,
      ], { type: contentType }),
      payload
        .Body_upload_exemption_certificate_v1_exemptions__exemption_id__attachments_post
        .file.fileName,
    );
  }

  const pathParams = {
    exemption_id: encodeSimple("exemption_id", payload.exemption_id, {
      explode: false,
      charEncoding: "percent",
    }),
  };

  const path = pathToFunc("/v1/exemptions/{exemption_id}/attachments")(
    pathParams,
  );

  const headers = new Headers(compactMap({
    Accept: "application/json",
    "x-organization-id": encodeSimple(
      "x-organization-id",
      payload["x-organization-id"],
      { explode: false, charEncoding: "none" },
    ),
  }));

  const requestSecurity = resolveSecurity(
    [
      {
        fieldName: "X-API-KEY",
        type: "apiKey:header",
        value: security?.apiKeyHeader,
      },
    ],
    [
      {
        fieldName: "Authorization",
        type: "http:bearer",
        value: security?.httpBearer,
      },
    ],
  );

  const context = {
    options: client._options,
    baseURL: options?.serverURL ?? client._baseURL ?? "",
    operationID:
      "upload_exemption_certificate_v1_exemptions__exemption_id__attachments_post",
    oAuth2Scopes: null,

    resolvedSecurity: requestSecurity,

    securitySource: security,
    retryConfig: options?.retries
      || client._options.retryConfig
      || { strategy: "none" },
    retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
  };

  const requestRes = client._createRequest(context, {
    security: requestSecurity,
    method: "POST",
    baseURL: options?.serverURL,
    path: path,
    headers: headers,
    body: body,
    userAgent: client._options.userAgent,
    timeoutMs: options?.timeoutMs || client._options.timeoutMs || -1,
  }, options);
  if (!requestRes.ok) {
    return [requestRes, { status: "invalid" }];
  }
  const req = requestRes.value;

  const doResult = await client._do(req, {
    context,
    errorCodes: ["401", "422", "4XX", "500", "5XX"],
    retryConfig: context.retryConfig,
    retryCodes: context.retryCodes,
  });
  if (!doResult.ok) {
    return [doResult, { status: "request-error", request: req }];
  }
  const response = doResult.value;

  const responseFields = {
    HttpMeta: { Response: response, Request: req },
  };

  const [result] = await M.match<
    models.AttachmentRead,
    | errors.ErrorResponse
    | errors.BackendSrcExemptionsResponsesValidationErrorResponse
    | SDKError
    | ResponseValidationError
    | ConnectionError
    | RequestAbortedError
    | RequestTimeoutError
    | InvalidRequestError
    | UnexpectedClientError
    | SDKValidationError
  >(
    M.json(200, models.AttachmentRead$inboundSchema),
    M.jsonErr(401, errors.ErrorResponse$inboundSchema),
    M.jsonErr(
      422,
      errors.BackendSrcExemptionsResponsesValidationErrorResponse$inboundSchema,
    ),
    M.jsonErr(500, errors.ErrorResponse$inboundSchema),
    M.fail("4XX"),
    M.fail("5XX"),
  )(response, req, { extraFields: responseFields });
  if (!result.ok) {
    return [result, { status: "complete", request: req, response }];
  }

  return [result, { status: "complete", request: req, response }];
}
