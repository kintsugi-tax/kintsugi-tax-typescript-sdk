/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { exemptionsCreate } from "../funcs/exemptionsCreate.js";
import { exemptionsGet } from "../funcs/exemptionsGet.js";
import { exemptionsGetAttachments } from "../funcs/exemptionsGetAttachments.js";
import { exemptionsList } from "../funcs/exemptionsList.js";
import { exemptionsUploadCertificate } from "../funcs/exemptionsUploadCertificate.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as models from "../models/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Exemptions extends ClientSDK {
  /**
   * Get Exemptions
   *
   * @remarks
   * Retrieve a list of exemptions based on filters.
   */
  async list(
    security: operations.GetExemptionsV1ExemptionsGetSecurity,
    request: operations.GetExemptionsV1ExemptionsGetRequest,
    options?: RequestOptions,
  ): Promise<models.FastapiPaginationDefaultPageExemptionRead2> {
    return unwrapAsync(exemptionsList(
      this,
      security,
      request,
      options,
    ));
  }

  /**
   * Create Exemption
   *
   * @remarks
   * The Create Exemption API allows you to create a new exemption record.
   *     This includes defining details such as exemption type, jurisdiction,
   *     Country, State, validity dates, etc.
   */
  async create(
    security: operations.CreateExemptionV1ExemptionsPostSecurity,
    request: operations.CreateExemptionV1ExemptionsPostRequest,
    options?: RequestOptions,
  ): Promise<models.BackendSrcExemptionsSerializersExemptionRead> {
    return unwrapAsync(exemptionsCreate(
      this,
      security,
      request,
      options,
    ));
  }

  /**
   * Get Exemption By Id
   *
   * @remarks
   * The Get Exemption By ID API retrieves a specific exemption record by
   *     its unique ID. This API is useful for retrieving detailed information
   *     about a particular exemption, including its associated
   *     customer, organisation id, status, etc.
   */
  async get(
    security: operations.GetExemptionByIdV1ExemptionsExemptionIdGetSecurity,
    request: operations.GetExemptionByIdV1ExemptionsExemptionIdGetRequest,
    options?: RequestOptions,
  ): Promise<models.BackendSrcExemptionsModelsExemptionRead> {
    return unwrapAsync(exemptionsGet(
      this,
      security,
      request,
      options,
    ));
  }

  /**
   * Upload Exemption Certificate
   *
   * @remarks
   * The Upload Exemption Certificate API allows you
   *     to upload a file attachment (e.g., exemption certificate) for a specific exemption.
   *     This is primarily used to associate supporting documents with an exemption record
   *     to ensure compliance and facilitate verification.
   */
  async uploadCertificate(
    security:
      operations.UploadExemptionCertificateV1ExemptionsExemptionIdAttachmentsPostSecurity,
    request:
      operations.UploadExemptionCertificateV1ExemptionsExemptionIdAttachmentsPostRequest,
    options?: RequestOptions,
  ): Promise<models.AttachmentRead> {
    return unwrapAsync(exemptionsUploadCertificate(
      this,
      security,
      request,
      options,
    ));
  }

  /**
   * Get Attachments For Exemption
   *
   * @remarks
   * The Get Attachments for Exemption API retrieves all
   *     attachments associated with a specific exemption.
   *     This is used to view and manage supporting documents
   *     like exemption certificates uploaded for a particular exemption record.
   */
  async getAttachments(
    security:
      operations.GetAttachmentsForExemptionV1ExemptionsExemptionIdAttachmentsGetSecurity,
    request:
      operations.GetAttachmentsForExemptionV1ExemptionsExemptionIdAttachmentsGetRequest,
    options?: RequestOptions,
  ): Promise<Array<models.AttachmentRead>> {
    return unwrapAsync(exemptionsGetAttachments(
      this,
      security,
      request,
      options,
    ));
  }
}
