/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { exemptionsCreateExemptionV1ExemptionsPost } from "../funcs/exemptionsCreateExemptionV1ExemptionsPost.js";
import { exemptionsGetAttachmentsForExemptionV1ExemptionsExemptionIdAttachmentsGet } from "../funcs/exemptionsGetAttachmentsForExemptionV1ExemptionsExemptionIdAttachmentsGet.js";
import { exemptionsGetExemptionByIdV1ExemptionsExemptionIdGet } from "../funcs/exemptionsGetExemptionByIdV1ExemptionsExemptionIdGet.js";
import { exemptionsGetExemptionsV1ExemptionsGet } from "../funcs/exemptionsGetExemptionsV1ExemptionsGet.js";
import { exemptionsUploadExemptionCertificateV1ExemptionsExemptionIdAttachmentsPost } from "../funcs/exemptionsUploadExemptionCertificateV1ExemptionsExemptionIdAttachmentsPost.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as models from "../models/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Exemptions extends ClientSDK {
  /**
   * Get Exemptions
   *
   * @remarks
   * Retrieve a list of exemptions based on filters.
   */
  async getExemptionsV1ExemptionsGet(
    request?: operations.GetExemptionsV1ExemptionsGetRequest | undefined,
    options?: RequestOptions,
  ): Promise<models.FastapiPaginationDefaultPageExemptionRead2> {
    return unwrapAsync(exemptionsGetExemptionsV1ExemptionsGet(
      this,
      request,
      options,
    ));
  }

  /**
   * Create Exemption
   *
   * @remarks
   * The Create Exemption API allows you to create a new exemption record.
   *     This includes defining details such as exemption type, jurisdiction,
   *     Country, State, validity dates, etc.
   */
  async createExemptionV1ExemptionsPost(
    request: models.ExemptionCreate,
    options?: RequestOptions,
  ): Promise<models.BackendSrcExemptionsSerializersExemptionRead> {
    return unwrapAsync(exemptionsCreateExemptionV1ExemptionsPost(
      this,
      request,
      options,
    ));
  }

  /**
   * Get Exemption By Id
   *
   * @remarks
   * The Get Exemption By ID API retrieves a specific exemption record by
   *     its unique ID. This API is useful for retrieving detailed information
   *     about a particular exemption, including its associated
   *     customer, organisation id, status, etc.
   */
  async getExemptionByIdV1ExemptionsExemptionIdGet(
    request: operations.GetExemptionByIdV1ExemptionsExemptionIdGetRequest,
    options?: RequestOptions,
  ): Promise<models.BackendSrcExemptionsModelsExemptionRead> {
    return unwrapAsync(exemptionsGetExemptionByIdV1ExemptionsExemptionIdGet(
      this,
      request,
      options,
    ));
  }

  /**
   * Upload Exemption Certificate
   *
   * @remarks
   * The Upload Exemption Certificate API allows you
   *     to upload a file attachment (e.g., exemption certificate) for a specific exemption.
   *     This is primarily used to associate supporting documents with an exemption record
   *     to ensure compliance and facilitate verification.
   */
  async uploadExemptionCertificateV1ExemptionsExemptionIdAttachmentsPost(
    request:
      operations.UploadExemptionCertificateV1ExemptionsExemptionIdAttachmentsPostRequest,
    options?: RequestOptions,
  ): Promise<models.AttachmentRead> {
    return unwrapAsync(
      exemptionsUploadExemptionCertificateV1ExemptionsExemptionIdAttachmentsPost(
        this,
        request,
        options,
      ),
    );
  }

  /**
   * Get Attachments For Exemption
   *
   * @remarks
   * The Get Attachments for Exemption API retrieves all
   *     attachments associated with a specific exemption.
   *     This is used to view and manage supporting documents
   *     like exemption certificates uploaded for a particular exemption record.
   */
  async getAttachmentsForExemptionV1ExemptionsExemptionIdAttachmentsGet(
    request:
      operations.GetAttachmentsForExemptionV1ExemptionsExemptionIdAttachmentsGetRequest,
    options?: RequestOptions,
  ): Promise<Array<models.AttachmentRead>> {
    return unwrapAsync(
      exemptionsGetAttachmentsForExemptionV1ExemptionsExemptionIdAttachmentsGet(
        this,
        request,
        options,
      ),
    );
  }
}
