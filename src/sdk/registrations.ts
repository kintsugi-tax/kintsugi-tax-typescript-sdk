/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { registrationsCreate } from "../funcs/registrationsCreate.js";
import { registrationsDeregister } from "../funcs/registrationsDeregister.js";
import { registrationsGet } from "../funcs/registrationsGet.js";
import { registrationsGetById } from "../funcs/registrationsGetById.js";
import { registrationsUpdate } from "../funcs/registrationsUpdate.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as models from "../models/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Registrations extends ClientSDK {
  /**
   * Get Registrations
   *
   * @remarks
   * The Get Registrations API retrieves a
   *     paginated list of registrations.
   *     This API helps in tracking and managing registrations efficiently across multiple
   *     jurisdictions.
   */
  async get(
    request?: operations.GetRegistrationsV1RegistrationsGetRequest | undefined,
    options?: RequestOptions,
  ): Promise<models.PageRegistrationReadWithPassword> {
    return unwrapAsync(registrationsGet(
      this,
      request,
      options,
    ));
  }

  /**
   * Create Registration
   *
   * @remarks
   * The Create Registration API allows users to create a new registration
   *     for tracking and managing tax filings efficiently across multiple jurisdictions.
   */
  async create(
    request: operations.CreateRegistration,
    options?: RequestOptions,
  ): Promise<models.RegistrationRead> {
    return unwrapAsync(registrationsCreate(
      this,
      request,
      options,
    ));
  }

  /**
   * Get Registration By Id
   *
   * @remarks
   * The Get Registration By ID API retrieves a single registration record
   *     based on its unique identifier.
   */
  async getById(
    request:
      operations.GetRegistrationByIdV1RegistrationsRegistrationIdGetRequest,
    options?: RequestOptions,
  ): Promise<models.RegistrationRead> {
    return unwrapAsync(registrationsGetById(
      this,
      request,
      options,
    ));
  }

  /**
   * Update Registration
   *
   * @remarks
   * The Update Registration API allows you to modify
   *     an existing registration using its unique registration_id.
   */
  async update(
    request:
      operations.UpdateRegistrationV1RegistrationsRegistrationIdPutRequest,
    options?: RequestOptions,
  ): Promise<models.RegistrationRead> {
    return unwrapAsync(registrationsUpdate(
      this,
      request,
      options,
    ));
  }

  /**
   * Deregister Registration
   *
   * @remarks
   * Deregister an existing registration.
   */
  async deregister(
    request:
      operations.DeregisterRegistrationV1RegistrationsRegistrationIdDeregisterPostRequest,
    options?: RequestOptions,
  ): Promise<models.RegistrationRead> {
    return unwrapAsync(registrationsDeregister(
      this,
      request,
      options,
    ));
  }
}
