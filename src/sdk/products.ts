/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { productsCreateProductV1ProductsPost } from "../funcs/productsCreateProductV1ProductsPost.js";
import { productsGetProductByIdV1ProductsProductIdGet } from "../funcs/productsGetProductByIdV1ProductsProductIdGet.js";
import { productsGetProductCategoriesV1ProductsCategoriesGet } from "../funcs/productsGetProductCategoriesV1ProductsCategoriesGet.js";
import { productsGetProductsV1ProductsGet } from "../funcs/productsGetProductsV1ProductsGet.js";
import { productsUpdateProductV1ProductsProductIdPut } from "../funcs/productsUpdateProductV1ProductsProductIdPut.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as models from "../models/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Products extends ClientSDK {
  /**
   * Get Products
   *
   * @remarks
   * Retrieve a paginated list of products based on filters and search query.
   */
  async getProductsV1ProductsGet(
    request?: operations.GetProductsV1ProductsGetRequest | undefined,
    options?: RequestOptions,
  ): Promise<models.PageProductRead> {
    return unwrapAsync(productsGetProductsV1ProductsGet(
      this,
      request,
      options,
    ));
  }

  /**
   * Create Product
   *
   * @remarks
   * The Create Product API allows users to manually create a new product
   *     in the system. This includes specifying product details such as category,
   *     subcategory, and tax exemption status, etc.
   */
  async createProductV1ProductsPost(
    request: models.ProductCreateManual,
    options?: RequestOptions,
  ): Promise<models.ProductRead> {
    return unwrapAsync(productsCreateProductV1ProductsPost(
      this,
      request,
      options,
    ));
  }

  /**
   * Get Product By Id
   *
   * @remarks
   * The Get Product By ID API retrieves detailed information about
   *     a single product by its unique ID. This API helps in viewing the specific details
   *     of a product, including its attributes, status, and categorization.
   */
  async getProductByIdV1ProductsProductIdGet(
    request: operations.GetProductByIdV1ProductsProductIdGetRequest,
    options?: RequestOptions,
  ): Promise<models.ProductRead> {
    return unwrapAsync(productsGetProductByIdV1ProductsProductIdGet(
      this,
      request,
      options,
    ));
  }

  /**
   * Update Product
   *
   * @remarks
   * The Update Product API allows users to modify the details of
   *     an existing product identified by its unique product_id
   */
  async updateProductV1ProductsProductIdPut(
    request: operations.UpdateProductV1ProductsProductIdPutRequest,
    options?: RequestOptions,
  ): Promise<models.ProductRead> {
    return unwrapAsync(productsUpdateProductV1ProductsProductIdPut(
      this,
      request,
      options,
    ));
  }

  /**
   * Get Product Categories
   *
   * @remarks
   * The Get Product Categories API retrieves all
   *     product categories.  This endpoint helps users understand and select the
   *     appropriate categories for their products.
   */
  async getProductCategoriesV1ProductsCategoriesGet(
    options?: RequestOptions,
  ): Promise<Array<models.ProductCategories>> {
    return unwrapAsync(productsGetProductCategoriesV1ProductsCategoriesGet(
      this,
      options,
    ));
  }
}
