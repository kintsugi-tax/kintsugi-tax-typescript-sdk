/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { transactionsCreate } from "../funcs/transactionsCreate.js";
import { transactionsCreateCreditNote } from "../funcs/transactionsCreateCreditNote.js";
import { transactionsGet } from "../funcs/transactionsGet.js";
import { transactionsGetByExternalId } from "../funcs/transactionsGetByExternalId.js";
import { transactionsGetByFilingId } from "../funcs/transactionsGetByFilingId.js";
import { transactionsGetById } from "../funcs/transactionsGetById.js";
import { transactionsUpdate } from "../funcs/transactionsUpdate.js";
import { transactionsUpdateCreditNote } from "../funcs/transactionsUpdateCreditNote.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as models from "../models/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Transactions extends ClientSDK {
  /**
   * Get Transactions
   *
   * @remarks
   * The Get Transactions API retrieves a list of transactions with
   *     optional filtering, sorting, and pagination.
   */
  async get(
    request?: operations.GetTransactionsV1TransactionsGetRequest | undefined,
    options?: RequestOptions,
  ): Promise<models.PageTransactionRead> {
    return unwrapAsync(transactionsGet(
      this,
      request,
      options,
    ));
  }

  /**
   * Create Transaction
   *
   * @remarks
   * Create a transaction.
   */
  async createTransactionV1TransactionsPost(
    request: models.TransactionPublicRequest,
    options?: RequestOptions,
  ): Promise<models.TransactionRead> {
    return unwrapAsync(transactionsCreateTransactionV1TransactionsPost(
      this,
      request,
      options,
    ));
  }

  /**
   * Get Transaction By External Id
   *
   * @remarks
   * Retrieves a specific transaction based on its external ID.
   *     This allows users to fetch transaction details using an identifier from an external system.
   */
  async getTransactionByExternalIdV1TransactionsExternalExternalIdGet(
    request:
      operations.GetTransactionByExternalIdV1TransactionsExternalExternalIdGetRequest,
    options?: RequestOptions,
  ): Promise<models.TransactionRead> {
    return unwrapAsync(
      transactionsGetTransactionByExternalIdV1TransactionsExternalExternalIdGet(
        this,
        request,
        options,
      ),
    );
  }

  /**
   * Update Transaction
   *
   * @remarks
   * Update a specific transaction by its ID.
   */
  async updateTransactionV1TransactionsTransactionIdPut(
    request: operations.UpdateTransactionV1TransactionsTransactionIdPutRequest,
    options?: RequestOptions,
  ): Promise<models.TransactionRead> {
    return unwrapAsync(
      transactionsUpdateTransactionV1TransactionsTransactionIdPut(
        this,
        request,
        options,
      ),
    );
  }

  /**
   * Get Transaction By Id
   *
   * @remarks
   * The Get Transaction By Id API retrieves detailed information
   *     about a specific transaction by providing its unique transaction ID.
   */
  async getTransactionByIdV1TransactionsTransactionIdGet(
    request: operations.GetTransactionByIdV1TransactionsTransactionIdGetRequest,
    options?: RequestOptions,
  ): Promise<models.TransactionRead> {
    return unwrapAsync(
      transactionsGetTransactionByIdV1TransactionsTransactionIdGet(
        this,
        request,
        options,
      ),
    );
  }

  /**
   * Get Transactions By Filing Id
   *
   * @remarks
   * Retrieve transactions by filing ID.
   */
  async getTransactionsByFilingIdV1TransactionsFilingsFilingIdGet(
    request:
      operations.GetTransactionsByFilingIdV1TransactionsFilingsFilingIdGetRequest,
    options?: RequestOptions,
  ): Promise<Array<models.TransactionRead>> {
    return unwrapAsync(
      transactionsGetTransactionsByFilingIdV1TransactionsFilingsFilingIdGet(
        this,
        request,
        options,
      ),
    );
  }

  /**
   * Create Credit Note By Transaction Id
   *
   * @remarks
   * Create a new credit note for a specific transaction.
   */
  async postCreateCreditNoteByTransactionId(
    request: operations.POSTCreateCreditNoteByTransactionIdRequest,
    options?: RequestOptions,
  ): Promise<models.TransactionRead> {
    return unwrapAsync(transactionsPOSTCreateCreditNoteByTransactionId(
      this,
      request,
      options,
    ));
  }

  /**
   * Update Credit Note By Transaction Id
   *
   * @remarks
   * Update an existing credit note for a specific transaction.
   */
  async putUpdateCreditNoteByTransactionId(
    request: operations.PUTUpdateCreditNoteByTransactionIdRequest,
    options?: RequestOptions,
  ): Promise<any> {
    return unwrapAsync(transactionsPUTUpdateCreditNoteByTransactionId(
      this,
      request,
      options,
    ));
  }
}
