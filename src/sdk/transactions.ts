/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { transactionsCreate } from "../funcs/transactionsCreate.js";
import { transactionsCreateCreditNote } from "../funcs/transactionsCreateCreditNote.js";
import { transactionsGetByExternalId } from "../funcs/transactionsGetByExternalId.js";
import { transactionsGetByFilingId } from "../funcs/transactionsGetByFilingId.js";
import { transactionsGetById } from "../funcs/transactionsGetById.js";
import { transactionsList } from "../funcs/transactionsList.js";
import { transactionsUpdate } from "../funcs/transactionsUpdate.js";
import { transactionsUpdateCreditNote } from "../funcs/transactionsUpdateCreditNote.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as models from "../models/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Transactions extends ClientSDK {
  /**
   * Get Transactions
   *
   * @remarks
   * The Get Transactions API retrieves a list of transactions with
   *     optional filtering, sorting, and pagination.
   */
  async list(
    security: operations.GetTransactionsV1TransactionsGetSecurity,
    request: operations.GetTransactionsV1TransactionsGetRequest,
    options?: RequestOptions,
  ): Promise<models.PageTransactionRead> {
    return unwrapAsync(transactionsList(
      this,
      security,
      request,
      options,
    ));
  }

  /**
   * Create Transaction
   *
   * @remarks
   * Create a transaction.
   */
  async create(
    security: operations.CreateTransactionV1TransactionsPostSecurity,
    request: operations.CreateTransactionV1TransactionsPostRequest,
    options?: RequestOptions,
  ): Promise<models.TransactionRead> {
    return unwrapAsync(transactionsCreate(
      this,
      security,
      request,
      options,
    ));
  }

  /**
   * Get Transaction By External Id
   *
   * @remarks
   * Retrieves a specific transaction based on its external ID.
   *     This allows users to fetch transaction details using an identifier from an external system.
   */
  async getByExternalId(
    security:
      operations.GetTransactionByExternalIdV1TransactionsExternalExternalIdGetSecurity,
    request:
      operations.GetTransactionByExternalIdV1TransactionsExternalExternalIdGetRequest,
    options?: RequestOptions,
  ): Promise<models.TransactionRead> {
    return unwrapAsync(transactionsGetByExternalId(
      this,
      security,
      request,
      options,
    ));
  }

  /**
   * Update Transaction
   *
   * @remarks
   * Update a specific transaction by its ID.
   */
  async update(
    security:
      operations.UpdateTransactionV1TransactionsTransactionIdPutSecurity,
    request: operations.UpdateTransactionV1TransactionsTransactionIdPutRequest,
    options?: RequestOptions,
  ): Promise<models.TransactionRead> {
    return unwrapAsync(transactionsUpdate(
      this,
      security,
      request,
      options,
    ));
  }

  /**
   * Get Transaction By Id
   *
   * @remarks
   * The Get Transaction By Id API retrieves detailed information
   *     about a specific transaction by providing its unique transaction ID.
   */
  async getById(
    security:
      operations.GetTransactionByIdV1TransactionsTransactionIdGetSecurity,
    request: operations.GetTransactionByIdV1TransactionsTransactionIdGetRequest,
    options?: RequestOptions,
  ): Promise<models.TransactionRead> {
    return unwrapAsync(transactionsGetById(
      this,
      security,
      request,
      options,
    ));
  }

  /**
   * Get Transactions By Filing Id
   *
   * @remarks
   * Retrieve transactions by filing ID.
   */
  async getByFilingId(
    security:
      operations.GetTransactionsByFilingIdV1TransactionsFilingsFilingIdGetSecurity,
    request:
      operations.GetTransactionsByFilingIdV1TransactionsFilingsFilingIdGetRequest,
    options?: RequestOptions,
  ): Promise<Array<models.TransactionRead>> {
    return unwrapAsync(transactionsGetByFilingId(
      this,
      security,
      request,
      options,
    ));
  }

  /**
   * Create Credit Note By Transaction Id
   *
   * @remarks
   * Create a new credit note for a specific transaction.
   */
  async createCreditNote(
    security: operations.POSTCreateCreditNoteByTransactionIdSecurity,
    request: operations.POSTCreateCreditNoteByTransactionIdRequest,
    options?: RequestOptions,
  ): Promise<models.TransactionRead> {
    return unwrapAsync(transactionsCreateCreditNote(
      this,
      security,
      request,
      options,
    ));
  }

  /**
   * Update Credit Note By Transaction Id
   *
   * @remarks
   * Update an existing credit note for a specific transaction.
   */
  async updateCreditNote(
    security: operations.PUTUpdateCreditNoteByTransactionIdSecurity,
    request: operations.PUTUpdateCreditNoteByTransactionIdRequest,
    options?: RequestOptions,
  ): Promise<any> {
    return unwrapAsync(transactionsUpdateCreditNote(
      this,
      security,
      request,
      options,
    ));
  }
}
