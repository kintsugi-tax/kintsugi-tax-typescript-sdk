/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

<<<<<<< HEAD
import { nexusCreatePhysical } from "../funcs/nexusCreatePhysical.js";
import { nexusDeletePhysical } from "../funcs/nexusDeletePhysical.js";
import { nexusList } from "../funcs/nexusList.js";
import { nexusListPhysical } from "../funcs/nexusListPhysical.js";
import { nexusUpdatePhysical } from "../funcs/nexusUpdatePhysical.js";
=======
import { nexusCreatePhysicalNexusV1NexusPhysicalNexusPost } from "../funcs/nexusCreatePhysicalNexusV1NexusPhysicalNexusPost.js";
import { nexusDeletePhysicalNexusV1NexusPhysicalNexusPhysicalNexusIdDelete } from "../funcs/nexusDeletePhysicalNexusV1NexusPhysicalNexusPhysicalNexusIdDelete.js";
import { nexusGetNexusForOrgV1NexusGet } from "../funcs/nexusGetNexusForOrgV1NexusGet.js";
import { nexusGetPhysicalNexusV1NexusPhysicalNexusGet } from "../funcs/nexusGetPhysicalNexusV1NexusPhysicalNexusGet.js";
import { nexusUpdatePhysicalNexusV1NexusPhysicalNexusPhysicalNexusIdPut } from "../funcs/nexusUpdatePhysicalNexusV1NexusPhysicalNexusPhysicalNexusIdPut.js";
>>>>>>> 68f5712d768e774ab185da2f28d4e8cecdd8bee7
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as models from "../models/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Nexus extends ClientSDK {
  /**
   * Get Physical Nexus
   *
   * @remarks
   * Retrieve a paginated list of
   *     physical nexuses for a specific organization.
   */
<<<<<<< HEAD
  async listPhysical(
=======
  async getPhysicalNexusV1NexusPhysicalNexusGet(
>>>>>>> 68f5712d768e774ab185da2f28d4e8cecdd8bee7
    request?:
      | operations.GetPhysicalNexusV1NexusPhysicalNexusGetRequest
      | undefined,
    options?: RequestOptions,
  ): Promise<models.PagePhysicalNexusRead> {
<<<<<<< HEAD
    return unwrapAsync(nexusListPhysical(
=======
    return unwrapAsync(nexusGetPhysicalNexusV1NexusPhysicalNexusGet(
>>>>>>> 68f5712d768e774ab185da2f28d4e8cecdd8bee7
      this,
      request,
      options,
    ));
  }

  /**
   * Create Physical Nexus
   *
   * @remarks
   * The Create Physical Nexus API allows you to create a new physical
   *     nexus by specifying its attributes, including the location,
   *     start date, end date, etc.
   */
<<<<<<< HEAD
  async createPhysical(
    request: models.PhysicalNexusCreate,
    options?: RequestOptions,
  ): Promise<models.PhysicalNexusRead> {
    return unwrapAsync(nexusCreatePhysical(
=======
  async createPhysicalNexusV1NexusPhysicalNexusPost(
    request: models.PhysicalNexusCreate,
    options?: RequestOptions,
  ): Promise<models.PhysicalNexusRead> {
    return unwrapAsync(nexusCreatePhysicalNexusV1NexusPhysicalNexusPost(
>>>>>>> 68f5712d768e774ab185da2f28d4e8cecdd8bee7
      this,
      request,
      options,
    ));
  }

  /**
   * Update Physical Nexus
   *
   * @remarks
   * The Update Physical Nexus API allows you to modify the details of
   *     an existing physical nexus by its unique ID.
   */
<<<<<<< HEAD
  async updatePhysical(
=======
  async updatePhysicalNexusV1NexusPhysicalNexusPhysicalNexusIdPut(
>>>>>>> 68f5712d768e774ab185da2f28d4e8cecdd8bee7
    request:
      operations.UpdatePhysicalNexusV1NexusPhysicalNexusPhysicalNexusIdPutRequest,
    options?: RequestOptions,
  ): Promise<models.PhysicalNexusRead> {
<<<<<<< HEAD
    return unwrapAsync(nexusUpdatePhysical(
      this,
      request,
      options,
    ));
=======
    return unwrapAsync(
      nexusUpdatePhysicalNexusV1NexusPhysicalNexusPhysicalNexusIdPut(
        this,
        request,
        options,
      ),
    );
>>>>>>> 68f5712d768e774ab185da2f28d4e8cecdd8bee7
  }

  /**
   * Delete Physical Nexus
   *
   * @remarks
   * The Delete Physical Nexus API allows you to remove an existing
   *     physical nexus by its unique ID.
   */
<<<<<<< HEAD
  async deletePhysical(
=======
  async deletePhysicalNexusV1NexusPhysicalNexusPhysicalNexusIdDelete(
>>>>>>> 68f5712d768e774ab185da2f28d4e8cecdd8bee7
    request:
      operations.DeletePhysicalNexusV1NexusPhysicalNexusPhysicalNexusIdDeleteRequest,
    options?: RequestOptions,
  ): Promise<any> {
<<<<<<< HEAD
    return unwrapAsync(nexusDeletePhysical(
      this,
      request,
      options,
    ));
=======
    return unwrapAsync(
      nexusDeletePhysicalNexusV1NexusPhysicalNexusPhysicalNexusIdDelete(
        this,
        request,
        options,
      ),
    );
>>>>>>> 68f5712d768e774ab185da2f28d4e8cecdd8bee7
  }

  /**
   * Get Nexus For Org
   *
   * @remarks
   * Get a list of all nexuses for the organization.
   */
  async getNexusForOrgV1NexusGet(
    request?: operations.GetNexusForOrgV1NexusGetRequest | undefined,
    options?: RequestOptions,
  ): Promise<models.PageNexusResponse> {
    return unwrapAsync(nexusGetNexusForOrgV1NexusGet(
      this,
      request,
      options,
    ));
  }
}
