/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { RFCDate } from "../types/rfcdate.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  PhysicalNexusCategory,
  PhysicalNexusCategory$inboundSchema,
  PhysicalNexusCategory$outboundSchema,
} from "./physicalnexuscategory.js";

export type PhysicalNexusUpdate = {
  /**
   * The date when the nexus became
   *
   * @remarks
   *                                 effective (YYYY-MM-DD).
   */
  startDate: RFCDate;
  /**
   * The date when the
   *
   * @remarks
   *                                         nexus ends, if applicable (YYYY-MM-DD).
   */
  endDate?: string | undefined;
  category: PhysicalNexusCategory;
};

/** @internal */
export const PhysicalNexusUpdate$inboundSchema: z.ZodType<
  PhysicalNexusUpdate,
  z.ZodTypeDef,
  unknown
> = z.object({
  start_date: z.string().transform(v => new RFCDate(v)),
  end_date: z.string().optional(),
  category: PhysicalNexusCategory$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "start_date": "startDate",
    "end_date": "endDate",
  });
});

/** @internal */
export type PhysicalNexusUpdate$Outbound = {
  start_date: string;
  end_date?: string | undefined;
  category: string;
};

/** @internal */
export const PhysicalNexusUpdate$outboundSchema: z.ZodType<
  PhysicalNexusUpdate$Outbound,
  z.ZodTypeDef,
  PhysicalNexusUpdate
> = z.object({
  startDate: z.instanceof(RFCDate).transform(v => v.toString()),
  endDate: z.string().optional(),
  category: PhysicalNexusCategory$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    startDate: "start_date",
    endDate: "end_date",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PhysicalNexusUpdate$ {
  /** @deprecated use `PhysicalNexusUpdate$inboundSchema` instead. */
  export const inboundSchema = PhysicalNexusUpdate$inboundSchema;
  /** @deprecated use `PhysicalNexusUpdate$outboundSchema` instead. */
  export const outboundSchema = PhysicalNexusUpdate$outboundSchema;
  /** @deprecated use `PhysicalNexusUpdate$Outbound` instead. */
  export type Outbound = PhysicalNexusUpdate$Outbound;
}

export function physicalNexusUpdateToJSON(
  physicalNexusUpdate: PhysicalNexusUpdate,
): string {
  return JSON.stringify(
    PhysicalNexusUpdate$outboundSchema.parse(physicalNexusUpdate),
  );
}

export function physicalNexusUpdateFromJSON(
  jsonString: string,
): SafeParseResult<PhysicalNexusUpdate, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PhysicalNexusUpdate$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PhysicalNexusUpdate' from JSON`,
  );
}
