/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type ProductSubCategory = {
  /**
   * Name of the product subcategory
   *
   * @remarks
   *             (e.g., ORAL_HYGIENE, MEDICAL_DEVICES, etc.)
   */
  name: string;
  /**
   * Description of the subcategory in the context of sales tax
   */
  description: string;
  /**
   * Example products or services within the subcategory
   */
  example: string;
  /**
   * Indicates if the subcategory is a frequent subcategory used by the organization. This field is deprecated.
   */
  isFrequent?: boolean | undefined;
};

/** @internal */
export const ProductSubCategory$inboundSchema: z.ZodType<
  ProductSubCategory,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  description: z.string(),
  example: z.string(),
  is_frequent: z.boolean().default(false),
}).transform((v) => {
  return remap$(v, {
    "is_frequent": "isFrequent",
  });
});

/** @internal */
export type ProductSubCategory$Outbound = {
  name: string;
  description: string;
  example: string;
  is_frequent: boolean;
};

/** @internal */
export const ProductSubCategory$outboundSchema: z.ZodType<
  ProductSubCategory$Outbound,
  z.ZodTypeDef,
  ProductSubCategory
> = z.object({
  name: z.string(),
  description: z.string(),
  example: z.string(),
  isFrequent: z.boolean().default(false),
}).transform((v) => {
  return remap$(v, {
    isFrequent: "is_frequent",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ProductSubCategory$ {
  /** @deprecated use `ProductSubCategory$inboundSchema` instead. */
  export const inboundSchema = ProductSubCategory$inboundSchema;
  /** @deprecated use `ProductSubCategory$outboundSchema` instead. */
  export const outboundSchema = ProductSubCategory$outboundSchema;
  /** @deprecated use `ProductSubCategory$Outbound` instead. */
  export type Outbound = ProductSubCategory$Outbound;
}

export function productSubCategoryToJSON(
  productSubCategory: ProductSubCategory,
): string {
  return JSON.stringify(
    ProductSubCategory$outboundSchema.parse(productSubCategory),
  );
}

export function productSubCategoryFromJSON(
  jsonString: string,
): SafeParseResult<ProductSubCategory, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ProductSubCategory$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ProductSubCategory' from JSON`,
  );
}
