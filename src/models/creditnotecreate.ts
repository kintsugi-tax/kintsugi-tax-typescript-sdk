/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  CreditNoteItemCreateUpdate,
  CreditNoteItemCreateUpdate$inboundSchema,
  CreditNoteItemCreateUpdate$Outbound,
  CreditNoteItemCreateUpdate$outboundSchema,
} from "./creditnoteitemcreateupdate.js";
import {
  CurrencyEnum,
  CurrencyEnum$inboundSchema,
  CurrencyEnum$outboundSchema,
} from "./currencyenum.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  TransactionAddressBuilder,
  TransactionAddressBuilder$inboundSchema,
  TransactionAddressBuilder$Outbound,
  TransactionAddressBuilder$outboundSchema,
} from "./transactionaddressbuilder.js";

/**
 * Current state of the credit note in its lifecycle.
 */
export const Status = {
  Pending: "PENDING",
  Cancelled: "CANCELLED",
  Committed: "COMMITTED",
} as const;
/**
 * Current state of the credit note in its lifecycle.
 */
export type Status = ClosedEnum<typeof Status>;

/**
 * Total monetary value of the credit note, including all items and taxes.
 */
export type CreditNoteCreateTotalAmount = number | string;

/**
 * Pre-calculated total tax amount for the entire credit note, if provided by the external system.
 */
export type CreditNoteCreateTaxAmountImported = number | string;

/**
 * Pre-calculated overall tax rate for the credit note, if provided by the external system.
 */
export type CreditNoteCreateTaxRateImported = number | string;

/**
 * Total portion of the credit note amount subject to taxation.
 */
export type CreditNoteCreateTaxableAmount = number | string;

export type CreditNoteCreate = {
  /**
   * Unique identifier for the credit note in the external system.
   */
  externalId: string;
  /**
   * Date when the credit note was issued or created.
   */
  date: Date;
  /**
   * Current state of the credit note in its lifecycle.
   */
  status: Status;
  /**
   * Brief explanation or reason for issuing the credit note.
   */
  description?: string | null | undefined;
  /**
   * Total monetary value of the credit note, including all items and taxes.
   */
  totalAmount?: number | string | undefined;
  /**
   * Indicates whether this credit note is associated with a marketplace transaction.
   */
  marketplace?: boolean | null | undefined;
  /**
   * Pre-calculated total tax amount for the entire credit note, if provided by the external system.
   */
  taxAmountImported?: number | string | null | undefined;
  /**
   * Pre-calculated overall tax rate for the credit note, if provided by the external system.
   */
  taxRateImported?: number | string | null | undefined;
  /**
   * Total portion of the credit note amount subject to taxation.
   */
  taxableAmount?: number | string | null | undefined;
  currency: CurrencyEnum;
  /**
   * A list of TransactionAddressBuilder objects or None if no addresses are provided. This field represents the addresses associated with the transaction.
   */
  addresses?: Array<TransactionAddressBuilder> | null | undefined;
  /**
   * Detailed list of individual items included in this credit note.
   */
  transactionItems: Array<CreditNoteItemCreateUpdate>;
};

/** @internal */
export const Status$inboundSchema: z.ZodNativeEnum<typeof Status> = z
  .nativeEnum(Status);

/** @internal */
export const Status$outboundSchema: z.ZodNativeEnum<typeof Status> =
  Status$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Status$ {
  /** @deprecated use `Status$inboundSchema` instead. */
  export const inboundSchema = Status$inboundSchema;
  /** @deprecated use `Status$outboundSchema` instead. */
  export const outboundSchema = Status$outboundSchema;
}

/** @internal */
export const CreditNoteCreateTotalAmount$inboundSchema: z.ZodType<
  CreditNoteCreateTotalAmount,
  z.ZodTypeDef,
  unknown
> = z.union([z.number(), z.string()]);

/** @internal */
export type CreditNoteCreateTotalAmount$Outbound = number | string;

/** @internal */
export const CreditNoteCreateTotalAmount$outboundSchema: z.ZodType<
  CreditNoteCreateTotalAmount$Outbound,
  z.ZodTypeDef,
  CreditNoteCreateTotalAmount
> = z.union([z.number(), z.string()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreditNoteCreateTotalAmount$ {
  /** @deprecated use `CreditNoteCreateTotalAmount$inboundSchema` instead. */
  export const inboundSchema = CreditNoteCreateTotalAmount$inboundSchema;
  /** @deprecated use `CreditNoteCreateTotalAmount$outboundSchema` instead. */
  export const outboundSchema = CreditNoteCreateTotalAmount$outboundSchema;
  /** @deprecated use `CreditNoteCreateTotalAmount$Outbound` instead. */
  export type Outbound = CreditNoteCreateTotalAmount$Outbound;
}

export function creditNoteCreateTotalAmountToJSON(
  creditNoteCreateTotalAmount: CreditNoteCreateTotalAmount,
): string {
  return JSON.stringify(
    CreditNoteCreateTotalAmount$outboundSchema.parse(
      creditNoteCreateTotalAmount,
    ),
  );
}

export function creditNoteCreateTotalAmountFromJSON(
  jsonString: string,
): SafeParseResult<CreditNoteCreateTotalAmount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreditNoteCreateTotalAmount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreditNoteCreateTotalAmount' from JSON`,
  );
}

/** @internal */
export const CreditNoteCreateTaxAmountImported$inboundSchema: z.ZodType<
  CreditNoteCreateTaxAmountImported,
  z.ZodTypeDef,
  unknown
> = z.union([z.number(), z.string()]);

/** @internal */
export type CreditNoteCreateTaxAmountImported$Outbound = number | string;

/** @internal */
export const CreditNoteCreateTaxAmountImported$outboundSchema: z.ZodType<
  CreditNoteCreateTaxAmountImported$Outbound,
  z.ZodTypeDef,
  CreditNoteCreateTaxAmountImported
> = z.union([z.number(), z.string()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreditNoteCreateTaxAmountImported$ {
  /** @deprecated use `CreditNoteCreateTaxAmountImported$inboundSchema` instead. */
  export const inboundSchema = CreditNoteCreateTaxAmountImported$inboundSchema;
  /** @deprecated use `CreditNoteCreateTaxAmountImported$outboundSchema` instead. */
  export const outboundSchema =
    CreditNoteCreateTaxAmountImported$outboundSchema;
  /** @deprecated use `CreditNoteCreateTaxAmountImported$Outbound` instead. */
  export type Outbound = CreditNoteCreateTaxAmountImported$Outbound;
}

export function creditNoteCreateTaxAmountImportedToJSON(
  creditNoteCreateTaxAmountImported: CreditNoteCreateTaxAmountImported,
): string {
  return JSON.stringify(
    CreditNoteCreateTaxAmountImported$outboundSchema.parse(
      creditNoteCreateTaxAmountImported,
    ),
  );
}

export function creditNoteCreateTaxAmountImportedFromJSON(
  jsonString: string,
): SafeParseResult<CreditNoteCreateTaxAmountImported, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreditNoteCreateTaxAmountImported$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreditNoteCreateTaxAmountImported' from JSON`,
  );
}

/** @internal */
export const CreditNoteCreateTaxRateImported$inboundSchema: z.ZodType<
  CreditNoteCreateTaxRateImported,
  z.ZodTypeDef,
  unknown
> = z.union([z.number(), z.string()]);

/** @internal */
export type CreditNoteCreateTaxRateImported$Outbound = number | string;

/** @internal */
export const CreditNoteCreateTaxRateImported$outboundSchema: z.ZodType<
  CreditNoteCreateTaxRateImported$Outbound,
  z.ZodTypeDef,
  CreditNoteCreateTaxRateImported
> = z.union([z.number(), z.string()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreditNoteCreateTaxRateImported$ {
  /** @deprecated use `CreditNoteCreateTaxRateImported$inboundSchema` instead. */
  export const inboundSchema = CreditNoteCreateTaxRateImported$inboundSchema;
  /** @deprecated use `CreditNoteCreateTaxRateImported$outboundSchema` instead. */
  export const outboundSchema = CreditNoteCreateTaxRateImported$outboundSchema;
  /** @deprecated use `CreditNoteCreateTaxRateImported$Outbound` instead. */
  export type Outbound = CreditNoteCreateTaxRateImported$Outbound;
}

export function creditNoteCreateTaxRateImportedToJSON(
  creditNoteCreateTaxRateImported: CreditNoteCreateTaxRateImported,
): string {
  return JSON.stringify(
    CreditNoteCreateTaxRateImported$outboundSchema.parse(
      creditNoteCreateTaxRateImported,
    ),
  );
}

export function creditNoteCreateTaxRateImportedFromJSON(
  jsonString: string,
): SafeParseResult<CreditNoteCreateTaxRateImported, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreditNoteCreateTaxRateImported$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreditNoteCreateTaxRateImported' from JSON`,
  );
}

/** @internal */
export const CreditNoteCreateTaxableAmount$inboundSchema: z.ZodType<
  CreditNoteCreateTaxableAmount,
  z.ZodTypeDef,
  unknown
> = z.union([z.number(), z.string()]);

/** @internal */
export type CreditNoteCreateTaxableAmount$Outbound = number | string;

/** @internal */
export const CreditNoteCreateTaxableAmount$outboundSchema: z.ZodType<
  CreditNoteCreateTaxableAmount$Outbound,
  z.ZodTypeDef,
  CreditNoteCreateTaxableAmount
> = z.union([z.number(), z.string()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreditNoteCreateTaxableAmount$ {
  /** @deprecated use `CreditNoteCreateTaxableAmount$inboundSchema` instead. */
  export const inboundSchema = CreditNoteCreateTaxableAmount$inboundSchema;
  /** @deprecated use `CreditNoteCreateTaxableAmount$outboundSchema` instead. */
  export const outboundSchema = CreditNoteCreateTaxableAmount$outboundSchema;
  /** @deprecated use `CreditNoteCreateTaxableAmount$Outbound` instead. */
  export type Outbound = CreditNoteCreateTaxableAmount$Outbound;
}

export function creditNoteCreateTaxableAmountToJSON(
  creditNoteCreateTaxableAmount: CreditNoteCreateTaxableAmount,
): string {
  return JSON.stringify(
    CreditNoteCreateTaxableAmount$outboundSchema.parse(
      creditNoteCreateTaxableAmount,
    ),
  );
}

export function creditNoteCreateTaxableAmountFromJSON(
  jsonString: string,
): SafeParseResult<CreditNoteCreateTaxableAmount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreditNoteCreateTaxableAmount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreditNoteCreateTaxableAmount' from JSON`,
  );
}

/** @internal */
export const CreditNoteCreate$inboundSchema: z.ZodType<
  CreditNoteCreate,
  z.ZodTypeDef,
  unknown
> = z.object({
  external_id: z.string(),
  date: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  status: Status$inboundSchema,
  description: z.nullable(z.string()).optional(),
  total_amount: z.union([z.number(), z.string()]).optional(),
  marketplace: z.nullable(z.boolean()).optional(),
  tax_amount_imported: z.nullable(z.union([z.number(), z.string()])).optional(),
  tax_rate_imported: z.nullable(z.union([z.number(), z.string()])).optional(),
  taxable_amount: z.nullable(z.union([z.number(), z.string()])).optional(),
  currency: CurrencyEnum$inboundSchema,
  addresses: z.nullable(z.array(TransactionAddressBuilder$inboundSchema))
    .optional(),
  transaction_items: z.array(CreditNoteItemCreateUpdate$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "external_id": "externalId",
    "total_amount": "totalAmount",
    "tax_amount_imported": "taxAmountImported",
    "tax_rate_imported": "taxRateImported",
    "taxable_amount": "taxableAmount",
    "transaction_items": "transactionItems",
  });
});

/** @internal */
export type CreditNoteCreate$Outbound = {
  external_id: string;
  date: string;
  status: string;
  description?: string | null | undefined;
  total_amount?: number | string | undefined;
  marketplace?: boolean | null | undefined;
  tax_amount_imported?: number | string | null | undefined;
  tax_rate_imported?: number | string | null | undefined;
  taxable_amount?: number | string | null | undefined;
  currency: string;
  addresses?: Array<TransactionAddressBuilder$Outbound> | null | undefined;
  transaction_items: Array<CreditNoteItemCreateUpdate$Outbound>;
};

/** @internal */
export const CreditNoteCreate$outboundSchema: z.ZodType<
  CreditNoteCreate$Outbound,
  z.ZodTypeDef,
  CreditNoteCreate
> = z.object({
  externalId: z.string(),
  date: z.date().transform(v => v.toISOString()),
  status: Status$outboundSchema,
  description: z.nullable(z.string()).optional(),
  totalAmount: z.union([z.number(), z.string()]).optional(),
  marketplace: z.nullable(z.boolean()).optional(),
  taxAmountImported: z.nullable(z.union([z.number(), z.string()])).optional(),
  taxRateImported: z.nullable(z.union([z.number(), z.string()])).optional(),
  taxableAmount: z.nullable(z.union([z.number(), z.string()])).optional(),
  currency: CurrencyEnum$outboundSchema,
  addresses: z.nullable(z.array(TransactionAddressBuilder$outboundSchema))
    .optional(),
  transactionItems: z.array(CreditNoteItemCreateUpdate$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    externalId: "external_id",
    totalAmount: "total_amount",
    taxAmountImported: "tax_amount_imported",
    taxRateImported: "tax_rate_imported",
    taxableAmount: "taxable_amount",
    transactionItems: "transaction_items",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreditNoteCreate$ {
  /** @deprecated use `CreditNoteCreate$inboundSchema` instead. */
  export const inboundSchema = CreditNoteCreate$inboundSchema;
  /** @deprecated use `CreditNoteCreate$outboundSchema` instead. */
  export const outboundSchema = CreditNoteCreate$outboundSchema;
  /** @deprecated use `CreditNoteCreate$Outbound` instead. */
  export type Outbound = CreditNoteCreate$Outbound;
}

export function creditNoteCreateToJSON(
  creditNoteCreate: CreditNoteCreate,
): string {
  return JSON.stringify(
    CreditNoteCreate$outboundSchema.parse(creditNoteCreate),
  );
}

export function creditNoteCreateFromJSON(
  jsonString: string,
): SafeParseResult<CreditNoteCreate, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreditNoteCreate$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreditNoteCreate' from JSON`,
  );
}
