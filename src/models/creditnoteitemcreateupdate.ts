/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  TaxExemptionEnum,
  TaxExemptionEnum$inboundSchema,
  TaxExemptionEnum$outboundSchema,
} from "./taxexemptionenum.js";
import {
  TaxItemBuilder,
  TaxItemBuilder$inboundSchema,
  TaxItemBuilder$Outbound,
  TaxItemBuilder$outboundSchema,
} from "./taxitembuilder.js";

export type CreditNoteItemCreateUpdate = {
  /**
   * Unique identifier for the credit note item in the external system.
   */
  externalId: string;
  /**
   * Date when the credit note item was issued or created.
   */
  date: Date;
  /**
   * Brief explanation or details about the credit note item.
   */
  description?: string | undefined;
  /**
   * Unique identifier for the associated product in the external system.
   */
  externalProductId: string;
  /**
   * Number of units or amount of the product being credited.
   */
  quantity?: number | undefined;
  /**
   * Total monetary value of the credit note item before taxes.
   */
  amount?: number | undefined;
  /**
   * Pre-calculated tax amount for the item, if provided by the external system.
   */
  taxAmountImported?: number | undefined;
  /**
   * Pre-calculated tax rate for the item, if provided by the external system.
   */
  taxRateImported?: number | undefined;
  /**
   * Portion of the item amount subject to taxation.
   */
  taxableAmount?: number | undefined;
  /**
   * This enum is used to determine if a transaction is exempt from tax.
   */
  taxExemption?: TaxExemptionEnum | undefined;
  /**
   * Detailed breakdown of individual tax components applied to this item.
   */
  taxItems?: Array<TaxItemBuilder> | undefined;
};

/** @internal */
export const CreditNoteItemCreateUpdate$inboundSchema: z.ZodType<
  CreditNoteItemCreateUpdate,
  z.ZodTypeDef,
  unknown
> = z.object({
  external_id: z.string(),
  date: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  description: z.string().optional(),
  external_product_id: z.string(),
  quantity: z.number().default(1.0),
  amount: z.number().default(0.00),
  tax_amount_imported: z.number().optional(),
  tax_rate_imported: z.number().optional(),
  taxable_amount: z.number().optional(),
  tax_exemption: TaxExemptionEnum$inboundSchema.optional(),
  tax_items: z.array(TaxItemBuilder$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "external_id": "externalId",
    "external_product_id": "externalProductId",
    "tax_amount_imported": "taxAmountImported",
    "tax_rate_imported": "taxRateImported",
    "taxable_amount": "taxableAmount",
    "tax_exemption": "taxExemption",
    "tax_items": "taxItems",
  });
});

/** @internal */
export type CreditNoteItemCreateUpdate$Outbound = {
  external_id: string;
  date: string;
  description?: string | undefined;
  external_product_id: string;
  quantity: number;
  amount: number;
  tax_amount_imported?: number | undefined;
  tax_rate_imported?: number | undefined;
  taxable_amount?: number | undefined;
  tax_exemption?: string | undefined;
  tax_items?: Array<TaxItemBuilder$Outbound> | undefined;
};

/** @internal */
export const CreditNoteItemCreateUpdate$outboundSchema: z.ZodType<
  CreditNoteItemCreateUpdate$Outbound,
  z.ZodTypeDef,
  CreditNoteItemCreateUpdate
> = z.object({
  externalId: z.string(),
  date: z.date().transform(v => v.toISOString()),
  description: z.string().optional(),
  externalProductId: z.string(),
  quantity: z.number().default(1.0),
  amount: z.number().default(0.00),
  taxAmountImported: z.number().optional(),
  taxRateImported: z.number().optional(),
  taxableAmount: z.number().optional(),
  taxExemption: TaxExemptionEnum$outboundSchema.optional(),
  taxItems: z.array(TaxItemBuilder$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    externalId: "external_id",
    externalProductId: "external_product_id",
    taxAmountImported: "tax_amount_imported",
    taxRateImported: "tax_rate_imported",
    taxableAmount: "taxable_amount",
    taxExemption: "tax_exemption",
    taxItems: "tax_items",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreditNoteItemCreateUpdate$ {
  /** @deprecated use `CreditNoteItemCreateUpdate$inboundSchema` instead. */
  export const inboundSchema = CreditNoteItemCreateUpdate$inboundSchema;
  /** @deprecated use `CreditNoteItemCreateUpdate$outboundSchema` instead. */
  export const outboundSchema = CreditNoteItemCreateUpdate$outboundSchema;
  /** @deprecated use `CreditNoteItemCreateUpdate$Outbound` instead. */
  export type Outbound = CreditNoteItemCreateUpdate$Outbound;
}

export function creditNoteItemCreateUpdateToJSON(
  creditNoteItemCreateUpdate: CreditNoteItemCreateUpdate,
): string {
  return JSON.stringify(
    CreditNoteItemCreateUpdate$outboundSchema.parse(creditNoteItemCreateUpdate),
  );
}

export function creditNoteItemCreateUpdateFromJSON(
  jsonString: string,
): SafeParseResult<CreditNoteItemCreateUpdate, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreditNoteItemCreateUpdate$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreditNoteItemCreateUpdate' from JSON`,
  );
}
