/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { ClosedEnum } from "../types/enums.js";

/**
 * This enum is used to determine if a transaction is exempt from tax.
 */
export const TaxExemptionEnum = {
  Product: "PRODUCT",
  Transaction: "TRANSACTION",
  Customer: "CUSTOMER",
  Region: "REGION",
  ReverseCharge: "REVERSE_CHARGE",
  ZeroRateTax: "ZERO_RATE_TAX",
  HighValuePhysicalGoods: "HIGH_VALUE_PHYSICAL_GOODS",
  Export: "EXPORT",
  ZeroValueItem: "ZERO_VALUE_ITEM",
  NoRuleFound: "NO_RULE_FOUND",
  Imported: "IMPORTED",
} as const;
/**
 * This enum is used to determine if a transaction is exempt from tax.
 */
export type TaxExemptionEnum = ClosedEnum<typeof TaxExemptionEnum>;

/** @internal */
export const TaxExemptionEnum$inboundSchema: z.ZodNativeEnum<
  typeof TaxExemptionEnum
> = z.nativeEnum(TaxExemptionEnum);

/** @internal */
export const TaxExemptionEnum$outboundSchema: z.ZodNativeEnum<
  typeof TaxExemptionEnum
> = TaxExemptionEnum$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TaxExemptionEnum$ {
  /** @deprecated use `TaxExemptionEnum$inboundSchema` instead. */
  export const inboundSchema = TaxExemptionEnum$inboundSchema;
  /** @deprecated use `TaxExemptionEnum$outboundSchema` instead. */
  export const outboundSchema = TaxExemptionEnum$outboundSchema;
}
