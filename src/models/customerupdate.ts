/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  AddressStatus,
  AddressStatus$inboundSchema,
  AddressStatus$outboundSchema,
} from "./addressstatus.js";
import {
  CountryCodeEnum,
  CountryCodeEnum$inboundSchema,
  CountryCodeEnum$outboundSchema,
} from "./countrycodeenum.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  SourceEnum,
  SourceEnum$inboundSchema,
  SourceEnum$outboundSchema,
} from "./sourceenum.js";
import {
  StatusEnum,
  StatusEnum$inboundSchema,
  StatusEnum$outboundSchema,
} from "./statusenum.js";

export type CustomerUpdate = {
  /**
   * Phone number associated with the customer.
   */
  phone?: string | null | undefined;
  /**
   * Primary street address.
   */
  street1?: string | null | undefined;
  /**
   * Additional street address details, such as an apartment or suite number.
   */
  street2?: string | null | undefined;
  /**
   * City where the customer resides.
   */
  city?: string | null | undefined;
  /**
   * County or district of the customer.
   */
  county?: string | null | undefined;
  /**
   * State or province of the customer.
   */
  state?: string | null | undefined;
  /**
   * ZIP or Postal code of the customer.
   */
  postalCode?: string | null | undefined;
  /**
   * Country code in ISO 3166-1 alpha-2 format
   */
  country?: CountryCodeEnum | null | undefined;
  /**
   * Complete address string of the customer, which can be used as an alternative to individual fields.
   */
  fullAddress?: string | null | undefined;
  /**
   * Name of the customer.
   */
  name?: string | null | undefined;
  /**
   * Status of the customer.
   */
  status?: StatusEnum | null | undefined;
  /**
   * Email address of the customer.
   */
  email?: string | null | undefined;
  /**
   * Source of the customer's record
   */
  source?: SourceEnum | null | undefined;
  addressStatus?: AddressStatus | undefined;
  /**
   * External identifier associated with the customer
   */
  externalId?: string | null | undefined;
};

/** @internal */
export const CustomerUpdate$inboundSchema: z.ZodType<
  CustomerUpdate,
  z.ZodTypeDef,
  unknown
> = z.object({
  phone: z.nullable(z.string()).optional(),
  street_1: z.nullable(z.string()).optional(),
  street_2: z.nullable(z.string()).optional(),
  city: z.nullable(z.string()).optional(),
  county: z.nullable(z.string()).optional(),
  state: z.nullable(z.string()).optional(),
  postal_code: z.nullable(z.string()).optional(),
  country: z.nullable(CountryCodeEnum$inboundSchema).optional(),
  full_address: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  status: z.nullable(StatusEnum$inboundSchema).optional(),
  email: z.nullable(z.string()).optional(),
  source: z.nullable(SourceEnum$inboundSchema).optional(),
  address_status: AddressStatus$inboundSchema.optional(),
  external_id: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "street_1": "street1",
    "street_2": "street2",
    "postal_code": "postalCode",
    "full_address": "fullAddress",
    "address_status": "addressStatus",
    "external_id": "externalId",
  });
});

/** @internal */
export type CustomerUpdate$Outbound = {
  phone?: string | null | undefined;
  street_1?: string | null | undefined;
  street_2?: string | null | undefined;
  city?: string | null | undefined;
  county?: string | null | undefined;
  state?: string | null | undefined;
  postal_code?: string | null | undefined;
  country?: string | null | undefined;
  full_address?: string | null | undefined;
  name?: string | null | undefined;
  status?: string | null | undefined;
  email?: string | null | undefined;
  source?: string | null | undefined;
  address_status?: string | undefined;
  external_id?: string | null | undefined;
};

/** @internal */
export const CustomerUpdate$outboundSchema: z.ZodType<
  CustomerUpdate$Outbound,
  z.ZodTypeDef,
  CustomerUpdate
> = z.object({
  phone: z.nullable(z.string()).optional(),
  street1: z.nullable(z.string()).optional(),
  street2: z.nullable(z.string()).optional(),
  city: z.nullable(z.string()).optional(),
  county: z.nullable(z.string()).optional(),
  state: z.nullable(z.string()).optional(),
  postalCode: z.nullable(z.string()).optional(),
  country: z.nullable(CountryCodeEnum$outboundSchema).optional(),
  fullAddress: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  status: z.nullable(StatusEnum$outboundSchema).optional(),
  email: z.nullable(z.string()).optional(),
  source: z.nullable(SourceEnum$outboundSchema).optional(),
  addressStatus: AddressStatus$outboundSchema.optional(),
  externalId: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    street1: "street_1",
    street2: "street_2",
    postalCode: "postal_code",
    fullAddress: "full_address",
    addressStatus: "address_status",
    externalId: "external_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CustomerUpdate$ {
  /** @deprecated use `CustomerUpdate$inboundSchema` instead. */
  export const inboundSchema = CustomerUpdate$inboundSchema;
  /** @deprecated use `CustomerUpdate$outboundSchema` instead. */
  export const outboundSchema = CustomerUpdate$outboundSchema;
  /** @deprecated use `CustomerUpdate$Outbound` instead. */
  export type Outbound = CustomerUpdate$Outbound;
}

export function customerUpdateToJSON(customerUpdate: CustomerUpdate): string {
  return JSON.stringify(CustomerUpdate$outboundSchema.parse(customerUpdate));
}

export function customerUpdateFromJSON(
  jsonString: string,
): SafeParseResult<CustomerUpdate, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CustomerUpdate$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CustomerUpdate' from JSON`,
  );
}
