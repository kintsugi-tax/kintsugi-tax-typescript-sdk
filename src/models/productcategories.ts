/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  ProductSubCategory,
  ProductSubCategory$inboundSchema,
  ProductSubCategory$Outbound,
  ProductSubCategory$outboundSchema,
} from "./productsubcategory.js";

export type ProductCategories = {
  /**
   * Name of the product category
   *
   * @remarks
   *             (e.g., PHYSICAL, SERVICE, DIGITAL, MISCELLANEOUS)
   */
  name: string;
  /**
   * List of subcategories associated with the product category
   */
  subcategories: Array<ProductSubCategory>;
};

/** @internal */
export const ProductCategories$inboundSchema: z.ZodType<
  ProductCategories,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  subcategories: z.array(ProductSubCategory$inboundSchema),
});

/** @internal */
export type ProductCategories$Outbound = {
  name: string;
  subcategories: Array<ProductSubCategory$Outbound>;
};

/** @internal */
export const ProductCategories$outboundSchema: z.ZodType<
  ProductCategories$Outbound,
  z.ZodTypeDef,
  ProductCategories
> = z.object({
  name: z.string(),
  subcategories: z.array(ProductSubCategory$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ProductCategories$ {
  /** @deprecated use `ProductCategories$inboundSchema` instead. */
  export const inboundSchema = ProductCategories$inboundSchema;
  /** @deprecated use `ProductCategories$outboundSchema` instead. */
  export const outboundSchema = ProductCategories$outboundSchema;
  /** @deprecated use `ProductCategories$Outbound` instead. */
  export type Outbound = ProductCategories$Outbound;
}

export function productCategoriesToJSON(
  productCategories: ProductCategories,
): string {
  return JSON.stringify(
    ProductCategories$outboundSchema.parse(productCategories),
  );
}

export function productCategoriesFromJSON(
  jsonString: string,
): SafeParseResult<ProductCategories, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ProductCategories$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ProductCategories' from JSON`,
  );
}
