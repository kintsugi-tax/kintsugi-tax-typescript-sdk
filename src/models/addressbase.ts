/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  CountryCodeEnum,
  CountryCodeEnum$inboundSchema,
  CountryCodeEnum$outboundSchema,
} from "./countrycodeenum.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type AddressBase = {
  /**
   * Phone number associated with the address.
   */
  phone?: string | undefined;
  /**
   * Primary street address.
   */
  street1?: string | undefined;
  /**
   * Additional street address details, such as an apartment or suite number.
   */
  street2?: string | undefined;
  /**
   * City where the customer resides.
   */
  city?: string | undefined;
  /**
   * County or district of the customer.
   */
  county?: string | undefined;
  /**
   * State or province of the customer.
   */
  state?: string | undefined;
  /**
   * ZIP or Postal code of the customer.
   */
  postalCode?: string | undefined;
  country?: CountryCodeEnum | undefined;
  /**
   * Complete address string of the customer, which can be used as an alternative to individual fields.
   */
  fullAddress?: string | undefined;
};

/** @internal */
export const AddressBase$inboundSchema: z.ZodType<
  AddressBase,
  z.ZodTypeDef,
  unknown
> = z.object({
  phone: z.string().optional(),
  street_1: z.string().optional(),
  street_2: z.string().optional(),
  city: z.string().optional(),
  county: z.string().optional(),
  state: z.string().optional(),
  postal_code: z.string().optional(),
  country: CountryCodeEnum$inboundSchema.optional(),
  full_address: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "street_1": "street1",
    "street_2": "street2",
    "postal_code": "postalCode",
    "full_address": "fullAddress",
  });
});

/** @internal */
export type AddressBase$Outbound = {
  phone?: string | undefined;
  street_1?: string | undefined;
  street_2?: string | undefined;
  city?: string | undefined;
  county?: string | undefined;
  state?: string | undefined;
  postal_code?: string | undefined;
  country?: string | undefined;
  full_address?: string | undefined;
};

/** @internal */
export const AddressBase$outboundSchema: z.ZodType<
  AddressBase$Outbound,
  z.ZodTypeDef,
  AddressBase
> = z.object({
  phone: z.string().optional(),
  street1: z.string().optional(),
  street2: z.string().optional(),
  city: z.string().optional(),
  county: z.string().optional(),
  state: z.string().optional(),
  postalCode: z.string().optional(),
  country: CountryCodeEnum$outboundSchema.optional(),
  fullAddress: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    street1: "street_1",
    street2: "street_2",
    postalCode: "postal_code",
    fullAddress: "full_address",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AddressBase$ {
  /** @deprecated use `AddressBase$inboundSchema` instead. */
  export const inboundSchema = AddressBase$inboundSchema;
  /** @deprecated use `AddressBase$outboundSchema` instead. */
  export const outboundSchema = AddressBase$outboundSchema;
  /** @deprecated use `AddressBase$Outbound` instead. */
  export type Outbound = AddressBase$Outbound;
}

export function addressBaseToJSON(addressBase: AddressBase): string {
  return JSON.stringify(AddressBase$outboundSchema.parse(addressBase));
}

export function addressBaseFromJSON(
  jsonString: string,
): SafeParseResult<AddressBase, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AddressBase$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AddressBase' from JSON`,
  );
}
