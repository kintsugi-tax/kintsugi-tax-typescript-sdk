/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  CountryCodeEnum,
  CountryCodeEnum$inboundSchema,
  CountryCodeEnum$outboundSchema,
} from "./countrycodeenum.js";
import {
  CustomerTaxTypeEnum,
  CustomerTaxTypeEnum$inboundSchema,
  CustomerTaxTypeEnum$outboundSchema,
} from "./customertaxtypeenum.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type CustomerTaxRegistrationRead = {
  id: string;
  customerId: string;
  countryCode: CountryCodeEnum;
  /**
   * Enum for customer tax registration types.
   */
  taxType: CustomerTaxTypeEnum;
  taxId: string;
  isValid: boolean;
};

/** @internal */
export const CustomerTaxRegistrationRead$inboundSchema: z.ZodType<
  CustomerTaxRegistrationRead,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  customer_id: z.string(),
  country_code: CountryCodeEnum$inboundSchema,
  tax_type: CustomerTaxTypeEnum$inboundSchema,
  tax_id: z.string(),
  is_valid: z.boolean(),
}).transform((v) => {
  return remap$(v, {
    "customer_id": "customerId",
    "country_code": "countryCode",
    "tax_type": "taxType",
    "tax_id": "taxId",
    "is_valid": "isValid",
  });
});

/** @internal */
export type CustomerTaxRegistrationRead$Outbound = {
  id: string;
  customer_id: string;
  country_code: string;
  tax_type: string;
  tax_id: string;
  is_valid: boolean;
};

/** @internal */
export const CustomerTaxRegistrationRead$outboundSchema: z.ZodType<
  CustomerTaxRegistrationRead$Outbound,
  z.ZodTypeDef,
  CustomerTaxRegistrationRead
> = z.object({
  id: z.string(),
  customerId: z.string(),
  countryCode: CountryCodeEnum$outboundSchema,
  taxType: CustomerTaxTypeEnum$outboundSchema,
  taxId: z.string(),
  isValid: z.boolean(),
}).transform((v) => {
  return remap$(v, {
    customerId: "customer_id",
    countryCode: "country_code",
    taxType: "tax_type",
    taxId: "tax_id",
    isValid: "is_valid",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CustomerTaxRegistrationRead$ {
  /** @deprecated use `CustomerTaxRegistrationRead$inboundSchema` instead. */
  export const inboundSchema = CustomerTaxRegistrationRead$inboundSchema;
  /** @deprecated use `CustomerTaxRegistrationRead$outboundSchema` instead. */
  export const outboundSchema = CustomerTaxRegistrationRead$outboundSchema;
  /** @deprecated use `CustomerTaxRegistrationRead$Outbound` instead. */
  export type Outbound = CustomerTaxRegistrationRead$Outbound;
}

export function customerTaxRegistrationReadToJSON(
  customerTaxRegistrationRead: CustomerTaxRegistrationRead,
): string {
  return JSON.stringify(
    CustomerTaxRegistrationRead$outboundSchema.parse(
      customerTaxRegistrationRead,
    ),
  );
}

export function customerTaxRegistrationReadFromJSON(
  jsonString: string,
): SafeParseResult<CustomerTaxRegistrationRead, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CustomerTaxRegistrationRead$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CustomerTaxRegistrationRead' from JSON`,
  );
}
