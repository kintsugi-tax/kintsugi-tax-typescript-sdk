/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  CurrencyEnum,
  CurrencyEnum$inboundSchema,
  CurrencyEnum$outboundSchema,
} from "./currencyenum.js";
import {
  DiscountBuilder,
  DiscountBuilder$inboundSchema,
  DiscountBuilder$Outbound,
  DiscountBuilder$outboundSchema,
} from "./discountbuilder.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  TaxExemptionEnum,
  TaxExemptionEnum$inboundSchema,
  TaxExemptionEnum$outboundSchema,
} from "./taxexemptionenum.js";
import {
  TaxItemBuilder,
  TaxItemBuilder$inboundSchema,
  TaxItemBuilder$Outbound,
  TaxItemBuilder$outboundSchema,
} from "./taxitembuilder.js";

export type TransactionItemBuilder = {
  /**
   * External item identifier.
   */
  externalId?: string | undefined;
  /**
   * Organization identifier.
   */
  organizationId: string;
  /**
   * Date/time of item.
   */
  date: Date;
  /**
   * Item description
   */
  description?: string | undefined;
  /**
   * External product identifier.
   */
  externalProductId: string;
  /**
   * Product name
   */
  product?: string | undefined;
  /**
   * Product identifier.
   */
  productId?: string | undefined;
  /**
   * Product name (detailed)
   */
  productName?: string | undefined;
  /**
   * Product description
   */
  productDescription?: string | undefined;
  /**
   * Quantity of item.
   */
  quantity?: number | undefined;
  /**
   * Item amount.
   */
  amount?: number | undefined;
  /**
   * Imported tax amount for the item.
   */
  taxAmountImported?: number | undefined;
  /**
   * Imported tax rate.
   */
  taxRateImported?: number | undefined;
  /**
   * Calculated tax amount for the item.
   */
  taxAmountCalculated?: number | undefined;
  /**
   * Calculated tax rate.
   */
  taxRateCalculated?: number | undefined;
  originalCurrency?: CurrencyEnum | undefined;
  destinationCurrency?: CurrencyEnum | undefined;
  /**
   * Converted item amount.
   */
  convertedAmount?: number | undefined;
  /**
   * Converted taxable amount.
   */
  convertedTaxableAmount?: number | undefined;
  /**
   * Converted imported tax amount.
   */
  convertedTaxAmountImported?: number | undefined;
  /**
   * Converted calculated tax amount
   */
  convertedTaxAmountCalculated?: number | undefined;
  /**
   * Converted total discount amount.
   */
  convertedTotalDiscount?: number | undefined;
  /**
   * Converted subtotal amount.
   */
  convertedSubtotal?: number | undefined;
  /**
   * Taxable amount for the item.
   */
  taxableAmount?: number | undefined;
  /**
   * This enum is used to determine if a transaction is exempt from tax.
   */
  taxExemption?: TaxExemptionEnum | undefined;
  /**
   * Indicates if the item is exempt.
   */
  exempt?: boolean | undefined;
  taxItems?: Array<TaxItemBuilder> | undefined;
  discountBuilder?: DiscountBuilder | undefined;
};

/** @internal */
export const TransactionItemBuilder$inboundSchema: z.ZodType<
  TransactionItemBuilder,
  z.ZodTypeDef,
  unknown
> = z.object({
  external_id: z.string().optional(),
  organization_id: z.string(),
  date: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  description: z.string().optional(),
  external_product_id: z.string(),
  product: z.string().optional(),
  product_id: z.string().optional(),
  product_name: z.string().optional(),
  product_description: z.string().optional(),
  quantity: z.number().default(1.0),
  amount: z.number().default(0.00),
  tax_amount_imported: z.number().default(0.00),
  tax_rate_imported: z.number().default(0.00),
  tax_amount_calculated: z.number().default(0.00),
  tax_rate_calculated: z.number().default(0.00),
  original_currency: CurrencyEnum$inboundSchema.optional(),
  destination_currency: CurrencyEnum$inboundSchema.optional(),
  converted_amount: z.number().optional(),
  converted_taxable_amount: z.number().optional(),
  converted_tax_amount_imported: z.number().optional(),
  converted_tax_amount_calculated: z.number().optional(),
  converted_total_discount: z.number().optional(),
  converted_subtotal: z.number().optional(),
  taxable_amount: z.number().default(0.00),
  tax_exemption: TaxExemptionEnum$inboundSchema.optional(),
  exempt: z.boolean().default(false),
  tax_items: z.array(TaxItemBuilder$inboundSchema).optional(),
  discount_builder: DiscountBuilder$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "external_id": "externalId",
    "organization_id": "organizationId",
    "external_product_id": "externalProductId",
    "product_id": "productId",
    "product_name": "productName",
    "product_description": "productDescription",
    "tax_amount_imported": "taxAmountImported",
    "tax_rate_imported": "taxRateImported",
    "tax_amount_calculated": "taxAmountCalculated",
    "tax_rate_calculated": "taxRateCalculated",
    "original_currency": "originalCurrency",
    "destination_currency": "destinationCurrency",
    "converted_amount": "convertedAmount",
    "converted_taxable_amount": "convertedTaxableAmount",
    "converted_tax_amount_imported": "convertedTaxAmountImported",
    "converted_tax_amount_calculated": "convertedTaxAmountCalculated",
    "converted_total_discount": "convertedTotalDiscount",
    "converted_subtotal": "convertedSubtotal",
    "taxable_amount": "taxableAmount",
    "tax_exemption": "taxExemption",
    "tax_items": "taxItems",
    "discount_builder": "discountBuilder",
  });
});

/** @internal */
export type TransactionItemBuilder$Outbound = {
  external_id?: string | undefined;
  organization_id: string;
  date: string;
  description?: string | undefined;
  external_product_id: string;
  product?: string | undefined;
  product_id?: string | undefined;
  product_name?: string | undefined;
  product_description?: string | undefined;
  quantity: number;
  amount: number;
  tax_amount_imported: number;
  tax_rate_imported: number;
  tax_amount_calculated: number;
  tax_rate_calculated: number;
  original_currency?: string | undefined;
  destination_currency?: string | undefined;
  converted_amount?: number | undefined;
  converted_taxable_amount?: number | undefined;
  converted_tax_amount_imported?: number | undefined;
  converted_tax_amount_calculated?: number | undefined;
  converted_total_discount?: number | undefined;
  converted_subtotal?: number | undefined;
  taxable_amount: number;
  tax_exemption?: string | undefined;
  exempt: boolean;
  tax_items?: Array<TaxItemBuilder$Outbound> | undefined;
  discount_builder?: DiscountBuilder$Outbound | undefined;
};

/** @internal */
export const TransactionItemBuilder$outboundSchema: z.ZodType<
  TransactionItemBuilder$Outbound,
  z.ZodTypeDef,
  TransactionItemBuilder
> = z.object({
  externalId: z.string().optional(),
  organizationId: z.string(),
  date: z.date().transform(v => v.toISOString()),
  description: z.string().optional(),
  externalProductId: z.string(),
  product: z.string().optional(),
  productId: z.string().optional(),
  productName: z.string().optional(),
  productDescription: z.string().optional(),
  quantity: z.number().default(1.0),
  amount: z.number().default(0.00),
  taxAmountImported: z.number().default(0.00),
  taxRateImported: z.number().default(0.00),
  taxAmountCalculated: z.number().default(0.00),
  taxRateCalculated: z.number().default(0.00),
  originalCurrency: CurrencyEnum$outboundSchema.optional(),
  destinationCurrency: CurrencyEnum$outboundSchema.optional(),
  convertedAmount: z.number().optional(),
  convertedTaxableAmount: z.number().optional(),
  convertedTaxAmountImported: z.number().optional(),
  convertedTaxAmountCalculated: z.number().optional(),
  convertedTotalDiscount: z.number().optional(),
  convertedSubtotal: z.number().optional(),
  taxableAmount: z.number().default(0.00),
  taxExemption: TaxExemptionEnum$outboundSchema.optional(),
  exempt: z.boolean().default(false),
  taxItems: z.array(TaxItemBuilder$outboundSchema).optional(),
  discountBuilder: DiscountBuilder$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    externalId: "external_id",
    organizationId: "organization_id",
    externalProductId: "external_product_id",
    productId: "product_id",
    productName: "product_name",
    productDescription: "product_description",
    taxAmountImported: "tax_amount_imported",
    taxRateImported: "tax_rate_imported",
    taxAmountCalculated: "tax_amount_calculated",
    taxRateCalculated: "tax_rate_calculated",
    originalCurrency: "original_currency",
    destinationCurrency: "destination_currency",
    convertedAmount: "converted_amount",
    convertedTaxableAmount: "converted_taxable_amount",
    convertedTaxAmountImported: "converted_tax_amount_imported",
    convertedTaxAmountCalculated: "converted_tax_amount_calculated",
    convertedTotalDiscount: "converted_total_discount",
    convertedSubtotal: "converted_subtotal",
    taxableAmount: "taxable_amount",
    taxExemption: "tax_exemption",
    taxItems: "tax_items",
    discountBuilder: "discount_builder",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionItemBuilder$ {
  /** @deprecated use `TransactionItemBuilder$inboundSchema` instead. */
  export const inboundSchema = TransactionItemBuilder$inboundSchema;
  /** @deprecated use `TransactionItemBuilder$outboundSchema` instead. */
  export const outboundSchema = TransactionItemBuilder$outboundSchema;
  /** @deprecated use `TransactionItemBuilder$Outbound` instead. */
  export type Outbound = TransactionItemBuilder$Outbound;
}

export function transactionItemBuilderToJSON(
  transactionItemBuilder: TransactionItemBuilder,
): string {
  return JSON.stringify(
    TransactionItemBuilder$outboundSchema.parse(transactionItemBuilder),
  );
}

export function transactionItemBuilderFromJSON(
  jsonString: string,
): SafeParseResult<TransactionItemBuilder, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TransactionItemBuilder$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TransactionItemBuilder' from JSON`,
  );
}
