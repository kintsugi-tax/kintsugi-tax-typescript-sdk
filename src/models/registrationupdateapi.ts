/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  ChangeRegimeStatusEnum,
  ChangeRegimeStatusEnum$inboundSchema,
  ChangeRegimeStatusEnum$outboundSchema,
} from "./changeregimestatusenum.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  FilingFrequencyEnum,
  FilingFrequencyEnum$inboundSchema,
  FilingFrequencyEnum$outboundSchema,
} from "./filingfrequencyenum.js";
import {
  RegistrationsRegimeEnum,
  RegistrationsRegimeEnum$inboundSchema,
  RegistrationsRegimeEnum$outboundSchema,
} from "./registrationsregimeenum.js";

export type RegistrationUpdateAPI = {
  /**
   * The date when the registration was created. Format: YYYY-MM-DD.
   */
  registrationDate?: string | undefined;
  /**
   * Email address associated with the registration.
   */
  registrationEmail?: string | undefined;
  /**
   * A unique key assigned to the registration.
   */
  registrationKey?: string | undefined;
  /**
   * A unique key assigned for deregistration.
   */
  deregistrationKey?: string | undefined;
  /**
   * Timestamp when the registration was requested.
   */
  registrationRequested?: string | undefined;
  /**
   * Timestamp when the registration was completed.
   */
  registrationCompleted?: string | undefined;
  /**
   * Timestamp when deregistration was requested.
   */
  deregistrationRequested?: string | undefined;
  /**
   * Timestamp when the deregistration was completed.
   */
  deregistrationCompleted?: string | undefined;
  /**
   * Indicates whether the registration was completed automatically.
   */
  autoRegistered?: boolean | undefined;
  registrationsRegime?: RegistrationsRegimeEnum | undefined;
  changeRegimeStatus?: ChangeRegimeStatusEnum | undefined;
  /**
   * Indicates whether third-party access is enabled for this registration.
   */
  thirdPartyEnabled?: boolean | undefined;
  /**
   * Indicates whether the  registration is marked as collecting in shopify
   */
  markedCollecting?: boolean | undefined;
  /**
   * The username associated with the registration.
   */
  username?: string | undefined;
  filingFrequency?: FilingFrequencyEnum | undefined;
  /**
   * The updated date from which filings should start (YYYY-MM-DD).
   */
  createFilingsFrom?: string | undefined;
  /**
   * Indicates whether the registration is approaching an action (e.g., renewal).
   */
  isApproaching?: boolean | undefined;
  /**
   * Additional notes or comments related to the registration.
   */
  comment?: string | undefined;
  /**
   * Indicates if the Voluntary Disclosure Agreement (VDA) applies.
   */
  vda?: boolean | undefined;
};

/** @internal */
export const RegistrationUpdateAPI$inboundSchema: z.ZodType<
  RegistrationUpdateAPI,
  z.ZodTypeDef,
  unknown
> = z.object({
  registration_date: z.string().optional(),
  registration_email: z.string().optional(),
  registration_key: z.string().optional(),
  deregistration_key: z.string().optional(),
  registration_requested: z.string().optional(),
  registration_completed: z.string().optional(),
  deregistration_requested: z.string().optional(),
  deregistration_completed: z.string().optional(),
  auto_registered: z.boolean().default(false),
  registrations_regime: RegistrationsRegimeEnum$inboundSchema.optional(),
  change_regime_status: ChangeRegimeStatusEnum$inboundSchema.optional(),
  third_party_enabled: z.boolean().default(false),
  marked_collecting: z.boolean().optional(),
  username: z.string().optional(),
  filing_frequency: FilingFrequencyEnum$inboundSchema.optional(),
  create_filings_from: z.string().optional(),
  is_approaching: z.boolean().optional(),
  comment: z.string().optional(),
  vda: z.boolean().optional(),
}).transform((v) => {
  return remap$(v, {
    "registration_date": "registrationDate",
    "registration_email": "registrationEmail",
    "registration_key": "registrationKey",
    "deregistration_key": "deregistrationKey",
    "registration_requested": "registrationRequested",
    "registration_completed": "registrationCompleted",
    "deregistration_requested": "deregistrationRequested",
    "deregistration_completed": "deregistrationCompleted",
    "auto_registered": "autoRegistered",
    "registrations_regime": "registrationsRegime",
    "change_regime_status": "changeRegimeStatus",
    "third_party_enabled": "thirdPartyEnabled",
    "marked_collecting": "markedCollecting",
    "filing_frequency": "filingFrequency",
    "create_filings_from": "createFilingsFrom",
    "is_approaching": "isApproaching",
  });
});

/** @internal */
export type RegistrationUpdateAPI$Outbound = {
  registration_date?: string | undefined;
  registration_email?: string | undefined;
  registration_key?: string | undefined;
  deregistration_key?: string | undefined;
  registration_requested?: string | undefined;
  registration_completed?: string | undefined;
  deregistration_requested?: string | undefined;
  deregistration_completed?: string | undefined;
  auto_registered: boolean;
  registrations_regime?: string | undefined;
  change_regime_status?: string | undefined;
  third_party_enabled: boolean;
  marked_collecting?: boolean | undefined;
  username?: string | undefined;
  filing_frequency?: string | undefined;
  create_filings_from?: string | undefined;
  is_approaching?: boolean | undefined;
  comment?: string | undefined;
  vda?: boolean | undefined;
};

/** @internal */
export const RegistrationUpdateAPI$outboundSchema: z.ZodType<
  RegistrationUpdateAPI$Outbound,
  z.ZodTypeDef,
  RegistrationUpdateAPI
> = z.object({
  registrationDate: z.string().optional(),
  registrationEmail: z.string().optional(),
  registrationKey: z.string().optional(),
  deregistrationKey: z.string().optional(),
  registrationRequested: z.string().optional(),
  registrationCompleted: z.string().optional(),
  deregistrationRequested: z.string().optional(),
  deregistrationCompleted: z.string().optional(),
  autoRegistered: z.boolean().default(false),
  registrationsRegime: RegistrationsRegimeEnum$outboundSchema.optional(),
  changeRegimeStatus: ChangeRegimeStatusEnum$outboundSchema.optional(),
  thirdPartyEnabled: z.boolean().default(false),
  markedCollecting: z.boolean().optional(),
  username: z.string().optional(),
  filingFrequency: FilingFrequencyEnum$outboundSchema.optional(),
  createFilingsFrom: z.string().optional(),
  isApproaching: z.boolean().optional(),
  comment: z.string().optional(),
  vda: z.boolean().optional(),
}).transform((v) => {
  return remap$(v, {
    registrationDate: "registration_date",
    registrationEmail: "registration_email",
    registrationKey: "registration_key",
    deregistrationKey: "deregistration_key",
    registrationRequested: "registration_requested",
    registrationCompleted: "registration_completed",
    deregistrationRequested: "deregistration_requested",
    deregistrationCompleted: "deregistration_completed",
    autoRegistered: "auto_registered",
    registrationsRegime: "registrations_regime",
    changeRegimeStatus: "change_regime_status",
    thirdPartyEnabled: "third_party_enabled",
    markedCollecting: "marked_collecting",
    filingFrequency: "filing_frequency",
    createFilingsFrom: "create_filings_from",
    isApproaching: "is_approaching",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RegistrationUpdateAPI$ {
  /** @deprecated use `RegistrationUpdateAPI$inboundSchema` instead. */
  export const inboundSchema = RegistrationUpdateAPI$inboundSchema;
  /** @deprecated use `RegistrationUpdateAPI$outboundSchema` instead. */
  export const outboundSchema = RegistrationUpdateAPI$outboundSchema;
  /** @deprecated use `RegistrationUpdateAPI$Outbound` instead. */
  export type Outbound = RegistrationUpdateAPI$Outbound;
}

export function registrationUpdateAPIToJSON(
  registrationUpdateAPI: RegistrationUpdateAPI,
): string {
  return JSON.stringify(
    RegistrationUpdateAPI$outboundSchema.parse(registrationUpdateAPI),
  );
}

export function registrationUpdateAPIFromJSON(
  jsonString: string,
): SafeParseResult<RegistrationUpdateAPI, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RegistrationUpdateAPI$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RegistrationUpdateAPI' from JSON`,
  );
}
