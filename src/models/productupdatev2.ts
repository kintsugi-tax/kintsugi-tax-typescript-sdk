/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  ProductStatusEnum,
  ProductStatusEnum$inboundSchema,
  ProductStatusEnum$outboundSchema,
} from "./productstatusenum.js";

export type ProductUpdateV2 = {
  name: string;
  status: ProductStatusEnum;
  productCategory: string;
  productSubcategory: string;
  taxExempt: boolean;
  externalId?: string | null | undefined;
  sku?: Array<string> | null | undefined;
  description?: string | null | undefined;
  classificationFailed?: boolean | null | undefined;
};

/** @internal */
export const ProductUpdateV2$inboundSchema: z.ZodType<
  ProductUpdateV2,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  status: ProductStatusEnum$inboundSchema,
  product_category: z.string(),
  product_subcategory: z.string(),
  tax_exempt: z.boolean(),
  external_id: z.nullable(z.string()).optional(),
  sku: z.nullable(z.array(z.string())).optional(),
  description: z.nullable(z.string()).optional(),
  classification_failed: z.nullable(z.boolean()).optional(),
}).transform((v) => {
  return remap$(v, {
    "product_category": "productCategory",
    "product_subcategory": "productSubcategory",
    "tax_exempt": "taxExempt",
    "external_id": "externalId",
    "classification_failed": "classificationFailed",
  });
});

/** @internal */
export type ProductUpdateV2$Outbound = {
  name: string;
  status: string;
  product_category: string;
  product_subcategory: string;
  tax_exempt: boolean;
  external_id?: string | null | undefined;
  sku?: Array<string> | null | undefined;
  description?: string | null | undefined;
  classification_failed?: boolean | null | undefined;
};

/** @internal */
export const ProductUpdateV2$outboundSchema: z.ZodType<
  ProductUpdateV2$Outbound,
  z.ZodTypeDef,
  ProductUpdateV2
> = z.object({
  name: z.string(),
  status: ProductStatusEnum$outboundSchema,
  productCategory: z.string(),
  productSubcategory: z.string(),
  taxExempt: z.boolean(),
  externalId: z.nullable(z.string()).optional(),
  sku: z.nullable(z.array(z.string())).optional(),
  description: z.nullable(z.string()).optional(),
  classificationFailed: z.nullable(z.boolean()).optional(),
}).transform((v) => {
  return remap$(v, {
    productCategory: "product_category",
    productSubcategory: "product_subcategory",
    taxExempt: "tax_exempt",
    externalId: "external_id",
    classificationFailed: "classification_failed",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ProductUpdateV2$ {
  /** @deprecated use `ProductUpdateV2$inboundSchema` instead. */
  export const inboundSchema = ProductUpdateV2$inboundSchema;
  /** @deprecated use `ProductUpdateV2$outboundSchema` instead. */
  export const outboundSchema = ProductUpdateV2$outboundSchema;
  /** @deprecated use `ProductUpdateV2$Outbound` instead. */
  export type Outbound = ProductUpdateV2$Outbound;
}

export function productUpdateV2ToJSON(
  productUpdateV2: ProductUpdateV2,
): string {
  return JSON.stringify(ProductUpdateV2$outboundSchema.parse(productUpdateV2));
}

export function productUpdateV2FromJSON(
  jsonString: string,
): SafeParseResult<ProductUpdateV2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ProductUpdateV2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ProductUpdateV2' from JSON`,
  );
}
