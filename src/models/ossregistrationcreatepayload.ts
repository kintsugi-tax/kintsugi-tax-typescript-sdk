/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  CountryCodeEnum,
  CountryCodeEnum$inboundSchema,
  CountryCodeEnum$outboundSchema,
} from "./countrycodeenum.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type OSSRegistrationCreatePayload = {
  /**
   * Specifies this is an OSS registration import.
   */
  registrationImportType?: string | undefined;
  /**
   * The plaintext password for accessing the tax registration account.
   */
  passwordPlainText?: string | undefined;
  /**
   * Metadata related to the password.
   */
  passwordMetadataPlainText?: string | undefined;
  memberStateOfIdentificationCode?: CountryCodeEnum | undefined;
  /**
   * Whether the registration was imported from another system.
   */
  imported?: boolean | undefined;
};

/** @internal */
export const OSSRegistrationCreatePayload$inboundSchema: z.ZodType<
  OSSRegistrationCreatePayload,
  z.ZodTypeDef,
  unknown
> = z.object({
  registration_import_type: z.string().default("OSS"),
  password_plain_text: z.string().optional(),
  password_metadata_plain_text: z.string().optional(),
  member_state_of_identification_code: CountryCodeEnum$inboundSchema.optional(),
  imported: z.boolean().default(false),
}).transform((v) => {
  return remap$(v, {
    "registration_import_type": "registrationImportType",
    "password_plain_text": "passwordPlainText",
    "password_metadata_plain_text": "passwordMetadataPlainText",
    "member_state_of_identification_code": "memberStateOfIdentificationCode",
  });
});

/** @internal */
export type OSSRegistrationCreatePayload$Outbound = {
  registration_import_type: string;
  password_plain_text?: string | undefined;
  password_metadata_plain_text?: string | undefined;
  member_state_of_identification_code?: string | undefined;
  imported: boolean;
};

/** @internal */
export const OSSRegistrationCreatePayload$outboundSchema: z.ZodType<
  OSSRegistrationCreatePayload$Outbound,
  z.ZodTypeDef,
  OSSRegistrationCreatePayload
> = z.object({
  registrationImportType: z.string().default("OSS"),
  passwordPlainText: z.string().optional(),
  passwordMetadataPlainText: z.string().optional(),
  memberStateOfIdentificationCode: CountryCodeEnum$outboundSchema.optional(),
  imported: z.boolean().default(false),
}).transform((v) => {
  return remap$(v, {
    registrationImportType: "registration_import_type",
    passwordPlainText: "password_plain_text",
    passwordMetadataPlainText: "password_metadata_plain_text",
    memberStateOfIdentificationCode: "member_state_of_identification_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OSSRegistrationCreatePayload$ {
  /** @deprecated use `OSSRegistrationCreatePayload$inboundSchema` instead. */
  export const inboundSchema = OSSRegistrationCreatePayload$inboundSchema;
  /** @deprecated use `OSSRegistrationCreatePayload$outboundSchema` instead. */
  export const outboundSchema = OSSRegistrationCreatePayload$outboundSchema;
  /** @deprecated use `OSSRegistrationCreatePayload$Outbound` instead. */
  export type Outbound = OSSRegistrationCreatePayload$Outbound;
}

export function ossRegistrationCreatePayloadToJSON(
  ossRegistrationCreatePayload: OSSRegistrationCreatePayload,
): string {
  return JSON.stringify(
    OSSRegistrationCreatePayload$outboundSchema.parse(
      ossRegistrationCreatePayload,
    ),
  );
}

export function ossRegistrationCreatePayloadFromJSON(
  jsonString: string,
): SafeParseResult<OSSRegistrationCreatePayload, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OSSRegistrationCreatePayload$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OSSRegistrationCreatePayload' from JSON`,
  );
}
