/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  ProductCategoryEnum,
  ProductCategoryEnum$inboundSchema,
  ProductCategoryEnum$outboundSchema,
} from "./productcategoryenum.js";
import {
  ProductStatusEnum,
  ProductStatusEnum$inboundSchema,
  ProductStatusEnum$outboundSchema,
} from "./productstatusenum.js";
import {
  ProductSubCategoryEnum,
  ProductSubCategoryEnum$inboundSchema,
  ProductSubCategoryEnum$outboundSchema,
} from "./productsubcategoryenum.js";
import {
  SourceEnum,
  SourceEnum$inboundSchema,
  SourceEnum$outboundSchema,
} from "./sourceenum.js";

export type ProductCreateManual = {
  /**
   * A unique external identifier for the product.
   */
  externalId: string;
  /**
   * The name of the product.
   */
  name: string;
  /**
   * A description of the product.
   */
  description?: string | undefined;
  status?: ProductStatusEnum | undefined;
  productCategory: ProductCategoryEnum;
  productSubcategory: ProductSubCategoryEnum;
  /**
   * Specifies whether the product is tax-exempt.
   */
  taxExempt: boolean;
  source?: SourceEnum | undefined;
};

/** @internal */
export const ProductCreateManual$inboundSchema: z.ZodType<
  ProductCreateManual,
  z.ZodTypeDef,
  unknown
> = z.object({
  external_id: z.string(),
  name: z.string(),
  description: z.string().optional(),
  status: ProductStatusEnum$inboundSchema.optional(),
  product_category: ProductCategoryEnum$inboundSchema,
  product_subcategory: ProductSubCategoryEnum$inboundSchema,
  tax_exempt: z.boolean(),
  source: SourceEnum$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "external_id": "externalId",
    "product_category": "productCategory",
    "product_subcategory": "productSubcategory",
    "tax_exempt": "taxExempt",
  });
});

/** @internal */
export type ProductCreateManual$Outbound = {
  external_id: string;
  name: string;
  description?: string | undefined;
  status?: string | undefined;
  product_category: string;
  product_subcategory: string;
  tax_exempt: boolean;
  source?: string | undefined;
};

/** @internal */
export const ProductCreateManual$outboundSchema: z.ZodType<
  ProductCreateManual$Outbound,
  z.ZodTypeDef,
  ProductCreateManual
> = z.object({
  externalId: z.string(),
  name: z.string(),
  description: z.string().optional(),
  status: ProductStatusEnum$outboundSchema.optional(),
  productCategory: ProductCategoryEnum$outboundSchema,
  productSubcategory: ProductSubCategoryEnum$outboundSchema,
  taxExempt: z.boolean(),
  source: SourceEnum$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    externalId: "external_id",
    productCategory: "product_category",
    productSubcategory: "product_subcategory",
    taxExempt: "tax_exempt",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ProductCreateManual$ {
  /** @deprecated use `ProductCreateManual$inboundSchema` instead. */
  export const inboundSchema = ProductCreateManual$inboundSchema;
  /** @deprecated use `ProductCreateManual$outboundSchema` instead. */
  export const outboundSchema = ProductCreateManual$outboundSchema;
  /** @deprecated use `ProductCreateManual$Outbound` instead. */
  export type Outbound = ProductCreateManual$Outbound;
}

export function productCreateManualToJSON(
  productCreateManual: ProductCreateManual,
): string {
  return JSON.stringify(
    ProductCreateManual$outboundSchema.parse(productCreateManual),
  );
}

export function productCreateManualFromJSON(
  jsonString: string,
): SafeParseResult<ProductCreateManual, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ProductCreateManual$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ProductCreateManual' from JSON`,
  );
}
