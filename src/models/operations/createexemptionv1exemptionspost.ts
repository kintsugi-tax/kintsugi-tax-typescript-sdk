/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type CreateExemptionV1ExemptionsPostSecurity = {
  apiKeyHeader?: string | undefined;
  httpBearer?: string | undefined;
};

export type CreateExemptionV1ExemptionsPostRequest = {
  /**
   * The unique identifier for the organization making the request
   */
  xOrganizationId: string | null;
  exemptionCreate: models.ExemptionCreate;
};

/** @internal */
export const CreateExemptionV1ExemptionsPostSecurity$inboundSchema: z.ZodType<
  CreateExemptionV1ExemptionsPostSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  APIKeyHeader: z.string().optional(),
  HTTPBearer: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "APIKeyHeader": "apiKeyHeader",
    "HTTPBearer": "httpBearer",
  });
});

/** @internal */
export type CreateExemptionV1ExemptionsPostSecurity$Outbound = {
  APIKeyHeader?: string | undefined;
  HTTPBearer?: string | undefined;
};

/** @internal */
export const CreateExemptionV1ExemptionsPostSecurity$outboundSchema: z.ZodType<
  CreateExemptionV1ExemptionsPostSecurity$Outbound,
  z.ZodTypeDef,
  CreateExemptionV1ExemptionsPostSecurity
> = z.object({
  apiKeyHeader: z.string().optional(),
  httpBearer: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    apiKeyHeader: "APIKeyHeader",
    httpBearer: "HTTPBearer",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateExemptionV1ExemptionsPostSecurity$ {
  /** @deprecated use `CreateExemptionV1ExemptionsPostSecurity$inboundSchema` instead. */
  export const inboundSchema =
    CreateExemptionV1ExemptionsPostSecurity$inboundSchema;
  /** @deprecated use `CreateExemptionV1ExemptionsPostSecurity$outboundSchema` instead. */
  export const outboundSchema =
    CreateExemptionV1ExemptionsPostSecurity$outboundSchema;
  /** @deprecated use `CreateExemptionV1ExemptionsPostSecurity$Outbound` instead. */
  export type Outbound = CreateExemptionV1ExemptionsPostSecurity$Outbound;
}

export function createExemptionV1ExemptionsPostSecurityToJSON(
  createExemptionV1ExemptionsPostSecurity:
    CreateExemptionV1ExemptionsPostSecurity,
): string {
  return JSON.stringify(
    CreateExemptionV1ExemptionsPostSecurity$outboundSchema.parse(
      createExemptionV1ExemptionsPostSecurity,
    ),
  );
}

export function createExemptionV1ExemptionsPostSecurityFromJSON(
  jsonString: string,
): SafeParseResult<
  CreateExemptionV1ExemptionsPostSecurity,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CreateExemptionV1ExemptionsPostSecurity$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'CreateExemptionV1ExemptionsPostSecurity' from JSON`,
  );
}

/** @internal */
export const CreateExemptionV1ExemptionsPostRequest$inboundSchema: z.ZodType<
  CreateExemptionV1ExemptionsPostRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  "x-organization-id": z.nullable(z.string()),
  ExemptionCreate: models.ExemptionCreate$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "x-organization-id": "xOrganizationId",
    "ExemptionCreate": "exemptionCreate",
  });
});

/** @internal */
export type CreateExemptionV1ExemptionsPostRequest$Outbound = {
  "x-organization-id": string | null;
  ExemptionCreate: models.ExemptionCreate$Outbound;
};

/** @internal */
export const CreateExemptionV1ExemptionsPostRequest$outboundSchema: z.ZodType<
  CreateExemptionV1ExemptionsPostRequest$Outbound,
  z.ZodTypeDef,
  CreateExemptionV1ExemptionsPostRequest
> = z.object({
  xOrganizationId: z.nullable(z.string()),
  exemptionCreate: models.ExemptionCreate$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    xOrganizationId: "x-organization-id",
    exemptionCreate: "ExemptionCreate",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateExemptionV1ExemptionsPostRequest$ {
  /** @deprecated use `CreateExemptionV1ExemptionsPostRequest$inboundSchema` instead. */
  export const inboundSchema =
    CreateExemptionV1ExemptionsPostRequest$inboundSchema;
  /** @deprecated use `CreateExemptionV1ExemptionsPostRequest$outboundSchema` instead. */
  export const outboundSchema =
    CreateExemptionV1ExemptionsPostRequest$outboundSchema;
  /** @deprecated use `CreateExemptionV1ExemptionsPostRequest$Outbound` instead. */
  export type Outbound = CreateExemptionV1ExemptionsPostRequest$Outbound;
}

export function createExemptionV1ExemptionsPostRequestToJSON(
  createExemptionV1ExemptionsPostRequest:
    CreateExemptionV1ExemptionsPostRequest,
): string {
  return JSON.stringify(
    CreateExemptionV1ExemptionsPostRequest$outboundSchema.parse(
      createExemptionV1ExemptionsPostRequest,
    ),
  );
}

export function createExemptionV1ExemptionsPostRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateExemptionV1ExemptionsPostRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CreateExemptionV1ExemptionsPostRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateExemptionV1ExemptionsPostRequest' from JSON`,
  );
}
