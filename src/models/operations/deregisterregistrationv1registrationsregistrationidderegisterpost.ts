/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DeregisterRegistrationV1RegistrationsRegistrationIdDeregisterPostRequest =
  {
    /**
     * The unique identifier of the registration to deregister.
     */
    registrationId: string;
  };

/** @internal */
export const DeregisterRegistrationV1RegistrationsRegistrationIdDeregisterPostRequest$inboundSchema:
  z.ZodType<
    DeregisterRegistrationV1RegistrationsRegistrationIdDeregisterPostRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    registration_id: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "registration_id": "registrationId",
    });
  });

/** @internal */
export type DeregisterRegistrationV1RegistrationsRegistrationIdDeregisterPostRequest$Outbound =
  {
    registration_id: string;
  };

/** @internal */
export const DeregisterRegistrationV1RegistrationsRegistrationIdDeregisterPostRequest$outboundSchema:
  z.ZodType<
    DeregisterRegistrationV1RegistrationsRegistrationIdDeregisterPostRequest$Outbound,
    z.ZodTypeDef,
    DeregisterRegistrationV1RegistrationsRegistrationIdDeregisterPostRequest
  > = z.object({
    registrationId: z.string(),
  }).transform((v) => {
    return remap$(v, {
      registrationId: "registration_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeregisterRegistrationV1RegistrationsRegistrationIdDeregisterPostRequest$ {
  /** @deprecated use `DeregisterRegistrationV1RegistrationsRegistrationIdDeregisterPostRequest$inboundSchema` instead. */
  export const inboundSchema =
    DeregisterRegistrationV1RegistrationsRegistrationIdDeregisterPostRequest$inboundSchema;
  /** @deprecated use `DeregisterRegistrationV1RegistrationsRegistrationIdDeregisterPostRequest$outboundSchema` instead. */
  export const outboundSchema =
    DeregisterRegistrationV1RegistrationsRegistrationIdDeregisterPostRequest$outboundSchema;
  /** @deprecated use `DeregisterRegistrationV1RegistrationsRegistrationIdDeregisterPostRequest$Outbound` instead. */
  export type Outbound =
    DeregisterRegistrationV1RegistrationsRegistrationIdDeregisterPostRequest$Outbound;
}

export function deregisterRegistrationV1RegistrationsRegistrationIdDeregisterPostRequestToJSON(
  deregisterRegistrationV1RegistrationsRegistrationIdDeregisterPostRequest:
    DeregisterRegistrationV1RegistrationsRegistrationIdDeregisterPostRequest,
): string {
  return JSON.stringify(
    DeregisterRegistrationV1RegistrationsRegistrationIdDeregisterPostRequest$outboundSchema
      .parse(
        deregisterRegistrationV1RegistrationsRegistrationIdDeregisterPostRequest,
      ),
  );
}

export function deregisterRegistrationV1RegistrationsRegistrationIdDeregisterPostRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  DeregisterRegistrationV1RegistrationsRegistrationIdDeregisterPostRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      DeregisterRegistrationV1RegistrationsRegistrationIdDeregisterPostRequest$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'DeregisterRegistrationV1RegistrationsRegistrationIdDeregisterPostRequest' from JSON`,
  );
}
