/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type SuggestionsV1AddressValidationSuggestionsPostSecurity = {
  apiKeyHeader?: string | undefined;
  httpBearer?: string | undefined;
};

export type SuggestionsV1AddressValidationSuggestionsPostRequest = {
  /**
   * The unique identifier for the organization making the request
   */
  xOrganizationId: string | null;
  validationAddress: models.ValidationAddress;
};

/** @internal */
export const SuggestionsV1AddressValidationSuggestionsPostSecurity$inboundSchema:
  z.ZodType<
    SuggestionsV1AddressValidationSuggestionsPostSecurity,
    z.ZodTypeDef,
    unknown
  > = z.object({
    APIKeyHeader: z.string().optional(),
    HTTPBearer: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      "APIKeyHeader": "apiKeyHeader",
      "HTTPBearer": "httpBearer",
    });
  });

/** @internal */
export type SuggestionsV1AddressValidationSuggestionsPostSecurity$Outbound = {
  APIKeyHeader?: string | undefined;
  HTTPBearer?: string | undefined;
};

/** @internal */
export const SuggestionsV1AddressValidationSuggestionsPostSecurity$outboundSchema:
  z.ZodType<
    SuggestionsV1AddressValidationSuggestionsPostSecurity$Outbound,
    z.ZodTypeDef,
    SuggestionsV1AddressValidationSuggestionsPostSecurity
  > = z.object({
    apiKeyHeader: z.string().optional(),
    httpBearer: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      apiKeyHeader: "APIKeyHeader",
      httpBearer: "HTTPBearer",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SuggestionsV1AddressValidationSuggestionsPostSecurity$ {
  /** @deprecated use `SuggestionsV1AddressValidationSuggestionsPostSecurity$inboundSchema` instead. */
  export const inboundSchema =
    SuggestionsV1AddressValidationSuggestionsPostSecurity$inboundSchema;
  /** @deprecated use `SuggestionsV1AddressValidationSuggestionsPostSecurity$outboundSchema` instead. */
  export const outboundSchema =
    SuggestionsV1AddressValidationSuggestionsPostSecurity$outboundSchema;
  /** @deprecated use `SuggestionsV1AddressValidationSuggestionsPostSecurity$Outbound` instead. */
  export type Outbound =
    SuggestionsV1AddressValidationSuggestionsPostSecurity$Outbound;
}

export function suggestionsV1AddressValidationSuggestionsPostSecurityToJSON(
  suggestionsV1AddressValidationSuggestionsPostSecurity:
    SuggestionsV1AddressValidationSuggestionsPostSecurity,
): string {
  return JSON.stringify(
    SuggestionsV1AddressValidationSuggestionsPostSecurity$outboundSchema.parse(
      suggestionsV1AddressValidationSuggestionsPostSecurity,
    ),
  );
}

export function suggestionsV1AddressValidationSuggestionsPostSecurityFromJSON(
  jsonString: string,
): SafeParseResult<
  SuggestionsV1AddressValidationSuggestionsPostSecurity,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      SuggestionsV1AddressValidationSuggestionsPostSecurity$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'SuggestionsV1AddressValidationSuggestionsPostSecurity' from JSON`,
  );
}

/** @internal */
export const SuggestionsV1AddressValidationSuggestionsPostRequest$inboundSchema:
  z.ZodType<
    SuggestionsV1AddressValidationSuggestionsPostRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    "x-organization-id": z.nullable(z.string()),
    ValidationAddress: models.ValidationAddress$inboundSchema,
  }).transform((v) => {
    return remap$(v, {
      "x-organization-id": "xOrganizationId",
      "ValidationAddress": "validationAddress",
    });
  });

/** @internal */
export type SuggestionsV1AddressValidationSuggestionsPostRequest$Outbound = {
  "x-organization-id": string | null;
  ValidationAddress: models.ValidationAddress$Outbound;
};

/** @internal */
export const SuggestionsV1AddressValidationSuggestionsPostRequest$outboundSchema:
  z.ZodType<
    SuggestionsV1AddressValidationSuggestionsPostRequest$Outbound,
    z.ZodTypeDef,
    SuggestionsV1AddressValidationSuggestionsPostRequest
  > = z.object({
    xOrganizationId: z.nullable(z.string()),
    validationAddress: models.ValidationAddress$outboundSchema,
  }).transform((v) => {
    return remap$(v, {
      xOrganizationId: "x-organization-id",
      validationAddress: "ValidationAddress",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SuggestionsV1AddressValidationSuggestionsPostRequest$ {
  /** @deprecated use `SuggestionsV1AddressValidationSuggestionsPostRequest$inboundSchema` instead. */
  export const inboundSchema =
    SuggestionsV1AddressValidationSuggestionsPostRequest$inboundSchema;
  /** @deprecated use `SuggestionsV1AddressValidationSuggestionsPostRequest$outboundSchema` instead. */
  export const outboundSchema =
    SuggestionsV1AddressValidationSuggestionsPostRequest$outboundSchema;
  /** @deprecated use `SuggestionsV1AddressValidationSuggestionsPostRequest$Outbound` instead. */
  export type Outbound =
    SuggestionsV1AddressValidationSuggestionsPostRequest$Outbound;
}

export function suggestionsV1AddressValidationSuggestionsPostRequestToJSON(
  suggestionsV1AddressValidationSuggestionsPostRequest:
    SuggestionsV1AddressValidationSuggestionsPostRequest,
): string {
  return JSON.stringify(
    SuggestionsV1AddressValidationSuggestionsPostRequest$outboundSchema.parse(
      suggestionsV1AddressValidationSuggestionsPostRequest,
    ),
  );
}

export function suggestionsV1AddressValidationSuggestionsPostRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  SuggestionsV1AddressValidationSuggestionsPostRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      SuggestionsV1AddressValidationSuggestionsPostRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'SuggestionsV1AddressValidationSuggestionsPostRequest' from JSON`,
  );
}
