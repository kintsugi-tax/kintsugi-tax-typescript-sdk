/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type CreateProductV1ProductsPostSecurity = {
  apiKeyHeader?: string | undefined;
  httpBearer?: string | undefined;
};

export type CreateProductV1ProductsPostRequest = {
  /**
   * The unique identifier for the organization making the request
   */
  xOrganizationId: string | null;
  productCreateManual: models.ProductCreateManual;
};

/** @internal */
export const CreateProductV1ProductsPostSecurity$inboundSchema: z.ZodType<
  CreateProductV1ProductsPostSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  APIKeyHeader: z.string().optional(),
  HTTPBearer: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "APIKeyHeader": "apiKeyHeader",
    "HTTPBearer": "httpBearer",
  });
});

/** @internal */
export type CreateProductV1ProductsPostSecurity$Outbound = {
  APIKeyHeader?: string | undefined;
  HTTPBearer?: string | undefined;
};

/** @internal */
export const CreateProductV1ProductsPostSecurity$outboundSchema: z.ZodType<
  CreateProductV1ProductsPostSecurity$Outbound,
  z.ZodTypeDef,
  CreateProductV1ProductsPostSecurity
> = z.object({
  apiKeyHeader: z.string().optional(),
  httpBearer: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    apiKeyHeader: "APIKeyHeader",
    httpBearer: "HTTPBearer",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateProductV1ProductsPostSecurity$ {
  /** @deprecated use `CreateProductV1ProductsPostSecurity$inboundSchema` instead. */
  export const inboundSchema =
    CreateProductV1ProductsPostSecurity$inboundSchema;
  /** @deprecated use `CreateProductV1ProductsPostSecurity$outboundSchema` instead. */
  export const outboundSchema =
    CreateProductV1ProductsPostSecurity$outboundSchema;
  /** @deprecated use `CreateProductV1ProductsPostSecurity$Outbound` instead. */
  export type Outbound = CreateProductV1ProductsPostSecurity$Outbound;
}

export function createProductV1ProductsPostSecurityToJSON(
  createProductV1ProductsPostSecurity: CreateProductV1ProductsPostSecurity,
): string {
  return JSON.stringify(
    CreateProductV1ProductsPostSecurity$outboundSchema.parse(
      createProductV1ProductsPostSecurity,
    ),
  );
}

export function createProductV1ProductsPostSecurityFromJSON(
  jsonString: string,
): SafeParseResult<CreateProductV1ProductsPostSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CreateProductV1ProductsPostSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateProductV1ProductsPostSecurity' from JSON`,
  );
}

/** @internal */
export const CreateProductV1ProductsPostRequest$inboundSchema: z.ZodType<
  CreateProductV1ProductsPostRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  "x-organization-id": z.nullable(z.string()),
  ProductCreateManual: models.ProductCreateManual$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "x-organization-id": "xOrganizationId",
    "ProductCreateManual": "productCreateManual",
  });
});

/** @internal */
export type CreateProductV1ProductsPostRequest$Outbound = {
  "x-organization-id": string | null;
  ProductCreateManual: models.ProductCreateManual$Outbound;
};

/** @internal */
export const CreateProductV1ProductsPostRequest$outboundSchema: z.ZodType<
  CreateProductV1ProductsPostRequest$Outbound,
  z.ZodTypeDef,
  CreateProductV1ProductsPostRequest
> = z.object({
  xOrganizationId: z.nullable(z.string()),
  productCreateManual: models.ProductCreateManual$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    xOrganizationId: "x-organization-id",
    productCreateManual: "ProductCreateManual",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateProductV1ProductsPostRequest$ {
  /** @deprecated use `CreateProductV1ProductsPostRequest$inboundSchema` instead. */
  export const inboundSchema = CreateProductV1ProductsPostRequest$inboundSchema;
  /** @deprecated use `CreateProductV1ProductsPostRequest$outboundSchema` instead. */
  export const outboundSchema =
    CreateProductV1ProductsPostRequest$outboundSchema;
  /** @deprecated use `CreateProductV1ProductsPostRequest$Outbound` instead. */
  export type Outbound = CreateProductV1ProductsPostRequest$Outbound;
}

export function createProductV1ProductsPostRequestToJSON(
  createProductV1ProductsPostRequest: CreateProductV1ProductsPostRequest,
): string {
  return JSON.stringify(
    CreateProductV1ProductsPostRequest$outboundSchema.parse(
      createProductV1ProductsPostRequest,
    ),
  );
}

export function createProductV1ProductsPostRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateProductV1ProductsPostRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CreateProductV1ProductsPostRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateProductV1ProductsPostRequest' from JSON`,
  );
}
