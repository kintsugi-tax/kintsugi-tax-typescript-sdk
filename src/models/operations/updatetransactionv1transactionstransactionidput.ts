/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type UpdateTransactionV1TransactionsTransactionIdPutRequest = {
  transactionId: string;
  transactionUpdate: models.TransactionUpdate;
};

/** @internal */
export const UpdateTransactionV1TransactionsTransactionIdPutRequest$inboundSchema:
  z.ZodType<
    UpdateTransactionV1TransactionsTransactionIdPutRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    transaction_id: z.string(),
    TransactionUpdate: models.TransactionUpdate$inboundSchema,
  }).transform((v) => {
    return remap$(v, {
      "transaction_id": "transactionId",
      "TransactionUpdate": "transactionUpdate",
    });
  });

/** @internal */
export type UpdateTransactionV1TransactionsTransactionIdPutRequest$Outbound = {
  transaction_id: string;
  TransactionUpdate: models.TransactionUpdate$Outbound;
};

/** @internal */
export const UpdateTransactionV1TransactionsTransactionIdPutRequest$outboundSchema:
  z.ZodType<
    UpdateTransactionV1TransactionsTransactionIdPutRequest$Outbound,
    z.ZodTypeDef,
    UpdateTransactionV1TransactionsTransactionIdPutRequest
  > = z.object({
    transactionId: z.string(),
    transactionUpdate: models.TransactionUpdate$outboundSchema,
  }).transform((v) => {
    return remap$(v, {
      transactionId: "transaction_id",
      transactionUpdate: "TransactionUpdate",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateTransactionV1TransactionsTransactionIdPutRequest$ {
  /** @deprecated use `UpdateTransactionV1TransactionsTransactionIdPutRequest$inboundSchema` instead. */
  export const inboundSchema =
    UpdateTransactionV1TransactionsTransactionIdPutRequest$inboundSchema;
  /** @deprecated use `UpdateTransactionV1TransactionsTransactionIdPutRequest$outboundSchema` instead. */
  export const outboundSchema =
    UpdateTransactionV1TransactionsTransactionIdPutRequest$outboundSchema;
  /** @deprecated use `UpdateTransactionV1TransactionsTransactionIdPutRequest$Outbound` instead. */
  export type Outbound =
    UpdateTransactionV1TransactionsTransactionIdPutRequest$Outbound;
}

export function updateTransactionV1TransactionsTransactionIdPutRequestToJSON(
  updateTransactionV1TransactionsTransactionIdPutRequest:
    UpdateTransactionV1TransactionsTransactionIdPutRequest,
): string {
  return JSON.stringify(
    UpdateTransactionV1TransactionsTransactionIdPutRequest$outboundSchema.parse(
      updateTransactionV1TransactionsTransactionIdPutRequest,
    ),
  );
}

export function updateTransactionV1TransactionsTransactionIdPutRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  UpdateTransactionV1TransactionsTransactionIdPutRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateTransactionV1TransactionsTransactionIdPutRequest$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'UpdateTransactionV1TransactionsTransactionIdPutRequest' from JSON`,
  );
}
