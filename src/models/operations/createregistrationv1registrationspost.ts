/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type CreateRegistration =
  | (models.RegistrationCreatePayload & { registrationImportType: "REGULAR" })
  | (models.OSSRegistrationCreatePayload & { registrationImportType: "OSS" })
  | (models.SSTRegistrationCreatePayload & { registrationImportType: "SST" });

/** @internal */
export const CreateRegistration$inboundSchema: z.ZodType<
  CreateRegistration,
  z.ZodTypeDef,
  unknown
> = z.union([
  models.RegistrationCreatePayload$inboundSchema.and(
    z.object({ registration_import_type: z.literal("REGULAR") }).transform((
      v,
    ) => ({ registrationImportType: v.registration_import_type })),
  ),
  models.OSSRegistrationCreatePayload$inboundSchema.and(
    z.object({ registration_import_type: z.literal("OSS") }).transform((v) => ({
      registrationImportType: v.registration_import_type,
    })),
  ),
  models.SSTRegistrationCreatePayload$inboundSchema.and(
    z.object({ registration_import_type: z.literal("SST") }).transform((v) => ({
      registrationImportType: v.registration_import_type,
    })),
  ),
]);

/** @internal */
export type CreateRegistration$Outbound =
  | (models.RegistrationCreatePayload$Outbound & {
    registration_import_type: "REGULAR";
  })
  | (models.OSSRegistrationCreatePayload$Outbound & {
    registration_import_type: "OSS";
  })
  | (models.SSTRegistrationCreatePayload$Outbound & {
    registration_import_type: "SST";
  });

/** @internal */
export const CreateRegistration$outboundSchema: z.ZodType<
  CreateRegistration$Outbound,
  z.ZodTypeDef,
  CreateRegistration
> = z.union([
  models.RegistrationCreatePayload$outboundSchema.and(
    z.object({ registrationImportType: z.literal("REGULAR") }).transform((
      v,
    ) => ({ registration_import_type: v.registrationImportType })),
  ),
  models.OSSRegistrationCreatePayload$outboundSchema.and(
    z.object({ registrationImportType: z.literal("OSS") }).transform((v) => ({
      registration_import_type: v.registrationImportType,
    })),
  ),
  models.SSTRegistrationCreatePayload$outboundSchema.and(
    z.object({ registrationImportType: z.literal("SST") }).transform((v) => ({
      registration_import_type: v.registrationImportType,
    })),
  ),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateRegistration$ {
  /** @deprecated use `CreateRegistration$inboundSchema` instead. */
  export const inboundSchema = CreateRegistration$inboundSchema;
  /** @deprecated use `CreateRegistration$outboundSchema` instead. */
  export const outboundSchema = CreateRegistration$outboundSchema;
  /** @deprecated use `CreateRegistration$Outbound` instead. */
  export type Outbound = CreateRegistration$Outbound;
}

export function createRegistrationToJSON(
  createRegistration: CreateRegistration,
): string {
  return JSON.stringify(
    CreateRegistration$outboundSchema.parse(createRegistration),
  );
}

export function createRegistrationFromJSON(
  jsonString: string,
): SafeParseResult<CreateRegistration, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateRegistration$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateRegistration' from JSON`,
  );
}
