/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetProductCategoriesV1ProductsCategoriesGetSecurity = {
  apiKeyHeader?: string | undefined;
  httpBearer?: string | undefined;
};

export type GetProductCategoriesV1ProductsCategoriesGetRequest = {
  /**
   * The unique identifier for the organization making the request
   */
  xOrganizationId: string | null;
};

/** @internal */
export const GetProductCategoriesV1ProductsCategoriesGetSecurity$inboundSchema:
  z.ZodType<
    GetProductCategoriesV1ProductsCategoriesGetSecurity,
    z.ZodTypeDef,
    unknown
  > = z.object({
    APIKeyHeader: z.string().optional(),
    HTTPBearer: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      "APIKeyHeader": "apiKeyHeader",
      "HTTPBearer": "httpBearer",
    });
  });

/** @internal */
export type GetProductCategoriesV1ProductsCategoriesGetSecurity$Outbound = {
  APIKeyHeader?: string | undefined;
  HTTPBearer?: string | undefined;
};

/** @internal */
export const GetProductCategoriesV1ProductsCategoriesGetSecurity$outboundSchema:
  z.ZodType<
    GetProductCategoriesV1ProductsCategoriesGetSecurity$Outbound,
    z.ZodTypeDef,
    GetProductCategoriesV1ProductsCategoriesGetSecurity
  > = z.object({
    apiKeyHeader: z.string().optional(),
    httpBearer: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      apiKeyHeader: "APIKeyHeader",
      httpBearer: "HTTPBearer",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetProductCategoriesV1ProductsCategoriesGetSecurity$ {
  /** @deprecated use `GetProductCategoriesV1ProductsCategoriesGetSecurity$inboundSchema` instead. */
  export const inboundSchema =
    GetProductCategoriesV1ProductsCategoriesGetSecurity$inboundSchema;
  /** @deprecated use `GetProductCategoriesV1ProductsCategoriesGetSecurity$outboundSchema` instead. */
  export const outboundSchema =
    GetProductCategoriesV1ProductsCategoriesGetSecurity$outboundSchema;
  /** @deprecated use `GetProductCategoriesV1ProductsCategoriesGetSecurity$Outbound` instead. */
  export type Outbound =
    GetProductCategoriesV1ProductsCategoriesGetSecurity$Outbound;
}

export function getProductCategoriesV1ProductsCategoriesGetSecurityToJSON(
  getProductCategoriesV1ProductsCategoriesGetSecurity:
    GetProductCategoriesV1ProductsCategoriesGetSecurity,
): string {
  return JSON.stringify(
    GetProductCategoriesV1ProductsCategoriesGetSecurity$outboundSchema.parse(
      getProductCategoriesV1ProductsCategoriesGetSecurity,
    ),
  );
}

export function getProductCategoriesV1ProductsCategoriesGetSecurityFromJSON(
  jsonString: string,
): SafeParseResult<
  GetProductCategoriesV1ProductsCategoriesGetSecurity,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetProductCategoriesV1ProductsCategoriesGetSecurity$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetProductCategoriesV1ProductsCategoriesGetSecurity' from JSON`,
  );
}

/** @internal */
export const GetProductCategoriesV1ProductsCategoriesGetRequest$inboundSchema:
  z.ZodType<
    GetProductCategoriesV1ProductsCategoriesGetRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    "x-organization-id": z.nullable(z.string()),
  }).transform((v) => {
    return remap$(v, {
      "x-organization-id": "xOrganizationId",
    });
  });

/** @internal */
export type GetProductCategoriesV1ProductsCategoriesGetRequest$Outbound = {
  "x-organization-id": string | null;
};

/** @internal */
export const GetProductCategoriesV1ProductsCategoriesGetRequest$outboundSchema:
  z.ZodType<
    GetProductCategoriesV1ProductsCategoriesGetRequest$Outbound,
    z.ZodTypeDef,
    GetProductCategoriesV1ProductsCategoriesGetRequest
  > = z.object({
    xOrganizationId: z.nullable(z.string()),
  }).transform((v) => {
    return remap$(v, {
      xOrganizationId: "x-organization-id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetProductCategoriesV1ProductsCategoriesGetRequest$ {
  /** @deprecated use `GetProductCategoriesV1ProductsCategoriesGetRequest$inboundSchema` instead. */
  export const inboundSchema =
    GetProductCategoriesV1ProductsCategoriesGetRequest$inboundSchema;
  /** @deprecated use `GetProductCategoriesV1ProductsCategoriesGetRequest$outboundSchema` instead. */
  export const outboundSchema =
    GetProductCategoriesV1ProductsCategoriesGetRequest$outboundSchema;
  /** @deprecated use `GetProductCategoriesV1ProductsCategoriesGetRequest$Outbound` instead. */
  export type Outbound =
    GetProductCategoriesV1ProductsCategoriesGetRequest$Outbound;
}

export function getProductCategoriesV1ProductsCategoriesGetRequestToJSON(
  getProductCategoriesV1ProductsCategoriesGetRequest:
    GetProductCategoriesV1ProductsCategoriesGetRequest,
): string {
  return JSON.stringify(
    GetProductCategoriesV1ProductsCategoriesGetRequest$outboundSchema.parse(
      getProductCategoriesV1ProductsCategoriesGetRequest,
    ),
  );
}

export function getProductCategoriesV1ProductsCategoriesGetRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  GetProductCategoriesV1ProductsCategoriesGetRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetProductCategoriesV1ProductsCategoriesGetRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetProductCategoriesV1ProductsCategoriesGetRequest' from JSON`,
  );
}
