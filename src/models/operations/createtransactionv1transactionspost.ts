/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type CreateTransactionV1TransactionsPostSecurity = {
  apiKeyHeader?: string | undefined;
  httpBearer?: string | undefined;
};

export type CreateTransactionV1TransactionsPostRequest = {
  /**
   * The unique identifier for the organization making the request
   */
  xOrganizationId: string | null;
  transactionPublicRequest: models.TransactionPublicRequest;
};

/** @internal */
export const CreateTransactionV1TransactionsPostSecurity$inboundSchema:
  z.ZodType<
    CreateTransactionV1TransactionsPostSecurity,
    z.ZodTypeDef,
    unknown
  > = z.object({
    APIKeyHeader: z.string().optional(),
    HTTPBearer: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      "APIKeyHeader": "apiKeyHeader",
      "HTTPBearer": "httpBearer",
    });
  });

/** @internal */
export type CreateTransactionV1TransactionsPostSecurity$Outbound = {
  APIKeyHeader?: string | undefined;
  HTTPBearer?: string | undefined;
};

/** @internal */
export const CreateTransactionV1TransactionsPostSecurity$outboundSchema:
  z.ZodType<
    CreateTransactionV1TransactionsPostSecurity$Outbound,
    z.ZodTypeDef,
    CreateTransactionV1TransactionsPostSecurity
  > = z.object({
    apiKeyHeader: z.string().optional(),
    httpBearer: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      apiKeyHeader: "APIKeyHeader",
      httpBearer: "HTTPBearer",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateTransactionV1TransactionsPostSecurity$ {
  /** @deprecated use `CreateTransactionV1TransactionsPostSecurity$inboundSchema` instead. */
  export const inboundSchema =
    CreateTransactionV1TransactionsPostSecurity$inboundSchema;
  /** @deprecated use `CreateTransactionV1TransactionsPostSecurity$outboundSchema` instead. */
  export const outboundSchema =
    CreateTransactionV1TransactionsPostSecurity$outboundSchema;
  /** @deprecated use `CreateTransactionV1TransactionsPostSecurity$Outbound` instead. */
  export type Outbound = CreateTransactionV1TransactionsPostSecurity$Outbound;
}

export function createTransactionV1TransactionsPostSecurityToJSON(
  createTransactionV1TransactionsPostSecurity:
    CreateTransactionV1TransactionsPostSecurity,
): string {
  return JSON.stringify(
    CreateTransactionV1TransactionsPostSecurity$outboundSchema.parse(
      createTransactionV1TransactionsPostSecurity,
    ),
  );
}

export function createTransactionV1TransactionsPostSecurityFromJSON(
  jsonString: string,
): SafeParseResult<
  CreateTransactionV1TransactionsPostSecurity,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CreateTransactionV1TransactionsPostSecurity$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'CreateTransactionV1TransactionsPostSecurity' from JSON`,
  );
}

/** @internal */
export const CreateTransactionV1TransactionsPostRequest$inboundSchema:
  z.ZodType<CreateTransactionV1TransactionsPostRequest, z.ZodTypeDef, unknown> =
    z.object({
      "x-organization-id": z.nullable(z.string()),
      TransactionPublicRequest: models.TransactionPublicRequest$inboundSchema,
    }).transform((v) => {
      return remap$(v, {
        "x-organization-id": "xOrganizationId",
        "TransactionPublicRequest": "transactionPublicRequest",
      });
    });

/** @internal */
export type CreateTransactionV1TransactionsPostRequest$Outbound = {
  "x-organization-id": string | null;
  TransactionPublicRequest: models.TransactionPublicRequest$Outbound;
};

/** @internal */
export const CreateTransactionV1TransactionsPostRequest$outboundSchema:
  z.ZodType<
    CreateTransactionV1TransactionsPostRequest$Outbound,
    z.ZodTypeDef,
    CreateTransactionV1TransactionsPostRequest
  > = z.object({
    xOrganizationId: z.nullable(z.string()),
    transactionPublicRequest: models.TransactionPublicRequest$outboundSchema,
  }).transform((v) => {
    return remap$(v, {
      xOrganizationId: "x-organization-id",
      transactionPublicRequest: "TransactionPublicRequest",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateTransactionV1TransactionsPostRequest$ {
  /** @deprecated use `CreateTransactionV1TransactionsPostRequest$inboundSchema` instead. */
  export const inboundSchema =
    CreateTransactionV1TransactionsPostRequest$inboundSchema;
  /** @deprecated use `CreateTransactionV1TransactionsPostRequest$outboundSchema` instead. */
  export const outboundSchema =
    CreateTransactionV1TransactionsPostRequest$outboundSchema;
  /** @deprecated use `CreateTransactionV1TransactionsPostRequest$Outbound` instead. */
  export type Outbound = CreateTransactionV1TransactionsPostRequest$Outbound;
}

export function createTransactionV1TransactionsPostRequestToJSON(
  createTransactionV1TransactionsPostRequest:
    CreateTransactionV1TransactionsPostRequest,
): string {
  return JSON.stringify(
    CreateTransactionV1TransactionsPostRequest$outboundSchema.parse(
      createTransactionV1TransactionsPostRequest,
    ),
  );
}

export function createTransactionV1TransactionsPostRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  CreateTransactionV1TransactionsPostRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CreateTransactionV1TransactionsPostRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'CreateTransactionV1TransactionsPostRequest' from JSON`,
  );
}
