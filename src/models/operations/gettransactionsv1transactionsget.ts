/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { RFCDate } from "../../types/rfcdate.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type GetTransactionsV1TransactionsGetSecurity = {
  apiKeyHeader?: string | undefined;
  httpBearer?: string | undefined;
};

export type GetTransactionsV1TransactionsGetCountry =
  | models.CountryCodeEnum
  | string;

export type GetTransactionsV1TransactionsGetRequest = {
  /**
   * Filter transactions by state code.
   */
  stateCode?: string | null | undefined;
  /**
   * Filter by transaction type (e.g., SALE, FULL_CREDIT_NOTE,
   *
   * @remarks
   *         PARTIAL_CREDIT_NOTE, ARCHIVE etc.).
   */
  transactionType?: string | null | undefined;
  /**
   * Filter transactions based on the source.
   */
  transactionSource?: string | null | undefined;
  /**
   * Search for transactions using a general query
   *
   * @remarks
   *         (e.g., order ID, customer name).
   */
  searchQuery?: string | null | undefined;
  /**
   * Filter transactions by country code
   *
   * @remarks
   *         (ISO 3166-1 alpha-2 format, e.g., US).
   */
  country?: Array<models.CountryCodeEnum | string> | null | undefined;
  /**
   * Filter by full state name (e.g., California).
   */
  state?: string | null | undefined;
  /**
   * Filter by address status (e.g., UNVERIFIED, INVALID,
   *
   * @remarks
   *         PARTIALLY_VERIFIED, VERIFIED, UNVERIFIABLE).
   */
  addressStatusIn?: string | null | undefined;
  /**
   * Filter by transaction status (e.g., PENDING, COMMITTED,
   *
   * @remarks
   *         CANCELLED, FULLY_REFUNDED, PARTIALLY_REFUNDED, ARCHIVED).
   */
  status?: models.TransactionStatusEnum | null | undefined;
  /**
   * Retrieve transactions linked to a specific filing ID.
   */
  filingId?: string | null | undefined;
  /**
   * Sort results based on specified fields.
   *
   * @remarks
   *         Prefix with - for descending order (e.g., -date for newest first).
   */
  orderBy?: string | null | undefined;
  /**
   * Retrieve transactions with a date
   *
   * @remarks
   *         greater than or equal to (YYYY-MM-DD).
   */
  dateGte?: RFCDate | null | undefined;
  /**
   * Retrieve transactions with a date
   *
   * @remarks
   *         less than or equal to (YYYY-MM-DD).
   */
  dateLte?: RFCDate | null | undefined;
  /**
   * Filter transactions based on processing status.
   *
   * @remarks
   *         Multiple values can be passed as a comma-separated list.
   */
  processingStatusIn?: string | null | undefined;
  /**
   * Filter transactions by marketplace (e.g., AMAZON, EBAY).
   */
  marketplace?: boolean | null | undefined;
  /**
   * Filter transactions by exemption status.
   *
   * @remarks
   *         Multiple values can be passed as a comma-separated list (e.g., EXEMPT,TAXABLE).
   */
  exemptIn?: string | null | undefined;
  /**
   * Page number
   */
  page?: number | undefined;
  /**
   * Page size
   */
  size?: number | undefined;
  /**
   * The unique identifier for the organization making the request
   */
  xOrganizationId: string | null;
};

/** @internal */
export const GetTransactionsV1TransactionsGetSecurity$inboundSchema: z.ZodType<
  GetTransactionsV1TransactionsGetSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  APIKeyHeader: z.string().optional(),
  HTTPBearer: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "APIKeyHeader": "apiKeyHeader",
    "HTTPBearer": "httpBearer",
  });
});

/** @internal */
export type GetTransactionsV1TransactionsGetSecurity$Outbound = {
  APIKeyHeader?: string | undefined;
  HTTPBearer?: string | undefined;
};

/** @internal */
export const GetTransactionsV1TransactionsGetSecurity$outboundSchema: z.ZodType<
  GetTransactionsV1TransactionsGetSecurity$Outbound,
  z.ZodTypeDef,
  GetTransactionsV1TransactionsGetSecurity
> = z.object({
  apiKeyHeader: z.string().optional(),
  httpBearer: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    apiKeyHeader: "APIKeyHeader",
    httpBearer: "HTTPBearer",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTransactionsV1TransactionsGetSecurity$ {
  /** @deprecated use `GetTransactionsV1TransactionsGetSecurity$inboundSchema` instead. */
  export const inboundSchema =
    GetTransactionsV1TransactionsGetSecurity$inboundSchema;
  /** @deprecated use `GetTransactionsV1TransactionsGetSecurity$outboundSchema` instead. */
  export const outboundSchema =
    GetTransactionsV1TransactionsGetSecurity$outboundSchema;
  /** @deprecated use `GetTransactionsV1TransactionsGetSecurity$Outbound` instead. */
  export type Outbound = GetTransactionsV1TransactionsGetSecurity$Outbound;
}

export function getTransactionsV1TransactionsGetSecurityToJSON(
  getTransactionsV1TransactionsGetSecurity:
    GetTransactionsV1TransactionsGetSecurity,
): string {
  return JSON.stringify(
    GetTransactionsV1TransactionsGetSecurity$outboundSchema.parse(
      getTransactionsV1TransactionsGetSecurity,
    ),
  );
}

export function getTransactionsV1TransactionsGetSecurityFromJSON(
  jsonString: string,
): SafeParseResult<
  GetTransactionsV1TransactionsGetSecurity,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetTransactionsV1TransactionsGetSecurity$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetTransactionsV1TransactionsGetSecurity' from JSON`,
  );
}

/** @internal */
export const GetTransactionsV1TransactionsGetCountry$inboundSchema: z.ZodType<
  GetTransactionsV1TransactionsGetCountry,
  z.ZodTypeDef,
  unknown
> = z.union([models.CountryCodeEnum$inboundSchema, z.string()]);

/** @internal */
export type GetTransactionsV1TransactionsGetCountry$Outbound = string | string;

/** @internal */
export const GetTransactionsV1TransactionsGetCountry$outboundSchema: z.ZodType<
  GetTransactionsV1TransactionsGetCountry$Outbound,
  z.ZodTypeDef,
  GetTransactionsV1TransactionsGetCountry
> = z.union([models.CountryCodeEnum$outboundSchema, z.string()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTransactionsV1TransactionsGetCountry$ {
  /** @deprecated use `GetTransactionsV1TransactionsGetCountry$inboundSchema` instead. */
  export const inboundSchema =
    GetTransactionsV1TransactionsGetCountry$inboundSchema;
  /** @deprecated use `GetTransactionsV1TransactionsGetCountry$outboundSchema` instead. */
  export const outboundSchema =
    GetTransactionsV1TransactionsGetCountry$outboundSchema;
  /** @deprecated use `GetTransactionsV1TransactionsGetCountry$Outbound` instead. */
  export type Outbound = GetTransactionsV1TransactionsGetCountry$Outbound;
}

export function getTransactionsV1TransactionsGetCountryToJSON(
  getTransactionsV1TransactionsGetCountry:
    GetTransactionsV1TransactionsGetCountry,
): string {
  return JSON.stringify(
    GetTransactionsV1TransactionsGetCountry$outboundSchema.parse(
      getTransactionsV1TransactionsGetCountry,
    ),
  );
}

export function getTransactionsV1TransactionsGetCountryFromJSON(
  jsonString: string,
): SafeParseResult<
  GetTransactionsV1TransactionsGetCountry,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetTransactionsV1TransactionsGetCountry$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetTransactionsV1TransactionsGetCountry' from JSON`,
  );
}

/** @internal */
export const GetTransactionsV1TransactionsGetRequest$inboundSchema: z.ZodType<
  GetTransactionsV1TransactionsGetRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  state_code: z.nullable(z.string()).optional(),
  transaction_type: z.nullable(z.string()).optional(),
  transaction_source: z.nullable(z.string()).optional(),
  search_query: z.nullable(z.string()).optional(),
  country: z.nullable(
    z.array(z.union([models.CountryCodeEnum$inboundSchema, z.string()])),
  ).optional(),
  state: z.nullable(z.string()).optional(),
  address_status__in: z.nullable(z.string()).optional(),
  status: z.nullable(models.TransactionStatusEnum$inboundSchema).optional(),
  filing_id: z.nullable(z.string()).optional(),
  order_by: z.nullable(z.string()).optional(),
  date__gte: z.nullable(z.string().transform(v => new RFCDate(v))).optional(),
  date__lte: z.nullable(z.string().transform(v => new RFCDate(v))).optional(),
  processing_status__in: z.nullable(z.string()).optional(),
  marketplace: z.nullable(z.boolean()).optional(),
  exempt__in: z.nullable(z.string()).optional(),
  page: z.number().int().default(1),
  size: z.number().int().default(50),
  "x-organization-id": z.nullable(z.string()),
}).transform((v) => {
  return remap$(v, {
    "state_code": "stateCode",
    "transaction_type": "transactionType",
    "transaction_source": "transactionSource",
    "search_query": "searchQuery",
    "address_status__in": "addressStatusIn",
    "filing_id": "filingId",
    "order_by": "orderBy",
    "date__gte": "dateGte",
    "date__lte": "dateLte",
    "processing_status__in": "processingStatusIn",
    "exempt__in": "exemptIn",
    "x-organization-id": "xOrganizationId",
  });
});

/** @internal */
export type GetTransactionsV1TransactionsGetRequest$Outbound = {
  state_code?: string | null | undefined;
  transaction_type?: string | null | undefined;
  transaction_source?: string | null | undefined;
  search_query?: string | null | undefined;
  country?: Array<string | string> | null | undefined;
  state?: string | null | undefined;
  address_status__in?: string | null | undefined;
  status?: string | null | undefined;
  filing_id?: string | null | undefined;
  order_by?: string | null | undefined;
  date__gte?: string | null | undefined;
  date__lte?: string | null | undefined;
  processing_status__in?: string | null | undefined;
  marketplace?: boolean | null | undefined;
  exempt__in?: string | null | undefined;
  page: number;
  size: number;
  "x-organization-id": string | null;
};

/** @internal */
export const GetTransactionsV1TransactionsGetRequest$outboundSchema: z.ZodType<
  GetTransactionsV1TransactionsGetRequest$Outbound,
  z.ZodTypeDef,
  GetTransactionsV1TransactionsGetRequest
> = z.object({
  stateCode: z.nullable(z.string()).optional(),
  transactionType: z.nullable(z.string()).optional(),
  transactionSource: z.nullable(z.string()).optional(),
  searchQuery: z.nullable(z.string()).optional(),
  country: z.nullable(
    z.array(z.union([models.CountryCodeEnum$outboundSchema, z.string()])),
  ).optional(),
  state: z.nullable(z.string()).optional(),
  addressStatusIn: z.nullable(z.string()).optional(),
  status: z.nullable(models.TransactionStatusEnum$outboundSchema).optional(),
  filingId: z.nullable(z.string()).optional(),
  orderBy: z.nullable(z.string()).optional(),
  dateGte: z.nullable(z.instanceof(RFCDate).transform(v => v.toString()))
    .optional(),
  dateLte: z.nullable(z.instanceof(RFCDate).transform(v => v.toString()))
    .optional(),
  processingStatusIn: z.nullable(z.string()).optional(),
  marketplace: z.nullable(z.boolean()).optional(),
  exemptIn: z.nullable(z.string()).optional(),
  page: z.number().int().default(1),
  size: z.number().int().default(50),
  xOrganizationId: z.nullable(z.string()),
}).transform((v) => {
  return remap$(v, {
    stateCode: "state_code",
    transactionType: "transaction_type",
    transactionSource: "transaction_source",
    searchQuery: "search_query",
    addressStatusIn: "address_status__in",
    filingId: "filing_id",
    orderBy: "order_by",
    dateGte: "date__gte",
    dateLte: "date__lte",
    processingStatusIn: "processing_status__in",
    exemptIn: "exempt__in",
    xOrganizationId: "x-organization-id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTransactionsV1TransactionsGetRequest$ {
  /** @deprecated use `GetTransactionsV1TransactionsGetRequest$inboundSchema` instead. */
  export const inboundSchema =
    GetTransactionsV1TransactionsGetRequest$inboundSchema;
  /** @deprecated use `GetTransactionsV1TransactionsGetRequest$outboundSchema` instead. */
  export const outboundSchema =
    GetTransactionsV1TransactionsGetRequest$outboundSchema;
  /** @deprecated use `GetTransactionsV1TransactionsGetRequest$Outbound` instead. */
  export type Outbound = GetTransactionsV1TransactionsGetRequest$Outbound;
}

export function getTransactionsV1TransactionsGetRequestToJSON(
  getTransactionsV1TransactionsGetRequest:
    GetTransactionsV1TransactionsGetRequest,
): string {
  return JSON.stringify(
    GetTransactionsV1TransactionsGetRequest$outboundSchema.parse(
      getTransactionsV1TransactionsGetRequest,
    ),
  );
}

export function getTransactionsV1TransactionsGetRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  GetTransactionsV1TransactionsGetRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetTransactionsV1TransactionsGetRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetTransactionsV1TransactionsGetRequest' from JSON`,
  );
}
