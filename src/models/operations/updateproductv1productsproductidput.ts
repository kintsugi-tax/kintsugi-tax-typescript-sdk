/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type UpdateProductV1ProductsProductIdPutSecurity = {
  apiKeyHeader?: string | undefined;
  httpBearer?: string | undefined;
};

export type Product = models.ProductUpdateV2 | models.ProductUpdate;

export type UpdateProductV1ProductsProductIdPutRequest = {
  /**
   * Unique identifier of the product to be updated.
   */
  productId: string;
  /**
   * The unique identifier for the organization making the request
   */
  xOrganizationId: string | null;
  requestBody: models.ProductUpdateV2 | models.ProductUpdate;
};

/** @internal */
export const UpdateProductV1ProductsProductIdPutSecurity$inboundSchema:
  z.ZodType<
    UpdateProductV1ProductsProductIdPutSecurity,
    z.ZodTypeDef,
    unknown
  > = z.object({
    APIKeyHeader: z.string().optional(),
    HTTPBearer: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      "APIKeyHeader": "apiKeyHeader",
      "HTTPBearer": "httpBearer",
    });
  });

/** @internal */
export type UpdateProductV1ProductsProductIdPutSecurity$Outbound = {
  APIKeyHeader?: string | undefined;
  HTTPBearer?: string | undefined;
};

/** @internal */
export const UpdateProductV1ProductsProductIdPutSecurity$outboundSchema:
  z.ZodType<
    UpdateProductV1ProductsProductIdPutSecurity$Outbound,
    z.ZodTypeDef,
    UpdateProductV1ProductsProductIdPutSecurity
  > = z.object({
    apiKeyHeader: z.string().optional(),
    httpBearer: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      apiKeyHeader: "APIKeyHeader",
      httpBearer: "HTTPBearer",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateProductV1ProductsProductIdPutSecurity$ {
  /** @deprecated use `UpdateProductV1ProductsProductIdPutSecurity$inboundSchema` instead. */
  export const inboundSchema =
    UpdateProductV1ProductsProductIdPutSecurity$inboundSchema;
  /** @deprecated use `UpdateProductV1ProductsProductIdPutSecurity$outboundSchema` instead. */
  export const outboundSchema =
    UpdateProductV1ProductsProductIdPutSecurity$outboundSchema;
  /** @deprecated use `UpdateProductV1ProductsProductIdPutSecurity$Outbound` instead. */
  export type Outbound = UpdateProductV1ProductsProductIdPutSecurity$Outbound;
}

export function updateProductV1ProductsProductIdPutSecurityToJSON(
  updateProductV1ProductsProductIdPutSecurity:
    UpdateProductV1ProductsProductIdPutSecurity,
): string {
  return JSON.stringify(
    UpdateProductV1ProductsProductIdPutSecurity$outboundSchema.parse(
      updateProductV1ProductsProductIdPutSecurity,
    ),
  );
}

export function updateProductV1ProductsProductIdPutSecurityFromJSON(
  jsonString: string,
): SafeParseResult<
  UpdateProductV1ProductsProductIdPutSecurity,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateProductV1ProductsProductIdPutSecurity$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'UpdateProductV1ProductsProductIdPutSecurity' from JSON`,
  );
}

/** @internal */
export const Product$inboundSchema: z.ZodType<Product, z.ZodTypeDef, unknown> =
  z.union([
    models.ProductUpdateV2$inboundSchema,
    models.ProductUpdate$inboundSchema,
  ]);

/** @internal */
export type Product$Outbound =
  | models.ProductUpdateV2$Outbound
  | models.ProductUpdate$Outbound;

/** @internal */
export const Product$outboundSchema: z.ZodType<
  Product$Outbound,
  z.ZodTypeDef,
  Product
> = z.union([
  models.ProductUpdateV2$outboundSchema,
  models.ProductUpdate$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Product$ {
  /** @deprecated use `Product$inboundSchema` instead. */
  export const inboundSchema = Product$inboundSchema;
  /** @deprecated use `Product$outboundSchema` instead. */
  export const outboundSchema = Product$outboundSchema;
  /** @deprecated use `Product$Outbound` instead. */
  export type Outbound = Product$Outbound;
}

export function productToJSON(product: Product): string {
  return JSON.stringify(Product$outboundSchema.parse(product));
}

export function productFromJSON(
  jsonString: string,
): SafeParseResult<Product, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Product$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Product' from JSON`,
  );
}

/** @internal */
export const UpdateProductV1ProductsProductIdPutRequest$inboundSchema:
  z.ZodType<UpdateProductV1ProductsProductIdPutRequest, z.ZodTypeDef, unknown> =
    z.object({
      product_id: z.string(),
      "x-organization-id": z.nullable(z.string()),
      RequestBody: z.union([
        models.ProductUpdateV2$inboundSchema,
        models.ProductUpdate$inboundSchema,
      ]),
    }).transform((v) => {
      return remap$(v, {
        "product_id": "productId",
        "x-organization-id": "xOrganizationId",
        "RequestBody": "requestBody",
      });
    });

/** @internal */
export type UpdateProductV1ProductsProductIdPutRequest$Outbound = {
  product_id: string;
  "x-organization-id": string | null;
  RequestBody: models.ProductUpdateV2$Outbound | models.ProductUpdate$Outbound;
};

/** @internal */
export const UpdateProductV1ProductsProductIdPutRequest$outboundSchema:
  z.ZodType<
    UpdateProductV1ProductsProductIdPutRequest$Outbound,
    z.ZodTypeDef,
    UpdateProductV1ProductsProductIdPutRequest
  > = z.object({
    productId: z.string(),
    xOrganizationId: z.nullable(z.string()),
    requestBody: z.union([
      models.ProductUpdateV2$outboundSchema,
      models.ProductUpdate$outboundSchema,
    ]),
  }).transform((v) => {
    return remap$(v, {
      productId: "product_id",
      xOrganizationId: "x-organization-id",
      requestBody: "RequestBody",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateProductV1ProductsProductIdPutRequest$ {
  /** @deprecated use `UpdateProductV1ProductsProductIdPutRequest$inboundSchema` instead. */
  export const inboundSchema =
    UpdateProductV1ProductsProductIdPutRequest$inboundSchema;
  /** @deprecated use `UpdateProductV1ProductsProductIdPutRequest$outboundSchema` instead. */
  export const outboundSchema =
    UpdateProductV1ProductsProductIdPutRequest$outboundSchema;
  /** @deprecated use `UpdateProductV1ProductsProductIdPutRequest$Outbound` instead. */
  export type Outbound = UpdateProductV1ProductsProductIdPutRequest$Outbound;
}

export function updateProductV1ProductsProductIdPutRequestToJSON(
  updateProductV1ProductsProductIdPutRequest:
    UpdateProductV1ProductsProductIdPutRequest,
): string {
  return JSON.stringify(
    UpdateProductV1ProductsProductIdPutRequest$outboundSchema.parse(
      updateProductV1ProductsProductIdPutRequest,
    ),
  );
}

export function updateProductV1ProductsProductIdPutRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  UpdateProductV1ProductsProductIdPutRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateProductV1ProductsProductIdPutRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'UpdateProductV1ProductsProductIdPutRequest' from JSON`,
  );
}
