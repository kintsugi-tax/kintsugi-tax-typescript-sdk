/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type UpdateProductV1ProductsProductIdPutRequest = {
  /**
   * Unique identifier of the product to be updated.
   */
  productId: string;
  productUpdate: models.ProductUpdate;
};

/** @internal */
export const UpdateProductV1ProductsProductIdPutRequest$inboundSchema:
  z.ZodType<UpdateProductV1ProductsProductIdPutRequest, z.ZodTypeDef, unknown> =
    z.object({
      product_id: z.string(),
      ProductUpdate: models.ProductUpdate$inboundSchema,
    }).transform((v) => {
      return remap$(v, {
        "product_id": "productId",
        "ProductUpdate": "productUpdate",
      });
    });

/** @internal */
export type UpdateProductV1ProductsProductIdPutRequest$Outbound = {
  product_id: string;
  ProductUpdate: models.ProductUpdate$Outbound;
};

/** @internal */
export const UpdateProductV1ProductsProductIdPutRequest$outboundSchema:
  z.ZodType<
    UpdateProductV1ProductsProductIdPutRequest$Outbound,
    z.ZodTypeDef,
    UpdateProductV1ProductsProductIdPutRequest
  > = z.object({
    productId: z.string(),
    productUpdate: models.ProductUpdate$outboundSchema,
  }).transform((v) => {
    return remap$(v, {
      productId: "product_id",
      productUpdate: "ProductUpdate",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateProductV1ProductsProductIdPutRequest$ {
  /** @deprecated use `UpdateProductV1ProductsProductIdPutRequest$inboundSchema` instead. */
  export const inboundSchema =
    UpdateProductV1ProductsProductIdPutRequest$inboundSchema;
  /** @deprecated use `UpdateProductV1ProductsProductIdPutRequest$outboundSchema` instead. */
  export const outboundSchema =
    UpdateProductV1ProductsProductIdPutRequest$outboundSchema;
  /** @deprecated use `UpdateProductV1ProductsProductIdPutRequest$Outbound` instead. */
  export type Outbound = UpdateProductV1ProductsProductIdPutRequest$Outbound;
}

export function updateProductV1ProductsProductIdPutRequestToJSON(
  updateProductV1ProductsProductIdPutRequest:
    UpdateProductV1ProductsProductIdPutRequest,
): string {
  return JSON.stringify(
    UpdateProductV1ProductsProductIdPutRequest$outboundSchema.parse(
      updateProductV1ProductsProductIdPutRequest,
    ),
  );
}

export function updateProductV1ProductsProductIdPutRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  UpdateProductV1ProductsProductIdPutRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateProductV1ProductsProductIdPutRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'UpdateProductV1ProductsProductIdPutRequest' from JSON`,
  );
}
