/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetNexusForOrgV1NexusGetRequest = {
  /**
   * Return all results without pagination
   */
  withoutPagination?: boolean | undefined;
  statusIn?: string | undefined;
  stateCode?: string | undefined;
  countryCodeIn?: string | undefined;
  orderBy?: string | undefined;
  collectedTaxNexusMet?: boolean | undefined;
  page?: number | undefined;
  size?: number | undefined;
};

/** @internal */
export const GetNexusForOrgV1NexusGetRequest$inboundSchema: z.ZodType<
  GetNexusForOrgV1NexusGetRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  without_pagination: z.boolean().default(false),
  status__in: z.string().default(
    "APPROACHING,NOT_EXPOSED,PENDING_REGISTRATION,EXPOSED,APPROACHING,REGISTERED",
  ),
  state_code: z.string().optional(),
  country_code__in: z.string().optional(),
  order_by: z.string().default("state_code,country_code"),
  collected_tax_nexus_met: z.boolean().optional(),
  page: z.number().int().default(1),
  size: z.number().int().default(50),
}).transform((v) => {
  return remap$(v, {
    "without_pagination": "withoutPagination",
    "status__in": "statusIn",
    "state_code": "stateCode",
    "country_code__in": "countryCodeIn",
    "order_by": "orderBy",
    "collected_tax_nexus_met": "collectedTaxNexusMet",
  });
});

/** @internal */
export type GetNexusForOrgV1NexusGetRequest$Outbound = {
  without_pagination: boolean;
  status__in: string;
  state_code?: string | undefined;
  country_code__in?: string | undefined;
  order_by: string;
  collected_tax_nexus_met?: boolean | undefined;
  page: number;
  size: number;
};

/** @internal */
export const GetNexusForOrgV1NexusGetRequest$outboundSchema: z.ZodType<
  GetNexusForOrgV1NexusGetRequest$Outbound,
  z.ZodTypeDef,
  GetNexusForOrgV1NexusGetRequest
> = z.object({
  withoutPagination: z.boolean().default(false),
  statusIn: z.string().default(
    "APPROACHING,NOT_EXPOSED,PENDING_REGISTRATION,EXPOSED,APPROACHING,REGISTERED",
  ),
  stateCode: z.string().optional(),
  countryCodeIn: z.string().optional(),
  orderBy: z.string().default("state_code,country_code"),
  collectedTaxNexusMet: z.boolean().optional(),
  page: z.number().int().default(1),
  size: z.number().int().default(50),
}).transform((v) => {
  return remap$(v, {
    withoutPagination: "without_pagination",
    statusIn: "status__in",
    stateCode: "state_code",
    countryCodeIn: "country_code__in",
    orderBy: "order_by",
    collectedTaxNexusMet: "collected_tax_nexus_met",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetNexusForOrgV1NexusGetRequest$ {
  /** @deprecated use `GetNexusForOrgV1NexusGetRequest$inboundSchema` instead. */
  export const inboundSchema = GetNexusForOrgV1NexusGetRequest$inboundSchema;
  /** @deprecated use `GetNexusForOrgV1NexusGetRequest$outboundSchema` instead. */
  export const outboundSchema = GetNexusForOrgV1NexusGetRequest$outboundSchema;
  /** @deprecated use `GetNexusForOrgV1NexusGetRequest$Outbound` instead. */
  export type Outbound = GetNexusForOrgV1NexusGetRequest$Outbound;
}

export function getNexusForOrgV1NexusGetRequestToJSON(
  getNexusForOrgV1NexusGetRequest: GetNexusForOrgV1NexusGetRequest,
): string {
  return JSON.stringify(
    GetNexusForOrgV1NexusGetRequest$outboundSchema.parse(
      getNexusForOrgV1NexusGetRequest,
    ),
  );
}

export function getNexusForOrgV1NexusGetRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetNexusForOrgV1NexusGetRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetNexusForOrgV1NexusGetRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetNexusForOrgV1NexusGetRequest' from JSON`,
  );
}
