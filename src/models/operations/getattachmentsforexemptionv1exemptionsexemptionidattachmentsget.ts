/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetAttachmentsForExemptionV1ExemptionsExemptionIdAttachmentsGetRequest =
  {
    /**
     * The unique identifier for the exemption
     *
     * @remarks
     *         whose attachments are being retrieved.
     */
    exemptionId: string;
  };

/** @internal */
export const GetAttachmentsForExemptionV1ExemptionsExemptionIdAttachmentsGetRequest$inboundSchema:
  z.ZodType<
    GetAttachmentsForExemptionV1ExemptionsExemptionIdAttachmentsGetRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    exemption_id: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "exemption_id": "exemptionId",
    });
  });

/** @internal */
export type GetAttachmentsForExemptionV1ExemptionsExemptionIdAttachmentsGetRequest$Outbound =
  {
    exemption_id: string;
  };

/** @internal */
export const GetAttachmentsForExemptionV1ExemptionsExemptionIdAttachmentsGetRequest$outboundSchema:
  z.ZodType<
    GetAttachmentsForExemptionV1ExemptionsExemptionIdAttachmentsGetRequest$Outbound,
    z.ZodTypeDef,
    GetAttachmentsForExemptionV1ExemptionsExemptionIdAttachmentsGetRequest
  > = z.object({
    exemptionId: z.string(),
  }).transform((v) => {
    return remap$(v, {
      exemptionId: "exemption_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAttachmentsForExemptionV1ExemptionsExemptionIdAttachmentsGetRequest$ {
  /** @deprecated use `GetAttachmentsForExemptionV1ExemptionsExemptionIdAttachmentsGetRequest$inboundSchema` instead. */
  export const inboundSchema =
    GetAttachmentsForExemptionV1ExemptionsExemptionIdAttachmentsGetRequest$inboundSchema;
  /** @deprecated use `GetAttachmentsForExemptionV1ExemptionsExemptionIdAttachmentsGetRequest$outboundSchema` instead. */
  export const outboundSchema =
    GetAttachmentsForExemptionV1ExemptionsExemptionIdAttachmentsGetRequest$outboundSchema;
  /** @deprecated use `GetAttachmentsForExemptionV1ExemptionsExemptionIdAttachmentsGetRequest$Outbound` instead. */
  export type Outbound =
    GetAttachmentsForExemptionV1ExemptionsExemptionIdAttachmentsGetRequest$Outbound;
}

export function getAttachmentsForExemptionV1ExemptionsExemptionIdAttachmentsGetRequestToJSON(
  getAttachmentsForExemptionV1ExemptionsExemptionIdAttachmentsGetRequest:
    GetAttachmentsForExemptionV1ExemptionsExemptionIdAttachmentsGetRequest,
): string {
  return JSON.stringify(
    GetAttachmentsForExemptionV1ExemptionsExemptionIdAttachmentsGetRequest$outboundSchema
      .parse(
        getAttachmentsForExemptionV1ExemptionsExemptionIdAttachmentsGetRequest,
      ),
  );
}

export function getAttachmentsForExemptionV1ExemptionsExemptionIdAttachmentsGetRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  GetAttachmentsForExemptionV1ExemptionsExemptionIdAttachmentsGetRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetAttachmentsForExemptionV1ExemptionsExemptionIdAttachmentsGetRequest$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetAttachmentsForExemptionV1ExemptionsExemptionIdAttachmentsGetRequest' from JSON`,
  );
}
