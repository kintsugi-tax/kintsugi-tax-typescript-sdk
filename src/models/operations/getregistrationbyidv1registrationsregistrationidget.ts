/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetRegistrationByIdV1RegistrationsRegistrationIdGetRequest = {
  /**
   * The unique identifier of the
   *
   * @remarks
   *                                 registration to retrieve.
   */
  registrationId: string;
};

/** @internal */
export const GetRegistrationByIdV1RegistrationsRegistrationIdGetRequest$inboundSchema:
  z.ZodType<
    GetRegistrationByIdV1RegistrationsRegistrationIdGetRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    registration_id: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "registration_id": "registrationId",
    });
  });

/** @internal */
export type GetRegistrationByIdV1RegistrationsRegistrationIdGetRequest$Outbound =
  {
    registration_id: string;
  };

/** @internal */
export const GetRegistrationByIdV1RegistrationsRegistrationIdGetRequest$outboundSchema:
  z.ZodType<
    GetRegistrationByIdV1RegistrationsRegistrationIdGetRequest$Outbound,
    z.ZodTypeDef,
    GetRegistrationByIdV1RegistrationsRegistrationIdGetRequest
  > = z.object({
    registrationId: z.string(),
  }).transform((v) => {
    return remap$(v, {
      registrationId: "registration_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetRegistrationByIdV1RegistrationsRegistrationIdGetRequest$ {
  /** @deprecated use `GetRegistrationByIdV1RegistrationsRegistrationIdGetRequest$inboundSchema` instead. */
  export const inboundSchema =
    GetRegistrationByIdV1RegistrationsRegistrationIdGetRequest$inboundSchema;
  /** @deprecated use `GetRegistrationByIdV1RegistrationsRegistrationIdGetRequest$outboundSchema` instead. */
  export const outboundSchema =
    GetRegistrationByIdV1RegistrationsRegistrationIdGetRequest$outboundSchema;
  /** @deprecated use `GetRegistrationByIdV1RegistrationsRegistrationIdGetRequest$Outbound` instead. */
  export type Outbound =
    GetRegistrationByIdV1RegistrationsRegistrationIdGetRequest$Outbound;
}

export function getRegistrationByIdV1RegistrationsRegistrationIdGetRequestToJSON(
  getRegistrationByIdV1RegistrationsRegistrationIdGetRequest:
    GetRegistrationByIdV1RegistrationsRegistrationIdGetRequest,
): string {
  return JSON.stringify(
    GetRegistrationByIdV1RegistrationsRegistrationIdGetRequest$outboundSchema
      .parse(getRegistrationByIdV1RegistrationsRegistrationIdGetRequest),
  );
}

export function getRegistrationByIdV1RegistrationsRegistrationIdGetRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  GetRegistrationByIdV1RegistrationsRegistrationIdGetRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetRegistrationByIdV1RegistrationsRegistrationIdGetRequest$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetRegistrationByIdV1RegistrationsRegistrationIdGetRequest' from JSON`,
  );
}
