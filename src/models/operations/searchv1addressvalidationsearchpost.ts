/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type SearchV1AddressValidationSearchPostSecurity = {
  apiKeyHeader?: string | undefined;
  httpBearer?: string | undefined;
};

/** @internal */
export const SearchV1AddressValidationSearchPostSecurity$inboundSchema:
  z.ZodType<
    SearchV1AddressValidationSearchPostSecurity,
    z.ZodTypeDef,
    unknown
  > = z.object({
    APIKeyHeader: z.string().optional(),
    HTTPBearer: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      "APIKeyHeader": "apiKeyHeader",
      "HTTPBearer": "httpBearer",
    });
  });

/** @internal */
export type SearchV1AddressValidationSearchPostSecurity$Outbound = {
  APIKeyHeader?: string | undefined;
  HTTPBearer?: string | undefined;
};

/** @internal */
export const SearchV1AddressValidationSearchPostSecurity$outboundSchema:
  z.ZodType<
    SearchV1AddressValidationSearchPostSecurity$Outbound,
    z.ZodTypeDef,
    SearchV1AddressValidationSearchPostSecurity
  > = z.object({
    apiKeyHeader: z.string().optional(),
    httpBearer: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      apiKeyHeader: "APIKeyHeader",
      httpBearer: "HTTPBearer",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchV1AddressValidationSearchPostSecurity$ {
  /** @deprecated use `SearchV1AddressValidationSearchPostSecurity$inboundSchema` instead. */
  export const inboundSchema =
    SearchV1AddressValidationSearchPostSecurity$inboundSchema;
  /** @deprecated use `SearchV1AddressValidationSearchPostSecurity$outboundSchema` instead. */
  export const outboundSchema =
    SearchV1AddressValidationSearchPostSecurity$outboundSchema;
  /** @deprecated use `SearchV1AddressValidationSearchPostSecurity$Outbound` instead. */
  export type Outbound = SearchV1AddressValidationSearchPostSecurity$Outbound;
}

export function searchV1AddressValidationSearchPostSecurityToJSON(
  searchV1AddressValidationSearchPostSecurity:
    SearchV1AddressValidationSearchPostSecurity,
): string {
  return JSON.stringify(
    SearchV1AddressValidationSearchPostSecurity$outboundSchema.parse(
      searchV1AddressValidationSearchPostSecurity,
    ),
  );
}

export function searchV1AddressValidationSearchPostSecurityFromJSON(
  jsonString: string,
): SafeParseResult<
  SearchV1AddressValidationSearchPostSecurity,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      SearchV1AddressValidationSearchPostSecurity$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'SearchV1AddressValidationSearchPostSecurity' from JSON`,
  );
}
