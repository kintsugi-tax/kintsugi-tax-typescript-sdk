/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type GetRegistrationsV1RegistrationsGetRequest = {
  /**
   * Filter registrations by status. Multiple statuses can be passed,
   *
   * @remarks
   *         separated by commas.
   */
  statusIn?: string | undefined;
  /**
   * Filter registrations by state code.
   */
  stateCode?: string | undefined;
  /**
   * Filter registrations by filing frequency. Multiple filing frequencies
   *
   * @remarks
   *         can be passed, separated by commas.
   */
  filingFrequencyIn?: string | undefined;
  /**
   * Filter registrations by country code in ISO 3166-1 alpha-2 format
   *
   * @remarks
   *         (e.g., US, CA).
   */
  countryCodeIn?: Array<models.CountryCodeEnum> | undefined;
  /**
   * Order results by specified fields (comma-separated)
   */
  orderBy?: string | undefined;
  /**
   * Page number
   */
  page?: number | undefined;
  /**
   * Page size
   */
  size?: number | undefined;
};

/** @internal */
export const GetRegistrationsV1RegistrationsGetRequest$inboundSchema: z.ZodType<
  GetRegistrationsV1RegistrationsGetRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  status__in: z.string().default(
    "REGISTERED,PROCESSING,UNREGISTERED,DEREGISTERING,DEREGISTERED,VALIDATING,AWAITING_CLARIFICATION",
  ),
  state_code: z.string().optional(),
  filing_frequency__in: z.string().optional(),
  country_code__in: z.array(models.CountryCodeEnum$inboundSchema).optional(),
  order_by: z.string().optional(),
  page: z.number().int().default(1),
  size: z.number().int().default(50),
}).transform((v) => {
  return remap$(v, {
    "status__in": "statusIn",
    "state_code": "stateCode",
    "filing_frequency__in": "filingFrequencyIn",
    "country_code__in": "countryCodeIn",
    "order_by": "orderBy",
  });
});

/** @internal */
export type GetRegistrationsV1RegistrationsGetRequest$Outbound = {
  status__in: string;
  state_code?: string | undefined;
  filing_frequency__in?: string | undefined;
  country_code__in?: Array<string> | undefined;
  order_by?: string | undefined;
  page: number;
  size: number;
};

/** @internal */
export const GetRegistrationsV1RegistrationsGetRequest$outboundSchema:
  z.ZodType<
    GetRegistrationsV1RegistrationsGetRequest$Outbound,
    z.ZodTypeDef,
    GetRegistrationsV1RegistrationsGetRequest
  > = z.object({
    statusIn: z.string().default(
      "REGISTERED,PROCESSING,UNREGISTERED,DEREGISTERING,DEREGISTERED,VALIDATING,AWAITING_CLARIFICATION",
    ),
    stateCode: z.string().optional(),
    filingFrequencyIn: z.string().optional(),
    countryCodeIn: z.array(models.CountryCodeEnum$outboundSchema).optional(),
    orderBy: z.string().optional(),
    page: z.number().int().default(1),
    size: z.number().int().default(50),
  }).transform((v) => {
    return remap$(v, {
      statusIn: "status__in",
      stateCode: "state_code",
      filingFrequencyIn: "filing_frequency__in",
      countryCodeIn: "country_code__in",
      orderBy: "order_by",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetRegistrationsV1RegistrationsGetRequest$ {
  /** @deprecated use `GetRegistrationsV1RegistrationsGetRequest$inboundSchema` instead. */
  export const inboundSchema =
    GetRegistrationsV1RegistrationsGetRequest$inboundSchema;
  /** @deprecated use `GetRegistrationsV1RegistrationsGetRequest$outboundSchema` instead. */
  export const outboundSchema =
    GetRegistrationsV1RegistrationsGetRequest$outboundSchema;
  /** @deprecated use `GetRegistrationsV1RegistrationsGetRequest$Outbound` instead. */
  export type Outbound = GetRegistrationsV1RegistrationsGetRequest$Outbound;
}

export function getRegistrationsV1RegistrationsGetRequestToJSON(
  getRegistrationsV1RegistrationsGetRequest:
    GetRegistrationsV1RegistrationsGetRequest,
): string {
  return JSON.stringify(
    GetRegistrationsV1RegistrationsGetRequest$outboundSchema.parse(
      getRegistrationsV1RegistrationsGetRequest,
    ),
  );
}

export function getRegistrationsV1RegistrationsGetRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  GetRegistrationsV1RegistrationsGetRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetRegistrationsV1RegistrationsGetRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetRegistrationsV1RegistrationsGetRequest' from JSON`,
  );
}
