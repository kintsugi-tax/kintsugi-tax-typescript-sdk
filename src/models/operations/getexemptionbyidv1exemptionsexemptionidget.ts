/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetExemptionByIdV1ExemptionsExemptionIdGetRequest = {
  /**
   * The unique identifier for the exemption being retrieved.
   */
  exemptionId: string;
};

/** @internal */
export const GetExemptionByIdV1ExemptionsExemptionIdGetRequest$inboundSchema:
  z.ZodType<
    GetExemptionByIdV1ExemptionsExemptionIdGetRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    exemption_id: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "exemption_id": "exemptionId",
    });
  });

/** @internal */
export type GetExemptionByIdV1ExemptionsExemptionIdGetRequest$Outbound = {
  exemption_id: string;
};

/** @internal */
export const GetExemptionByIdV1ExemptionsExemptionIdGetRequest$outboundSchema:
  z.ZodType<
    GetExemptionByIdV1ExemptionsExemptionIdGetRequest$Outbound,
    z.ZodTypeDef,
    GetExemptionByIdV1ExemptionsExemptionIdGetRequest
  > = z.object({
    exemptionId: z.string(),
  }).transform((v) => {
    return remap$(v, {
      exemptionId: "exemption_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetExemptionByIdV1ExemptionsExemptionIdGetRequest$ {
  /** @deprecated use `GetExemptionByIdV1ExemptionsExemptionIdGetRequest$inboundSchema` instead. */
  export const inboundSchema =
    GetExemptionByIdV1ExemptionsExemptionIdGetRequest$inboundSchema;
  /** @deprecated use `GetExemptionByIdV1ExemptionsExemptionIdGetRequest$outboundSchema` instead. */
  export const outboundSchema =
    GetExemptionByIdV1ExemptionsExemptionIdGetRequest$outboundSchema;
  /** @deprecated use `GetExemptionByIdV1ExemptionsExemptionIdGetRequest$Outbound` instead. */
  export type Outbound =
    GetExemptionByIdV1ExemptionsExemptionIdGetRequest$Outbound;
}

export function getExemptionByIdV1ExemptionsExemptionIdGetRequestToJSON(
  getExemptionByIdV1ExemptionsExemptionIdGetRequest:
    GetExemptionByIdV1ExemptionsExemptionIdGetRequest,
): string {
  return JSON.stringify(
    GetExemptionByIdV1ExemptionsExemptionIdGetRequest$outboundSchema.parse(
      getExemptionByIdV1ExemptionsExemptionIdGetRequest,
    ),
  );
}

export function getExemptionByIdV1ExemptionsExemptionIdGetRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  GetExemptionByIdV1ExemptionsExemptionIdGetRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetExemptionByIdV1ExemptionsExemptionIdGetRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetExemptionByIdV1ExemptionsExemptionIdGetRequest' from JSON`,
  );
}
