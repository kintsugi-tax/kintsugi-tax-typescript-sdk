/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type UpdateRegistrationV1RegistrationsRegistrationIdPutRequest = {
  /**
   * The unique identifier of the registration to be updated.
   */
  registrationId: string;
  registrationUpdateAPI: models.RegistrationUpdateAPI;
};

/** @internal */
export const UpdateRegistrationV1RegistrationsRegistrationIdPutRequest$inboundSchema:
  z.ZodType<
    UpdateRegistrationV1RegistrationsRegistrationIdPutRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    registration_id: z.string(),
    RegistrationUpdateAPI: models.RegistrationUpdateAPI$inboundSchema,
  }).transform((v) => {
    return remap$(v, {
      "registration_id": "registrationId",
      "RegistrationUpdateAPI": "registrationUpdateAPI",
    });
  });

/** @internal */
export type UpdateRegistrationV1RegistrationsRegistrationIdPutRequest$Outbound =
  {
    registration_id: string;
    RegistrationUpdateAPI: models.RegistrationUpdateAPI$Outbound;
  };

/** @internal */
export const UpdateRegistrationV1RegistrationsRegistrationIdPutRequest$outboundSchema:
  z.ZodType<
    UpdateRegistrationV1RegistrationsRegistrationIdPutRequest$Outbound,
    z.ZodTypeDef,
    UpdateRegistrationV1RegistrationsRegistrationIdPutRequest
  > = z.object({
    registrationId: z.string(),
    registrationUpdateAPI: models.RegistrationUpdateAPI$outboundSchema,
  }).transform((v) => {
    return remap$(v, {
      registrationId: "registration_id",
      registrationUpdateAPI: "RegistrationUpdateAPI",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateRegistrationV1RegistrationsRegistrationIdPutRequest$ {
  /** @deprecated use `UpdateRegistrationV1RegistrationsRegistrationIdPutRequest$inboundSchema` instead. */
  export const inboundSchema =
    UpdateRegistrationV1RegistrationsRegistrationIdPutRequest$inboundSchema;
  /** @deprecated use `UpdateRegistrationV1RegistrationsRegistrationIdPutRequest$outboundSchema` instead. */
  export const outboundSchema =
    UpdateRegistrationV1RegistrationsRegistrationIdPutRequest$outboundSchema;
  /** @deprecated use `UpdateRegistrationV1RegistrationsRegistrationIdPutRequest$Outbound` instead. */
  export type Outbound =
    UpdateRegistrationV1RegistrationsRegistrationIdPutRequest$Outbound;
}

export function updateRegistrationV1RegistrationsRegistrationIdPutRequestToJSON(
  updateRegistrationV1RegistrationsRegistrationIdPutRequest:
    UpdateRegistrationV1RegistrationsRegistrationIdPutRequest,
): string {
  return JSON.stringify(
    UpdateRegistrationV1RegistrationsRegistrationIdPutRequest$outboundSchema
      .parse(updateRegistrationV1RegistrationsRegistrationIdPutRequest),
  );
}

export function updateRegistrationV1RegistrationsRegistrationIdPutRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  UpdateRegistrationV1RegistrationsRegistrationIdPutRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateRegistrationV1RegistrationsRegistrationIdPutRequest$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'UpdateRegistrationV1RegistrationsRegistrationIdPutRequest' from JSON`,
  );
}
