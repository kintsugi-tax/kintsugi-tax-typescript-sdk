/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type CreateCustomerV1CustomersPostSecurity = {
  apiKeyHeader?: string | undefined;
  httpBearer?: string | undefined;
};

export type CreateCustomerV1CustomersPostRequest = {
  /**
   * The unique identifier for the organization making the request
   */
  xOrganizationId: string | null;
  customerCreate: models.CustomerCreate;
};

/** @internal */
export const CreateCustomerV1CustomersPostSecurity$inboundSchema: z.ZodType<
  CreateCustomerV1CustomersPostSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  APIKeyHeader: z.string().optional(),
  HTTPBearer: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "APIKeyHeader": "apiKeyHeader",
    "HTTPBearer": "httpBearer",
  });
});

/** @internal */
export type CreateCustomerV1CustomersPostSecurity$Outbound = {
  APIKeyHeader?: string | undefined;
  HTTPBearer?: string | undefined;
};

/** @internal */
export const CreateCustomerV1CustomersPostSecurity$outboundSchema: z.ZodType<
  CreateCustomerV1CustomersPostSecurity$Outbound,
  z.ZodTypeDef,
  CreateCustomerV1CustomersPostSecurity
> = z.object({
  apiKeyHeader: z.string().optional(),
  httpBearer: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    apiKeyHeader: "APIKeyHeader",
    httpBearer: "HTTPBearer",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateCustomerV1CustomersPostSecurity$ {
  /** @deprecated use `CreateCustomerV1CustomersPostSecurity$inboundSchema` instead. */
  export const inboundSchema =
    CreateCustomerV1CustomersPostSecurity$inboundSchema;
  /** @deprecated use `CreateCustomerV1CustomersPostSecurity$outboundSchema` instead. */
  export const outboundSchema =
    CreateCustomerV1CustomersPostSecurity$outboundSchema;
  /** @deprecated use `CreateCustomerV1CustomersPostSecurity$Outbound` instead. */
  export type Outbound = CreateCustomerV1CustomersPostSecurity$Outbound;
}

export function createCustomerV1CustomersPostSecurityToJSON(
  createCustomerV1CustomersPostSecurity: CreateCustomerV1CustomersPostSecurity,
): string {
  return JSON.stringify(
    CreateCustomerV1CustomersPostSecurity$outboundSchema.parse(
      createCustomerV1CustomersPostSecurity,
    ),
  );
}

export function createCustomerV1CustomersPostSecurityFromJSON(
  jsonString: string,
): SafeParseResult<CreateCustomerV1CustomersPostSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CreateCustomerV1CustomersPostSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateCustomerV1CustomersPostSecurity' from JSON`,
  );
}

/** @internal */
export const CreateCustomerV1CustomersPostRequest$inboundSchema: z.ZodType<
  CreateCustomerV1CustomersPostRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  "x-organization-id": z.nullable(z.string()),
  CustomerCreate: models.CustomerCreate$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "x-organization-id": "xOrganizationId",
    "CustomerCreate": "customerCreate",
  });
});

/** @internal */
export type CreateCustomerV1CustomersPostRequest$Outbound = {
  "x-organization-id": string | null;
  CustomerCreate: models.CustomerCreate$Outbound;
};

/** @internal */
export const CreateCustomerV1CustomersPostRequest$outboundSchema: z.ZodType<
  CreateCustomerV1CustomersPostRequest$Outbound,
  z.ZodTypeDef,
  CreateCustomerV1CustomersPostRequest
> = z.object({
  xOrganizationId: z.nullable(z.string()),
  customerCreate: models.CustomerCreate$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    xOrganizationId: "x-organization-id",
    customerCreate: "CustomerCreate",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateCustomerV1CustomersPostRequest$ {
  /** @deprecated use `CreateCustomerV1CustomersPostRequest$inboundSchema` instead. */
  export const inboundSchema =
    CreateCustomerV1CustomersPostRequest$inboundSchema;
  /** @deprecated use `CreateCustomerV1CustomersPostRequest$outboundSchema` instead. */
  export const outboundSchema =
    CreateCustomerV1CustomersPostRequest$outboundSchema;
  /** @deprecated use `CreateCustomerV1CustomersPostRequest$Outbound` instead. */
  export type Outbound = CreateCustomerV1CustomersPostRequest$Outbound;
}

export function createCustomerV1CustomersPostRequestToJSON(
  createCustomerV1CustomersPostRequest: CreateCustomerV1CustomersPostRequest,
): string {
  return JSON.stringify(
    CreateCustomerV1CustomersPostRequest$outboundSchema.parse(
      createCustomerV1CustomersPostRequest,
    ),
  );
}

export function createCustomerV1CustomersPostRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateCustomerV1CustomersPostRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CreateCustomerV1CustomersPostRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateCustomerV1CustomersPostRequest' from JSON`,
  );
}
