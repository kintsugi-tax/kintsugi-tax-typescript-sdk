/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetCustomerByIdV1CustomersCustomerIdGetRequest = {
  /**
   * Unique identifier of the customer
   */
  customerId: string;
};

/** @internal */
export const GetCustomerByIdV1CustomersCustomerIdGetRequest$inboundSchema:
  z.ZodType<
    GetCustomerByIdV1CustomersCustomerIdGetRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    customer_id: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "customer_id": "customerId",
    });
  });

/** @internal */
export type GetCustomerByIdV1CustomersCustomerIdGetRequest$Outbound = {
  customer_id: string;
};

/** @internal */
export const GetCustomerByIdV1CustomersCustomerIdGetRequest$outboundSchema:
  z.ZodType<
    GetCustomerByIdV1CustomersCustomerIdGetRequest$Outbound,
    z.ZodTypeDef,
    GetCustomerByIdV1CustomersCustomerIdGetRequest
  > = z.object({
    customerId: z.string(),
  }).transform((v) => {
    return remap$(v, {
      customerId: "customer_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetCustomerByIdV1CustomersCustomerIdGetRequest$ {
  /** @deprecated use `GetCustomerByIdV1CustomersCustomerIdGetRequest$inboundSchema` instead. */
  export const inboundSchema =
    GetCustomerByIdV1CustomersCustomerIdGetRequest$inboundSchema;
  /** @deprecated use `GetCustomerByIdV1CustomersCustomerIdGetRequest$outboundSchema` instead. */
  export const outboundSchema =
    GetCustomerByIdV1CustomersCustomerIdGetRequest$outboundSchema;
  /** @deprecated use `GetCustomerByIdV1CustomersCustomerIdGetRequest$Outbound` instead. */
  export type Outbound =
    GetCustomerByIdV1CustomersCustomerIdGetRequest$Outbound;
}

export function getCustomerByIdV1CustomersCustomerIdGetRequestToJSON(
  getCustomerByIdV1CustomersCustomerIdGetRequest:
    GetCustomerByIdV1CustomersCustomerIdGetRequest,
): string {
  return JSON.stringify(
    GetCustomerByIdV1CustomersCustomerIdGetRequest$outboundSchema.parse(
      getCustomerByIdV1CustomersCustomerIdGetRequest,
    ),
  );
}

export function getCustomerByIdV1CustomersCustomerIdGetRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  GetCustomerByIdV1CustomersCustomerIdGetRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetCustomerByIdV1CustomersCustomerIdGetRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetCustomerByIdV1CustomersCustomerIdGetRequest' from JSON`,
  );
}
