/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  PhysicalNexusRead,
  PhysicalNexusRead$inboundSchema,
  PhysicalNexusRead$Outbound,
  PhysicalNexusRead$outboundSchema,
} from "./physicalnexusread.js";

export type PagePhysicalNexusRead = {
  items: Array<PhysicalNexusRead>;
  total: number;
  page: number;
  size: number;
  pages?: number | undefined;
};

/** @internal */
export const PagePhysicalNexusRead$inboundSchema: z.ZodType<
  PagePhysicalNexusRead,
  z.ZodTypeDef,
  unknown
> = z.object({
  items: z.array(PhysicalNexusRead$inboundSchema),
  total: z.number().int(),
  page: z.number().int(),
  size: z.number().int(),
  pages: z.number().int().optional(),
});

/** @internal */
export type PagePhysicalNexusRead$Outbound = {
  items: Array<PhysicalNexusRead$Outbound>;
  total: number;
  page: number;
  size: number;
  pages?: number | undefined;
};

/** @internal */
export const PagePhysicalNexusRead$outboundSchema: z.ZodType<
  PagePhysicalNexusRead$Outbound,
  z.ZodTypeDef,
  PagePhysicalNexusRead
> = z.object({
  items: z.array(PhysicalNexusRead$outboundSchema),
  total: z.number().int(),
  page: z.number().int(),
  size: z.number().int(),
  pages: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PagePhysicalNexusRead$ {
  /** @deprecated use `PagePhysicalNexusRead$inboundSchema` instead. */
  export const inboundSchema = PagePhysicalNexusRead$inboundSchema;
  /** @deprecated use `PagePhysicalNexusRead$outboundSchema` instead. */
  export const outboundSchema = PagePhysicalNexusRead$outboundSchema;
  /** @deprecated use `PagePhysicalNexusRead$Outbound` instead. */
  export type Outbound = PagePhysicalNexusRead$Outbound;
}

export function pagePhysicalNexusReadToJSON(
  pagePhysicalNexusRead: PagePhysicalNexusRead,
): string {
  return JSON.stringify(
    PagePhysicalNexusRead$outboundSchema.parse(pagePhysicalNexusRead),
  );
}

export function pagePhysicalNexusReadFromJSON(
  jsonString: string,
): SafeParseResult<PagePhysicalNexusRead, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PagePhysicalNexusRead$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PagePhysicalNexusRead' from JSON`,
  );
}
