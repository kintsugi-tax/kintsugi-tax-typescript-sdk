/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { RFCDate } from "../types/rfcdate.js";
import {
  AddressInput,
  AddressInput$inboundSchema,
  AddressInput$Outbound,
  AddressInput$outboundSchema,
} from "./addressinput.js";
import {
  AddressStatus,
  AddressStatus$inboundSchema,
  AddressStatus$outboundSchema,
} from "./addressstatus.js";
import {
  CountryCodeEnum,
  CountryCodeEnum$inboundSchema,
  CountryCodeEnum$outboundSchema,
} from "./countrycodeenum.js";
import {
  CurrencyEnum,
  CurrencyEnum$inboundSchema,
  CurrencyEnum$outboundSchema,
} from "./currencyenum.js";
import {
  CustomerUpdate,
  CustomerUpdate$inboundSchema,
  CustomerUpdate$Outbound,
  CustomerUpdate$outboundSchema,
} from "./customerupdate.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  Exemption,
  Exemption$inboundSchema,
  Exemption$Outbound,
  Exemption$outboundSchema,
} from "./exemption.js";
import {
  ExemptionRequired,
  ExemptionRequired$inboundSchema,
  ExemptionRequired$Outbound,
  ExemptionRequired$outboundSchema,
} from "./exemptionrequired.js";
import {
  ProcessingStatusEnum,
  ProcessingStatusEnum$inboundSchema,
  ProcessingStatusEnum$outboundSchema,
} from "./processingstatusenum.js";
import {
  SourceEnum,
  SourceEnum$inboundSchema,
  SourceEnum$outboundSchema,
} from "./sourceenum.js";
import {
  TaxLiabilitySourceEnum,
  TaxLiabilitySourceEnum$inboundSchema,
  TaxLiabilitySourceEnum$outboundSchema,
} from "./taxliabilitysourceenum.js";
import {
  TransactionAddressBuilder,
  TransactionAddressBuilder$inboundSchema,
  TransactionAddressBuilder$Outbound,
  TransactionAddressBuilder$outboundSchema,
} from "./transactionaddressbuilder.js";
import {
  TransactionExemptStatusEnum,
  TransactionExemptStatusEnum$inboundSchema,
  TransactionExemptStatusEnum$outboundSchema,
} from "./transactionexemptstatusenum.js";
import {
  TransactionItemCreateUpdate,
  TransactionItemCreateUpdate$inboundSchema,
  TransactionItemCreateUpdate$Outbound,
  TransactionItemCreateUpdate$outboundSchema,
} from "./transactionitemcreateupdate.js";
import {
  TransactionRefundStatus,
  TransactionRefundStatus$inboundSchema,
  TransactionRefundStatus$outboundSchema,
} from "./transactionrefundstatus.js";
import {
  TransactionStatusEnum,
  TransactionStatusEnum$inboundSchema,
  TransactionStatusEnum$outboundSchema,
} from "./transactionstatusenum.js";

/**
 * Total amount of the transaction.
 */
export type TransactionUpdateTotalAmount = number | string;

/**
 * Imported tax amount.
 */
export type TransactionUpdateTotalTaxAmountImported = number | string;

/**
 * Imported tax rate.
 */
export type TransactionUpdateTaxRateImported = number | string;

/**
 * Calculated tax amount.
 */
export type TransactionUpdateTotalTaxAmountCalculated = number | string;

/**
 * Calculated tax rate.
 */
export type TransactionUpdateTaxRateCalculated = number | string;

/**
 * Total tax liability amount.
 */
export type TransactionUpdateTotalTaxLiabilityAmount = number | string;

/**
 * Taxable amount.
 */
export type TransactionUpdateTaxableAmount = number | string;

/**
 * Converted total amount.
 */
export type TransactionUpdateConvertedTotalAmount = number | string;

/**
 * Converted imported tax amount.
 */
export type TransactionUpdateConvertedTotalTaxAmountImported = number | string;

/**
 * Converted calculated tax amount.
 */
export type TransactionUpdateConvertedTotalTaxAmountCalculated =
  | number
  | string;

/**
 * Currency conversion rate.
 */
export type TransactionUpdateConversionRate = number | string;

/**
 * Converted taxable amount.
 */
export type TransactionUpdateConvertedTaxableAmount = number | string;

/**
 * Converted total discount amount.
 */
export type TransactionUpdateConvertedTotalDiscount = number | string;

/**
 * Converted subtotal amount.
 */
export type TransactionUpdateConvertedSubtotal = number | string;

/**
 * Converted total tax liability amount.
 */
export type TransactionUpdateConvertedTotalTaxLiabilityAmount = number | string;

export type TransactionUpdateAddresses =
  | Array<TransactionAddressBuilder>
  | Array<AddressInput>;

export type TransactionUpdate = {
  /**
   * Indicates if transaction requires tax exemption.
   */
  requiresExemption?: ExemptionRequired | null | undefined;
  /**
   * Unique identifier of the organization.
   */
  organizationId: string;
  /**
   * External identifier of the transaction.
   */
  externalId: string;
  /**
   * Transaction date and time
   */
  date: Date;
  /**
   * Transaction date in the shop's local timezone
   */
  shopDate?: RFCDate | null | undefined;
  /**
   * Timezone of the shop
   */
  shopDateTz?: string | null | undefined;
  status?: TransactionStatusEnum | undefined;
  /**
   * Description of the transaction.
   */
  description?: string | null | undefined;
  /**
   * Status of refund, if applicable
   */
  refundStatus?: TransactionRefundStatus | null | undefined;
  /**
   * Total amount of the transaction.
   */
  totalAmount?: number | string | undefined;
  /**
   * Unique identifier of the customer.
   */
  customerId?: string | null | undefined;
  /**
   * Indicates if transaction is marketplace-based.
   */
  marketplace?: boolean | null | undefined;
  /**
   * Exemption status (e.g., NOT_EXEMPT)
   */
  exempt?: TransactionExemptStatusEnum | null | undefined;
  /**
   * List of exemptions applied (if any).
   */
  exemptions?: Array<Exemption> | null | undefined;
  /**
   * Related transaction identifier.
   */
  relatedTo?: string | null | undefined;
  /**
   * Secondary External Identifier.
   */
  secondaryExternalId?: string | null | undefined;
  /**
   * Secondary source information
   */
  secondarySource?: string | null | undefined;
  /**
   * Friendly identifier of the original item.
   */
  externalFriendlyId?: string | null | undefined;
  /**
   * Imported tax amount.
   */
  totalTaxAmountImported?: number | string | undefined;
  /**
   * Imported tax rate.
   */
  taxRateImported?: number | string | undefined;
  /**
   * Calculated tax amount.
   */
  totalTaxAmountCalculated?: number | string | undefined;
  /**
   * Calculated tax rate.
   */
  taxRateCalculated?: number | string | undefined;
  /**
   * Total tax liability amount.
   */
  totalTaxLiabilityAmount?: number | string | undefined;
  /**
   * Source of tax liability.
   */
  taxLiabilitySource?: TaxLiabilitySourceEnum | null | undefined;
  /**
   * Taxable amount.
   */
  taxableAmount?: number | string | undefined;
  currency?: CurrencyEnum | undefined;
  /**
   * Transaction lock status.
   */
  locked?: boolean | undefined;
  source?: SourceEnum | undefined;
  /**
   * Connection Identifier
   */
  connectionId?: string | null | undefined;
  /**
   * Filing identifier.
   */
  filingId?: string | null | undefined;
  /**
   * City of the transaction address.
   */
  city?: string | null | undefined;
  /**
   * County of the transaction address.
   */
  county?: string | null | undefined;
  /**
   * State of the transaction address.
   */
  state?: string | null | undefined;
  /**
   * Country code (ISO Alpha-2).
   */
  country?: CountryCodeEnum | null | undefined;
  /**
   * Postal code of the transaction.
   */
  postalCode?: string | null | undefined;
  /**
   * Tax ID associated with the transaction
   */
  taxId?: string | null | undefined;
  addressStatus?: AddressStatus | undefined;
  /**
   * Our transaction state, used to determine when/if a transaction needs additional
   *
   * @remarks
   * processing.
   */
  processingStatus?: ProcessingStatusEnum | undefined;
  /**
   * Destination currency code (ISO 4217, e.g., USD)
   */
  destinationCurrency?: CurrencyEnum | null | undefined;
  /**
   * Converted total amount.
   */
  convertedTotalAmount?: number | string | null | undefined;
  /**
   * Converted imported tax amount.
   */
  convertedTotalTaxAmountImported?: number | string | null | undefined;
  /**
   * Converted calculated tax amount.
   */
  convertedTotalTaxAmountCalculated?: number | string | null | undefined;
  /**
   * Currency conversion rate.
   */
  conversionRate?: number | string | null | undefined;
  /**
   * Converted taxable amount.
   */
  convertedTaxableAmount?: number | string | null | undefined;
  /**
   * Converted total discount amount.
   */
  convertedTotalDiscount?: number | string | null | undefined;
  /**
   * Converted subtotal amount.
   */
  convertedSubtotal?: number | string | null | undefined;
  /**
   * Converted total tax liability amount.
   */
  convertedTotalTaxLiabilityAmount?: number | string | null | undefined;
  addresses: Array<TransactionAddressBuilder> | Array<AddressInput>;
  transactionItems: Array<TransactionItemCreateUpdate>;
  customer: CustomerUpdate;
};

/** @internal */
export const TransactionUpdateTotalAmount$inboundSchema: z.ZodType<
  TransactionUpdateTotalAmount,
  z.ZodTypeDef,
  unknown
> = z.union([z.number(), z.string()]);

/** @internal */
export type TransactionUpdateTotalAmount$Outbound = number | string;

/** @internal */
export const TransactionUpdateTotalAmount$outboundSchema: z.ZodType<
  TransactionUpdateTotalAmount$Outbound,
  z.ZodTypeDef,
  TransactionUpdateTotalAmount
> = z.union([z.number(), z.string()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionUpdateTotalAmount$ {
  /** @deprecated use `TransactionUpdateTotalAmount$inboundSchema` instead. */
  export const inboundSchema = TransactionUpdateTotalAmount$inboundSchema;
  /** @deprecated use `TransactionUpdateTotalAmount$outboundSchema` instead. */
  export const outboundSchema = TransactionUpdateTotalAmount$outboundSchema;
  /** @deprecated use `TransactionUpdateTotalAmount$Outbound` instead. */
  export type Outbound = TransactionUpdateTotalAmount$Outbound;
}

export function transactionUpdateTotalAmountToJSON(
  transactionUpdateTotalAmount: TransactionUpdateTotalAmount,
): string {
  return JSON.stringify(
    TransactionUpdateTotalAmount$outboundSchema.parse(
      transactionUpdateTotalAmount,
    ),
  );
}

export function transactionUpdateTotalAmountFromJSON(
  jsonString: string,
): SafeParseResult<TransactionUpdateTotalAmount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TransactionUpdateTotalAmount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TransactionUpdateTotalAmount' from JSON`,
  );
}

/** @internal */
export const TransactionUpdateTotalTaxAmountImported$inboundSchema: z.ZodType<
  TransactionUpdateTotalTaxAmountImported,
  z.ZodTypeDef,
  unknown
> = z.union([z.number(), z.string()]);

/** @internal */
export type TransactionUpdateTotalTaxAmountImported$Outbound = number | string;

/** @internal */
export const TransactionUpdateTotalTaxAmountImported$outboundSchema: z.ZodType<
  TransactionUpdateTotalTaxAmountImported$Outbound,
  z.ZodTypeDef,
  TransactionUpdateTotalTaxAmountImported
> = z.union([z.number(), z.string()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionUpdateTotalTaxAmountImported$ {
  /** @deprecated use `TransactionUpdateTotalTaxAmountImported$inboundSchema` instead. */
  export const inboundSchema =
    TransactionUpdateTotalTaxAmountImported$inboundSchema;
  /** @deprecated use `TransactionUpdateTotalTaxAmountImported$outboundSchema` instead. */
  export const outboundSchema =
    TransactionUpdateTotalTaxAmountImported$outboundSchema;
  /** @deprecated use `TransactionUpdateTotalTaxAmountImported$Outbound` instead. */
  export type Outbound = TransactionUpdateTotalTaxAmountImported$Outbound;
}

export function transactionUpdateTotalTaxAmountImportedToJSON(
  transactionUpdateTotalTaxAmountImported:
    TransactionUpdateTotalTaxAmountImported,
): string {
  return JSON.stringify(
    TransactionUpdateTotalTaxAmountImported$outboundSchema.parse(
      transactionUpdateTotalTaxAmountImported,
    ),
  );
}

export function transactionUpdateTotalTaxAmountImportedFromJSON(
  jsonString: string,
): SafeParseResult<
  TransactionUpdateTotalTaxAmountImported,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      TransactionUpdateTotalTaxAmountImported$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'TransactionUpdateTotalTaxAmountImported' from JSON`,
  );
}

/** @internal */
export const TransactionUpdateTaxRateImported$inboundSchema: z.ZodType<
  TransactionUpdateTaxRateImported,
  z.ZodTypeDef,
  unknown
> = z.union([z.number(), z.string()]);

/** @internal */
export type TransactionUpdateTaxRateImported$Outbound = number | string;

/** @internal */
export const TransactionUpdateTaxRateImported$outboundSchema: z.ZodType<
  TransactionUpdateTaxRateImported$Outbound,
  z.ZodTypeDef,
  TransactionUpdateTaxRateImported
> = z.union([z.number(), z.string()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionUpdateTaxRateImported$ {
  /** @deprecated use `TransactionUpdateTaxRateImported$inboundSchema` instead. */
  export const inboundSchema = TransactionUpdateTaxRateImported$inboundSchema;
  /** @deprecated use `TransactionUpdateTaxRateImported$outboundSchema` instead. */
  export const outboundSchema = TransactionUpdateTaxRateImported$outboundSchema;
  /** @deprecated use `TransactionUpdateTaxRateImported$Outbound` instead. */
  export type Outbound = TransactionUpdateTaxRateImported$Outbound;
}

export function transactionUpdateTaxRateImportedToJSON(
  transactionUpdateTaxRateImported: TransactionUpdateTaxRateImported,
): string {
  return JSON.stringify(
    TransactionUpdateTaxRateImported$outboundSchema.parse(
      transactionUpdateTaxRateImported,
    ),
  );
}

export function transactionUpdateTaxRateImportedFromJSON(
  jsonString: string,
): SafeParseResult<TransactionUpdateTaxRateImported, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TransactionUpdateTaxRateImported$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TransactionUpdateTaxRateImported' from JSON`,
  );
}

/** @internal */
export const TransactionUpdateTotalTaxAmountCalculated$inboundSchema: z.ZodType<
  TransactionUpdateTotalTaxAmountCalculated,
  z.ZodTypeDef,
  unknown
> = z.union([z.number(), z.string()]);

/** @internal */
export type TransactionUpdateTotalTaxAmountCalculated$Outbound =
  | number
  | string;

/** @internal */
export const TransactionUpdateTotalTaxAmountCalculated$outboundSchema:
  z.ZodType<
    TransactionUpdateTotalTaxAmountCalculated$Outbound,
    z.ZodTypeDef,
    TransactionUpdateTotalTaxAmountCalculated
  > = z.union([z.number(), z.string()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionUpdateTotalTaxAmountCalculated$ {
  /** @deprecated use `TransactionUpdateTotalTaxAmountCalculated$inboundSchema` instead. */
  export const inboundSchema =
    TransactionUpdateTotalTaxAmountCalculated$inboundSchema;
  /** @deprecated use `TransactionUpdateTotalTaxAmountCalculated$outboundSchema` instead. */
  export const outboundSchema =
    TransactionUpdateTotalTaxAmountCalculated$outboundSchema;
  /** @deprecated use `TransactionUpdateTotalTaxAmountCalculated$Outbound` instead. */
  export type Outbound = TransactionUpdateTotalTaxAmountCalculated$Outbound;
}

export function transactionUpdateTotalTaxAmountCalculatedToJSON(
  transactionUpdateTotalTaxAmountCalculated:
    TransactionUpdateTotalTaxAmountCalculated,
): string {
  return JSON.stringify(
    TransactionUpdateTotalTaxAmountCalculated$outboundSchema.parse(
      transactionUpdateTotalTaxAmountCalculated,
    ),
  );
}

export function transactionUpdateTotalTaxAmountCalculatedFromJSON(
  jsonString: string,
): SafeParseResult<
  TransactionUpdateTotalTaxAmountCalculated,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      TransactionUpdateTotalTaxAmountCalculated$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'TransactionUpdateTotalTaxAmountCalculated' from JSON`,
  );
}

/** @internal */
export const TransactionUpdateTaxRateCalculated$inboundSchema: z.ZodType<
  TransactionUpdateTaxRateCalculated,
  z.ZodTypeDef,
  unknown
> = z.union([z.number(), z.string()]);

/** @internal */
export type TransactionUpdateTaxRateCalculated$Outbound = number | string;

/** @internal */
export const TransactionUpdateTaxRateCalculated$outboundSchema: z.ZodType<
  TransactionUpdateTaxRateCalculated$Outbound,
  z.ZodTypeDef,
  TransactionUpdateTaxRateCalculated
> = z.union([z.number(), z.string()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionUpdateTaxRateCalculated$ {
  /** @deprecated use `TransactionUpdateTaxRateCalculated$inboundSchema` instead. */
  export const inboundSchema = TransactionUpdateTaxRateCalculated$inboundSchema;
  /** @deprecated use `TransactionUpdateTaxRateCalculated$outboundSchema` instead. */
  export const outboundSchema =
    TransactionUpdateTaxRateCalculated$outboundSchema;
  /** @deprecated use `TransactionUpdateTaxRateCalculated$Outbound` instead. */
  export type Outbound = TransactionUpdateTaxRateCalculated$Outbound;
}

export function transactionUpdateTaxRateCalculatedToJSON(
  transactionUpdateTaxRateCalculated: TransactionUpdateTaxRateCalculated,
): string {
  return JSON.stringify(
    TransactionUpdateTaxRateCalculated$outboundSchema.parse(
      transactionUpdateTaxRateCalculated,
    ),
  );
}

export function transactionUpdateTaxRateCalculatedFromJSON(
  jsonString: string,
): SafeParseResult<TransactionUpdateTaxRateCalculated, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      TransactionUpdateTaxRateCalculated$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TransactionUpdateTaxRateCalculated' from JSON`,
  );
}

/** @internal */
export const TransactionUpdateTotalTaxLiabilityAmount$inboundSchema: z.ZodType<
  TransactionUpdateTotalTaxLiabilityAmount,
  z.ZodTypeDef,
  unknown
> = z.union([z.number(), z.string()]);

/** @internal */
export type TransactionUpdateTotalTaxLiabilityAmount$Outbound = number | string;

/** @internal */
export const TransactionUpdateTotalTaxLiabilityAmount$outboundSchema: z.ZodType<
  TransactionUpdateTotalTaxLiabilityAmount$Outbound,
  z.ZodTypeDef,
  TransactionUpdateTotalTaxLiabilityAmount
> = z.union([z.number(), z.string()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionUpdateTotalTaxLiabilityAmount$ {
  /** @deprecated use `TransactionUpdateTotalTaxLiabilityAmount$inboundSchema` instead. */
  export const inboundSchema =
    TransactionUpdateTotalTaxLiabilityAmount$inboundSchema;
  /** @deprecated use `TransactionUpdateTotalTaxLiabilityAmount$outboundSchema` instead. */
  export const outboundSchema =
    TransactionUpdateTotalTaxLiabilityAmount$outboundSchema;
  /** @deprecated use `TransactionUpdateTotalTaxLiabilityAmount$Outbound` instead. */
  export type Outbound = TransactionUpdateTotalTaxLiabilityAmount$Outbound;
}

export function transactionUpdateTotalTaxLiabilityAmountToJSON(
  transactionUpdateTotalTaxLiabilityAmount:
    TransactionUpdateTotalTaxLiabilityAmount,
): string {
  return JSON.stringify(
    TransactionUpdateTotalTaxLiabilityAmount$outboundSchema.parse(
      transactionUpdateTotalTaxLiabilityAmount,
    ),
  );
}

export function transactionUpdateTotalTaxLiabilityAmountFromJSON(
  jsonString: string,
): SafeParseResult<
  TransactionUpdateTotalTaxLiabilityAmount,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      TransactionUpdateTotalTaxLiabilityAmount$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'TransactionUpdateTotalTaxLiabilityAmount' from JSON`,
  );
}

/** @internal */
export const TransactionUpdateTaxableAmount$inboundSchema: z.ZodType<
  TransactionUpdateTaxableAmount,
  z.ZodTypeDef,
  unknown
> = z.union([z.number(), z.string()]);

/** @internal */
export type TransactionUpdateTaxableAmount$Outbound = number | string;

/** @internal */
export const TransactionUpdateTaxableAmount$outboundSchema: z.ZodType<
  TransactionUpdateTaxableAmount$Outbound,
  z.ZodTypeDef,
  TransactionUpdateTaxableAmount
> = z.union([z.number(), z.string()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionUpdateTaxableAmount$ {
  /** @deprecated use `TransactionUpdateTaxableAmount$inboundSchema` instead. */
  export const inboundSchema = TransactionUpdateTaxableAmount$inboundSchema;
  /** @deprecated use `TransactionUpdateTaxableAmount$outboundSchema` instead. */
  export const outboundSchema = TransactionUpdateTaxableAmount$outboundSchema;
  /** @deprecated use `TransactionUpdateTaxableAmount$Outbound` instead. */
  export type Outbound = TransactionUpdateTaxableAmount$Outbound;
}

export function transactionUpdateTaxableAmountToJSON(
  transactionUpdateTaxableAmount: TransactionUpdateTaxableAmount,
): string {
  return JSON.stringify(
    TransactionUpdateTaxableAmount$outboundSchema.parse(
      transactionUpdateTaxableAmount,
    ),
  );
}

export function transactionUpdateTaxableAmountFromJSON(
  jsonString: string,
): SafeParseResult<TransactionUpdateTaxableAmount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TransactionUpdateTaxableAmount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TransactionUpdateTaxableAmount' from JSON`,
  );
}

/** @internal */
export const TransactionUpdateConvertedTotalAmount$inboundSchema: z.ZodType<
  TransactionUpdateConvertedTotalAmount,
  z.ZodTypeDef,
  unknown
> = z.union([z.number(), z.string()]);

/** @internal */
export type TransactionUpdateConvertedTotalAmount$Outbound = number | string;

/** @internal */
export const TransactionUpdateConvertedTotalAmount$outboundSchema: z.ZodType<
  TransactionUpdateConvertedTotalAmount$Outbound,
  z.ZodTypeDef,
  TransactionUpdateConvertedTotalAmount
> = z.union([z.number(), z.string()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionUpdateConvertedTotalAmount$ {
  /** @deprecated use `TransactionUpdateConvertedTotalAmount$inboundSchema` instead. */
  export const inboundSchema =
    TransactionUpdateConvertedTotalAmount$inboundSchema;
  /** @deprecated use `TransactionUpdateConvertedTotalAmount$outboundSchema` instead. */
  export const outboundSchema =
    TransactionUpdateConvertedTotalAmount$outboundSchema;
  /** @deprecated use `TransactionUpdateConvertedTotalAmount$Outbound` instead. */
  export type Outbound = TransactionUpdateConvertedTotalAmount$Outbound;
}

export function transactionUpdateConvertedTotalAmountToJSON(
  transactionUpdateConvertedTotalAmount: TransactionUpdateConvertedTotalAmount,
): string {
  return JSON.stringify(
    TransactionUpdateConvertedTotalAmount$outboundSchema.parse(
      transactionUpdateConvertedTotalAmount,
    ),
  );
}

export function transactionUpdateConvertedTotalAmountFromJSON(
  jsonString: string,
): SafeParseResult<TransactionUpdateConvertedTotalAmount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      TransactionUpdateConvertedTotalAmount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TransactionUpdateConvertedTotalAmount' from JSON`,
  );
}

/** @internal */
export const TransactionUpdateConvertedTotalTaxAmountImported$inboundSchema:
  z.ZodType<
    TransactionUpdateConvertedTotalTaxAmountImported,
    z.ZodTypeDef,
    unknown
  > = z.union([z.number(), z.string()]);

/** @internal */
export type TransactionUpdateConvertedTotalTaxAmountImported$Outbound =
  | number
  | string;

/** @internal */
export const TransactionUpdateConvertedTotalTaxAmountImported$outboundSchema:
  z.ZodType<
    TransactionUpdateConvertedTotalTaxAmountImported$Outbound,
    z.ZodTypeDef,
    TransactionUpdateConvertedTotalTaxAmountImported
  > = z.union([z.number(), z.string()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionUpdateConvertedTotalTaxAmountImported$ {
  /** @deprecated use `TransactionUpdateConvertedTotalTaxAmountImported$inboundSchema` instead. */
  export const inboundSchema =
    TransactionUpdateConvertedTotalTaxAmountImported$inboundSchema;
  /** @deprecated use `TransactionUpdateConvertedTotalTaxAmountImported$outboundSchema` instead. */
  export const outboundSchema =
    TransactionUpdateConvertedTotalTaxAmountImported$outboundSchema;
  /** @deprecated use `TransactionUpdateConvertedTotalTaxAmountImported$Outbound` instead. */
  export type Outbound =
    TransactionUpdateConvertedTotalTaxAmountImported$Outbound;
}

export function transactionUpdateConvertedTotalTaxAmountImportedToJSON(
  transactionUpdateConvertedTotalTaxAmountImported:
    TransactionUpdateConvertedTotalTaxAmountImported,
): string {
  return JSON.stringify(
    TransactionUpdateConvertedTotalTaxAmountImported$outboundSchema.parse(
      transactionUpdateConvertedTotalTaxAmountImported,
    ),
  );
}

export function transactionUpdateConvertedTotalTaxAmountImportedFromJSON(
  jsonString: string,
): SafeParseResult<
  TransactionUpdateConvertedTotalTaxAmountImported,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      TransactionUpdateConvertedTotalTaxAmountImported$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'TransactionUpdateConvertedTotalTaxAmountImported' from JSON`,
  );
}

/** @internal */
export const TransactionUpdateConvertedTotalTaxAmountCalculated$inboundSchema:
  z.ZodType<
    TransactionUpdateConvertedTotalTaxAmountCalculated,
    z.ZodTypeDef,
    unknown
  > = z.union([z.number(), z.string()]);

/** @internal */
export type TransactionUpdateConvertedTotalTaxAmountCalculated$Outbound =
  | number
  | string;

/** @internal */
export const TransactionUpdateConvertedTotalTaxAmountCalculated$outboundSchema:
  z.ZodType<
    TransactionUpdateConvertedTotalTaxAmountCalculated$Outbound,
    z.ZodTypeDef,
    TransactionUpdateConvertedTotalTaxAmountCalculated
  > = z.union([z.number(), z.string()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionUpdateConvertedTotalTaxAmountCalculated$ {
  /** @deprecated use `TransactionUpdateConvertedTotalTaxAmountCalculated$inboundSchema` instead. */
  export const inboundSchema =
    TransactionUpdateConvertedTotalTaxAmountCalculated$inboundSchema;
  /** @deprecated use `TransactionUpdateConvertedTotalTaxAmountCalculated$outboundSchema` instead. */
  export const outboundSchema =
    TransactionUpdateConvertedTotalTaxAmountCalculated$outboundSchema;
  /** @deprecated use `TransactionUpdateConvertedTotalTaxAmountCalculated$Outbound` instead. */
  export type Outbound =
    TransactionUpdateConvertedTotalTaxAmountCalculated$Outbound;
}

export function transactionUpdateConvertedTotalTaxAmountCalculatedToJSON(
  transactionUpdateConvertedTotalTaxAmountCalculated:
    TransactionUpdateConvertedTotalTaxAmountCalculated,
): string {
  return JSON.stringify(
    TransactionUpdateConvertedTotalTaxAmountCalculated$outboundSchema.parse(
      transactionUpdateConvertedTotalTaxAmountCalculated,
    ),
  );
}

export function transactionUpdateConvertedTotalTaxAmountCalculatedFromJSON(
  jsonString: string,
): SafeParseResult<
  TransactionUpdateConvertedTotalTaxAmountCalculated,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      TransactionUpdateConvertedTotalTaxAmountCalculated$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'TransactionUpdateConvertedTotalTaxAmountCalculated' from JSON`,
  );
}

/** @internal */
export const TransactionUpdateConversionRate$inboundSchema: z.ZodType<
  TransactionUpdateConversionRate,
  z.ZodTypeDef,
  unknown
> = z.union([z.number(), z.string()]);

/** @internal */
export type TransactionUpdateConversionRate$Outbound = number | string;

/** @internal */
export const TransactionUpdateConversionRate$outboundSchema: z.ZodType<
  TransactionUpdateConversionRate$Outbound,
  z.ZodTypeDef,
  TransactionUpdateConversionRate
> = z.union([z.number(), z.string()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionUpdateConversionRate$ {
  /** @deprecated use `TransactionUpdateConversionRate$inboundSchema` instead. */
  export const inboundSchema = TransactionUpdateConversionRate$inboundSchema;
  /** @deprecated use `TransactionUpdateConversionRate$outboundSchema` instead. */
  export const outboundSchema = TransactionUpdateConversionRate$outboundSchema;
  /** @deprecated use `TransactionUpdateConversionRate$Outbound` instead. */
  export type Outbound = TransactionUpdateConversionRate$Outbound;
}

export function transactionUpdateConversionRateToJSON(
  transactionUpdateConversionRate: TransactionUpdateConversionRate,
): string {
  return JSON.stringify(
    TransactionUpdateConversionRate$outboundSchema.parse(
      transactionUpdateConversionRate,
    ),
  );
}

export function transactionUpdateConversionRateFromJSON(
  jsonString: string,
): SafeParseResult<TransactionUpdateConversionRate, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TransactionUpdateConversionRate$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TransactionUpdateConversionRate' from JSON`,
  );
}

/** @internal */
export const TransactionUpdateConvertedTaxableAmount$inboundSchema: z.ZodType<
  TransactionUpdateConvertedTaxableAmount,
  z.ZodTypeDef,
  unknown
> = z.union([z.number(), z.string()]);

/** @internal */
export type TransactionUpdateConvertedTaxableAmount$Outbound = number | string;

/** @internal */
export const TransactionUpdateConvertedTaxableAmount$outboundSchema: z.ZodType<
  TransactionUpdateConvertedTaxableAmount$Outbound,
  z.ZodTypeDef,
  TransactionUpdateConvertedTaxableAmount
> = z.union([z.number(), z.string()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionUpdateConvertedTaxableAmount$ {
  /** @deprecated use `TransactionUpdateConvertedTaxableAmount$inboundSchema` instead. */
  export const inboundSchema =
    TransactionUpdateConvertedTaxableAmount$inboundSchema;
  /** @deprecated use `TransactionUpdateConvertedTaxableAmount$outboundSchema` instead. */
  export const outboundSchema =
    TransactionUpdateConvertedTaxableAmount$outboundSchema;
  /** @deprecated use `TransactionUpdateConvertedTaxableAmount$Outbound` instead. */
  export type Outbound = TransactionUpdateConvertedTaxableAmount$Outbound;
}

export function transactionUpdateConvertedTaxableAmountToJSON(
  transactionUpdateConvertedTaxableAmount:
    TransactionUpdateConvertedTaxableAmount,
): string {
  return JSON.stringify(
    TransactionUpdateConvertedTaxableAmount$outboundSchema.parse(
      transactionUpdateConvertedTaxableAmount,
    ),
  );
}

export function transactionUpdateConvertedTaxableAmountFromJSON(
  jsonString: string,
): SafeParseResult<
  TransactionUpdateConvertedTaxableAmount,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      TransactionUpdateConvertedTaxableAmount$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'TransactionUpdateConvertedTaxableAmount' from JSON`,
  );
}

/** @internal */
export const TransactionUpdateConvertedTotalDiscount$inboundSchema: z.ZodType<
  TransactionUpdateConvertedTotalDiscount,
  z.ZodTypeDef,
  unknown
> = z.union([z.number(), z.string()]);

/** @internal */
export type TransactionUpdateConvertedTotalDiscount$Outbound = number | string;

/** @internal */
export const TransactionUpdateConvertedTotalDiscount$outboundSchema: z.ZodType<
  TransactionUpdateConvertedTotalDiscount$Outbound,
  z.ZodTypeDef,
  TransactionUpdateConvertedTotalDiscount
> = z.union([z.number(), z.string()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionUpdateConvertedTotalDiscount$ {
  /** @deprecated use `TransactionUpdateConvertedTotalDiscount$inboundSchema` instead. */
  export const inboundSchema =
    TransactionUpdateConvertedTotalDiscount$inboundSchema;
  /** @deprecated use `TransactionUpdateConvertedTotalDiscount$outboundSchema` instead. */
  export const outboundSchema =
    TransactionUpdateConvertedTotalDiscount$outboundSchema;
  /** @deprecated use `TransactionUpdateConvertedTotalDiscount$Outbound` instead. */
  export type Outbound = TransactionUpdateConvertedTotalDiscount$Outbound;
}

export function transactionUpdateConvertedTotalDiscountToJSON(
  transactionUpdateConvertedTotalDiscount:
    TransactionUpdateConvertedTotalDiscount,
): string {
  return JSON.stringify(
    TransactionUpdateConvertedTotalDiscount$outboundSchema.parse(
      transactionUpdateConvertedTotalDiscount,
    ),
  );
}

export function transactionUpdateConvertedTotalDiscountFromJSON(
  jsonString: string,
): SafeParseResult<
  TransactionUpdateConvertedTotalDiscount,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      TransactionUpdateConvertedTotalDiscount$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'TransactionUpdateConvertedTotalDiscount' from JSON`,
  );
}

/** @internal */
export const TransactionUpdateConvertedSubtotal$inboundSchema: z.ZodType<
  TransactionUpdateConvertedSubtotal,
  z.ZodTypeDef,
  unknown
> = z.union([z.number(), z.string()]);

/** @internal */
export type TransactionUpdateConvertedSubtotal$Outbound = number | string;

/** @internal */
export const TransactionUpdateConvertedSubtotal$outboundSchema: z.ZodType<
  TransactionUpdateConvertedSubtotal$Outbound,
  z.ZodTypeDef,
  TransactionUpdateConvertedSubtotal
> = z.union([z.number(), z.string()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionUpdateConvertedSubtotal$ {
  /** @deprecated use `TransactionUpdateConvertedSubtotal$inboundSchema` instead. */
  export const inboundSchema = TransactionUpdateConvertedSubtotal$inboundSchema;
  /** @deprecated use `TransactionUpdateConvertedSubtotal$outboundSchema` instead. */
  export const outboundSchema =
    TransactionUpdateConvertedSubtotal$outboundSchema;
  /** @deprecated use `TransactionUpdateConvertedSubtotal$Outbound` instead. */
  export type Outbound = TransactionUpdateConvertedSubtotal$Outbound;
}

export function transactionUpdateConvertedSubtotalToJSON(
  transactionUpdateConvertedSubtotal: TransactionUpdateConvertedSubtotal,
): string {
  return JSON.stringify(
    TransactionUpdateConvertedSubtotal$outboundSchema.parse(
      transactionUpdateConvertedSubtotal,
    ),
  );
}

export function transactionUpdateConvertedSubtotalFromJSON(
  jsonString: string,
): SafeParseResult<TransactionUpdateConvertedSubtotal, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      TransactionUpdateConvertedSubtotal$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TransactionUpdateConvertedSubtotal' from JSON`,
  );
}

/** @internal */
export const TransactionUpdateConvertedTotalTaxLiabilityAmount$inboundSchema:
  z.ZodType<
    TransactionUpdateConvertedTotalTaxLiabilityAmount,
    z.ZodTypeDef,
    unknown
  > = z.union([z.number(), z.string()]);

/** @internal */
export type TransactionUpdateConvertedTotalTaxLiabilityAmount$Outbound =
  | number
  | string;

/** @internal */
export const TransactionUpdateConvertedTotalTaxLiabilityAmount$outboundSchema:
  z.ZodType<
    TransactionUpdateConvertedTotalTaxLiabilityAmount$Outbound,
    z.ZodTypeDef,
    TransactionUpdateConvertedTotalTaxLiabilityAmount
  > = z.union([z.number(), z.string()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionUpdateConvertedTotalTaxLiabilityAmount$ {
  /** @deprecated use `TransactionUpdateConvertedTotalTaxLiabilityAmount$inboundSchema` instead. */
  export const inboundSchema =
    TransactionUpdateConvertedTotalTaxLiabilityAmount$inboundSchema;
  /** @deprecated use `TransactionUpdateConvertedTotalTaxLiabilityAmount$outboundSchema` instead. */
  export const outboundSchema =
    TransactionUpdateConvertedTotalTaxLiabilityAmount$outboundSchema;
  /** @deprecated use `TransactionUpdateConvertedTotalTaxLiabilityAmount$Outbound` instead. */
  export type Outbound =
    TransactionUpdateConvertedTotalTaxLiabilityAmount$Outbound;
}

export function transactionUpdateConvertedTotalTaxLiabilityAmountToJSON(
  transactionUpdateConvertedTotalTaxLiabilityAmount:
    TransactionUpdateConvertedTotalTaxLiabilityAmount,
): string {
  return JSON.stringify(
    TransactionUpdateConvertedTotalTaxLiabilityAmount$outboundSchema.parse(
      transactionUpdateConvertedTotalTaxLiabilityAmount,
    ),
  );
}

export function transactionUpdateConvertedTotalTaxLiabilityAmountFromJSON(
  jsonString: string,
): SafeParseResult<
  TransactionUpdateConvertedTotalTaxLiabilityAmount,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      TransactionUpdateConvertedTotalTaxLiabilityAmount$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'TransactionUpdateConvertedTotalTaxLiabilityAmount' from JSON`,
  );
}

/** @internal */
export const TransactionUpdateAddresses$inboundSchema: z.ZodType<
  TransactionUpdateAddresses,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.array(TransactionAddressBuilder$inboundSchema),
  z.array(AddressInput$inboundSchema),
]);

/** @internal */
export type TransactionUpdateAddresses$Outbound =
  | Array<TransactionAddressBuilder$Outbound>
  | Array<AddressInput$Outbound>;

/** @internal */
export const TransactionUpdateAddresses$outboundSchema: z.ZodType<
  TransactionUpdateAddresses$Outbound,
  z.ZodTypeDef,
  TransactionUpdateAddresses
> = z.union([
  z.array(TransactionAddressBuilder$outboundSchema),
  z.array(AddressInput$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionUpdateAddresses$ {
  /** @deprecated use `TransactionUpdateAddresses$inboundSchema` instead. */
  export const inboundSchema = TransactionUpdateAddresses$inboundSchema;
  /** @deprecated use `TransactionUpdateAddresses$outboundSchema` instead. */
  export const outboundSchema = TransactionUpdateAddresses$outboundSchema;
  /** @deprecated use `TransactionUpdateAddresses$Outbound` instead. */
  export type Outbound = TransactionUpdateAddresses$Outbound;
}

export function transactionUpdateAddressesToJSON(
  transactionUpdateAddresses: TransactionUpdateAddresses,
): string {
  return JSON.stringify(
    TransactionUpdateAddresses$outboundSchema.parse(transactionUpdateAddresses),
  );
}

export function transactionUpdateAddressesFromJSON(
  jsonString: string,
): SafeParseResult<TransactionUpdateAddresses, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TransactionUpdateAddresses$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TransactionUpdateAddresses' from JSON`,
  );
}

/** @internal */
export const TransactionUpdate$inboundSchema: z.ZodType<
  TransactionUpdate,
  z.ZodTypeDef,
  unknown
> = z.object({
  requires_exemption: z.nullable(ExemptionRequired$inboundSchema).optional(),
  organization_id: z.string(),
  external_id: z.string(),
  date: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  shop_date: z.nullable(z.string().transform(v => new RFCDate(v))).optional(),
  shop_date_tz: z.nullable(z.string()).optional(),
  status: TransactionStatusEnum$inboundSchema.optional(),
  description: z.nullable(z.string()).optional(),
  refund_status: z.nullable(TransactionRefundStatus$inboundSchema).optional(),
  total_amount: z.union([z.number(), z.string()]).optional(),
  customer_id: z.nullable(z.string()).optional(),
  marketplace: z.nullable(z.boolean()).optional(),
  exempt: z.nullable(TransactionExemptStatusEnum$inboundSchema).optional(),
  exemptions: z.nullable(z.array(Exemption$inboundSchema)).optional(),
  related_to: z.nullable(z.string()).optional(),
  secondary_external_id: z.nullable(z.string()).optional(),
  secondary_source: z.nullable(z.string()).optional(),
  external_friendly_id: z.nullable(z.string()).optional(),
  total_tax_amount_imported: z.union([z.number(), z.string()]).optional(),
  tax_rate_imported: z.union([z.number(), z.string()]).optional(),
  total_tax_amount_calculated: z.union([z.number(), z.string()]).optional(),
  tax_rate_calculated: z.union([z.number(), z.string()]).optional(),
  total_tax_liability_amount: z.union([z.number(), z.string()]).optional(),
  tax_liability_source: z.nullable(TaxLiabilitySourceEnum$inboundSchema)
    .optional(),
  taxable_amount: z.union([z.number(), z.string()]).optional(),
  currency: CurrencyEnum$inboundSchema.optional(),
  locked: z.boolean().default(false),
  source: SourceEnum$inboundSchema.optional(),
  connection_id: z.nullable(z.string()).optional(),
  filing_id: z.nullable(z.string()).optional(),
  city: z.nullable(z.string()).optional(),
  county: z.nullable(z.string()).optional(),
  state: z.nullable(z.string()).optional(),
  country: z.nullable(CountryCodeEnum$inboundSchema).optional(),
  postal_code: z.nullable(z.string()).optional(),
  tax_id: z.nullable(z.string()).optional(),
  address_status: AddressStatus$inboundSchema.optional(),
  processing_status: ProcessingStatusEnum$inboundSchema.optional(),
  destination_currency: z.nullable(CurrencyEnum$inboundSchema).optional(),
  converted_total_amount: z.nullable(z.union([z.number(), z.string()]))
    .optional(),
  converted_total_tax_amount_imported: z.nullable(
    z.union([z.number(), z.string()]),
  ).optional(),
  converted_total_tax_amount_calculated: z.nullable(
    z.union([z.number(), z.string()]),
  ).optional(),
  conversion_rate: z.nullable(z.union([z.number(), z.string()])).optional(),
  converted_taxable_amount: z.nullable(z.union([z.number(), z.string()]))
    .optional(),
  converted_total_discount: z.nullable(z.union([z.number(), z.string()]))
    .optional(),
  converted_subtotal: z.nullable(z.union([z.number(), z.string()])).optional(),
  converted_total_tax_liability_amount: z.nullable(
    z.union([z.number(), z.string()]),
  ).optional(),
  addresses: z.union([
    z.array(TransactionAddressBuilder$inboundSchema),
    z.array(AddressInput$inboundSchema),
  ]),
  transaction_items: z.array(TransactionItemCreateUpdate$inboundSchema),
  customer: CustomerUpdate$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "requires_exemption": "requiresExemption",
    "organization_id": "organizationId",
    "external_id": "externalId",
    "shop_date": "shopDate",
    "shop_date_tz": "shopDateTz",
    "refund_status": "refundStatus",
    "total_amount": "totalAmount",
    "customer_id": "customerId",
    "related_to": "relatedTo",
    "secondary_external_id": "secondaryExternalId",
    "secondary_source": "secondarySource",
    "external_friendly_id": "externalFriendlyId",
    "total_tax_amount_imported": "totalTaxAmountImported",
    "tax_rate_imported": "taxRateImported",
    "total_tax_amount_calculated": "totalTaxAmountCalculated",
    "tax_rate_calculated": "taxRateCalculated",
    "total_tax_liability_amount": "totalTaxLiabilityAmount",
    "tax_liability_source": "taxLiabilitySource",
    "taxable_amount": "taxableAmount",
    "connection_id": "connectionId",
    "filing_id": "filingId",
    "postal_code": "postalCode",
    "tax_id": "taxId",
    "address_status": "addressStatus",
    "processing_status": "processingStatus",
    "destination_currency": "destinationCurrency",
    "converted_total_amount": "convertedTotalAmount",
    "converted_total_tax_amount_imported": "convertedTotalTaxAmountImported",
    "converted_total_tax_amount_calculated":
      "convertedTotalTaxAmountCalculated",
    "conversion_rate": "conversionRate",
    "converted_taxable_amount": "convertedTaxableAmount",
    "converted_total_discount": "convertedTotalDiscount",
    "converted_subtotal": "convertedSubtotal",
    "converted_total_tax_liability_amount": "convertedTotalTaxLiabilityAmount",
    "transaction_items": "transactionItems",
  });
});

/** @internal */
export type TransactionUpdate$Outbound = {
  requires_exemption?: ExemptionRequired$Outbound | null | undefined;
  organization_id: string;
  external_id: string;
  date: string;
  shop_date?: string | null | undefined;
  shop_date_tz?: string | null | undefined;
  status?: string | undefined;
  description?: string | null | undefined;
  refund_status?: string | null | undefined;
  total_amount?: number | string | undefined;
  customer_id?: string | null | undefined;
  marketplace?: boolean | null | undefined;
  exempt?: string | null | undefined;
  exemptions?: Array<Exemption$Outbound> | null | undefined;
  related_to?: string | null | undefined;
  secondary_external_id?: string | null | undefined;
  secondary_source?: string | null | undefined;
  external_friendly_id?: string | null | undefined;
  total_tax_amount_imported?: number | string | undefined;
  tax_rate_imported?: number | string | undefined;
  total_tax_amount_calculated?: number | string | undefined;
  tax_rate_calculated?: number | string | undefined;
  total_tax_liability_amount?: number | string | undefined;
  tax_liability_source?: string | null | undefined;
  taxable_amount?: number | string | undefined;
  currency?: string | undefined;
  locked: boolean;
  source?: string | undefined;
  connection_id?: string | null | undefined;
  filing_id?: string | null | undefined;
  city?: string | null | undefined;
  county?: string | null | undefined;
  state?: string | null | undefined;
  country?: string | null | undefined;
  postal_code?: string | null | undefined;
  tax_id?: string | null | undefined;
  address_status?: string | undefined;
  processing_status?: string | undefined;
  destination_currency?: string | null | undefined;
  converted_total_amount?: number | string | null | undefined;
  converted_total_tax_amount_imported?: number | string | null | undefined;
  converted_total_tax_amount_calculated?: number | string | null | undefined;
  conversion_rate?: number | string | null | undefined;
  converted_taxable_amount?: number | string | null | undefined;
  converted_total_discount?: number | string | null | undefined;
  converted_subtotal?: number | string | null | undefined;
  converted_total_tax_liability_amount?: number | string | null | undefined;
  addresses:
    | Array<TransactionAddressBuilder$Outbound>
    | Array<AddressInput$Outbound>;
  transaction_items: Array<TransactionItemCreateUpdate$Outbound>;
  customer: CustomerUpdate$Outbound;
};

/** @internal */
export const TransactionUpdate$outboundSchema: z.ZodType<
  TransactionUpdate$Outbound,
  z.ZodTypeDef,
  TransactionUpdate
> = z.object({
  requiresExemption: z.nullable(ExemptionRequired$outboundSchema).optional(),
  organizationId: z.string(),
  externalId: z.string(),
  date: z.date().transform(v => v.toISOString()),
  shopDate: z.nullable(z.instanceof(RFCDate).transform(v => v.toString()))
    .optional(),
  shopDateTz: z.nullable(z.string()).optional(),
  status: TransactionStatusEnum$outboundSchema.optional(),
  description: z.nullable(z.string()).optional(),
  refundStatus: z.nullable(TransactionRefundStatus$outboundSchema).optional(),
  totalAmount: z.union([z.number(), z.string()]).optional(),
  customerId: z.nullable(z.string()).optional(),
  marketplace: z.nullable(z.boolean()).optional(),
  exempt: z.nullable(TransactionExemptStatusEnum$outboundSchema).optional(),
  exemptions: z.nullable(z.array(Exemption$outboundSchema)).optional(),
  relatedTo: z.nullable(z.string()).optional(),
  secondaryExternalId: z.nullable(z.string()).optional(),
  secondarySource: z.nullable(z.string()).optional(),
  externalFriendlyId: z.nullable(z.string()).optional(),
  totalTaxAmountImported: z.union([z.number(), z.string()]).optional(),
  taxRateImported: z.union([z.number(), z.string()]).optional(),
  totalTaxAmountCalculated: z.union([z.number(), z.string()]).optional(),
  taxRateCalculated: z.union([z.number(), z.string()]).optional(),
  totalTaxLiabilityAmount: z.union([z.number(), z.string()]).optional(),
  taxLiabilitySource: z.nullable(TaxLiabilitySourceEnum$outboundSchema)
    .optional(),
  taxableAmount: z.union([z.number(), z.string()]).optional(),
  currency: CurrencyEnum$outboundSchema.optional(),
  locked: z.boolean().default(false),
  source: SourceEnum$outboundSchema.optional(),
  connectionId: z.nullable(z.string()).optional(),
  filingId: z.nullable(z.string()).optional(),
  city: z.nullable(z.string()).optional(),
  county: z.nullable(z.string()).optional(),
  state: z.nullable(z.string()).optional(),
  country: z.nullable(CountryCodeEnum$outboundSchema).optional(),
  postalCode: z.nullable(z.string()).optional(),
  taxId: z.nullable(z.string()).optional(),
  addressStatus: AddressStatus$outboundSchema.optional(),
  processingStatus: ProcessingStatusEnum$outboundSchema.optional(),
  destinationCurrency: z.nullable(CurrencyEnum$outboundSchema).optional(),
  convertedTotalAmount: z.nullable(z.union([z.number(), z.string()]))
    .optional(),
  convertedTotalTaxAmountImported: z.nullable(z.union([z.number(), z.string()]))
    .optional(),
  convertedTotalTaxAmountCalculated: z.nullable(
    z.union([z.number(), z.string()]),
  ).optional(),
  conversionRate: z.nullable(z.union([z.number(), z.string()])).optional(),
  convertedTaxableAmount: z.nullable(z.union([z.number(), z.string()]))
    .optional(),
  convertedTotalDiscount: z.nullable(z.union([z.number(), z.string()]))
    .optional(),
  convertedSubtotal: z.nullable(z.union([z.number(), z.string()])).optional(),
  convertedTotalTaxLiabilityAmount: z.nullable(
    z.union([z.number(), z.string()]),
  ).optional(),
  addresses: z.union([
    z.array(TransactionAddressBuilder$outboundSchema),
    z.array(AddressInput$outboundSchema),
  ]),
  transactionItems: z.array(TransactionItemCreateUpdate$outboundSchema),
  customer: CustomerUpdate$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    requiresExemption: "requires_exemption",
    organizationId: "organization_id",
    externalId: "external_id",
    shopDate: "shop_date",
    shopDateTz: "shop_date_tz",
    refundStatus: "refund_status",
    totalAmount: "total_amount",
    customerId: "customer_id",
    relatedTo: "related_to",
    secondaryExternalId: "secondary_external_id",
    secondarySource: "secondary_source",
    externalFriendlyId: "external_friendly_id",
    totalTaxAmountImported: "total_tax_amount_imported",
    taxRateImported: "tax_rate_imported",
    totalTaxAmountCalculated: "total_tax_amount_calculated",
    taxRateCalculated: "tax_rate_calculated",
    totalTaxLiabilityAmount: "total_tax_liability_amount",
    taxLiabilitySource: "tax_liability_source",
    taxableAmount: "taxable_amount",
    connectionId: "connection_id",
    filingId: "filing_id",
    postalCode: "postal_code",
    taxId: "tax_id",
    addressStatus: "address_status",
    processingStatus: "processing_status",
    destinationCurrency: "destination_currency",
    convertedTotalAmount: "converted_total_amount",
    convertedTotalTaxAmountImported: "converted_total_tax_amount_imported",
    convertedTotalTaxAmountCalculated: "converted_total_tax_amount_calculated",
    conversionRate: "conversion_rate",
    convertedTaxableAmount: "converted_taxable_amount",
    convertedTotalDiscount: "converted_total_discount",
    convertedSubtotal: "converted_subtotal",
    convertedTotalTaxLiabilityAmount: "converted_total_tax_liability_amount",
    transactionItems: "transaction_items",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionUpdate$ {
  /** @deprecated use `TransactionUpdate$inboundSchema` instead. */
  export const inboundSchema = TransactionUpdate$inboundSchema;
  /** @deprecated use `TransactionUpdate$outboundSchema` instead. */
  export const outboundSchema = TransactionUpdate$outboundSchema;
  /** @deprecated use `TransactionUpdate$Outbound` instead. */
  export type Outbound = TransactionUpdate$Outbound;
}

export function transactionUpdateToJSON(
  transactionUpdate: TransactionUpdate,
): string {
  return JSON.stringify(
    TransactionUpdate$outboundSchema.parse(transactionUpdate),
  );
}

export function transactionUpdateFromJSON(
  jsonString: string,
): SafeParseResult<TransactionUpdate, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TransactionUpdate$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TransactionUpdate' from JSON`,
  );
}
