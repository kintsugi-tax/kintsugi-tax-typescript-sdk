/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { RFCDate } from "../types/rfcdate.js";
import {
  CountryCodeEnum,
  CountryCodeEnum$inboundSchema,
  CountryCodeEnum$outboundSchema,
} from "./countrycodeenum.js";
import {
  CurrencyEnum,
  CurrencyEnum$inboundSchema,
  CurrencyEnum$outboundSchema,
} from "./currencyenum.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  NexusStateEnum,
  NexusStateEnum$inboundSchema,
  NexusStateEnum$outboundSchema,
} from "./nexusstateenum.js";
import {
  NexusStatusEnum,
  NexusStatusEnum$inboundSchema,
  NexusStatusEnum$outboundSchema,
} from "./nexusstatusenum.js";
import {
  NexusTypeEnum,
  NexusTypeEnum$inboundSchema,
  NexusTypeEnum$outboundSchema,
} from "./nexustypeenum.js";
import {
  PeriodModelEnum,
  PeriodModelEnum$inboundSchema,
  PeriodModelEnum$outboundSchema,
} from "./periodmodelenum.js";
import {
  RegistrationsRegimeEnum,
  RegistrationsRegimeEnum$inboundSchema,
  RegistrationsRegimeEnum$outboundSchema,
} from "./registrationsregimeenum.js";
import {
  SalesOrTransactionsEnum,
  SalesOrTransactionsEnum$inboundSchema,
  SalesOrTransactionsEnum$outboundSchema,
} from "./salesortransactionsenum.js";
import {
  TreatmentEnum,
  TreatmentEnum$inboundSchema,
  TreatmentEnum$outboundSchema,
} from "./treatmentenum.js";

export type Registration = {};

export type NexusResponse = {
  processingStatus?: NexusStatusEnum | undefined;
  status?: NexusStateEnum | undefined;
  countryCode: CountryCodeEnum;
  stateCode: string;
  stateName: string;
  treatmentOfExemptTransactions: TreatmentEnum;
  trigger: string;
  salesOrTransactions: SalesOrTransactionsEnum;
  thresholdSales: number;
  thresholdTransactions: number;
  startDate: RFCDate;
  transactionCount?: number | undefined;
  transactionsAmount?: string | undefined;
  /**
   * Deprecated: transaction_count now includes both current and previous period values when period_model is CURRENT_OR_PREVIOUS
   *
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  previousTransactionCount?: number | undefined;
  /**
   * Deprecated: transactions_amount now includes both current and previous period values when period_model is CURRENT_OR_PREVIOUS
   *
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  previousTransactionsAmount?: string | undefined;
  calculatedTaxLiability?: string | undefined;
  importedTaxLiability?: string | undefined;
  taxLiability?: string | undefined;
  nexusMet?: boolean | undefined;
  nexusMetDate?: string | undefined;
  economicNexusMet?: boolean | undefined;
  economicNexusMetDate?: string | undefined;
  physicalNexusMet?: boolean | undefined;
  physicalNexusMetDate?: string | undefined;
  collectedTaxNexusMet?: boolean | undefined;
  collectedTaxNexusMetDate?: string | undefined;
  collectedTaxEnabled?: boolean | undefined;
  periodModel: PeriodModelEnum;
  periodStartDate: RFCDate;
  periodEndDate: RFCDate;
  previousPeriodStartDate: string;
  previousPeriodEndDate: string;
  earliestTransactionDate?: string | undefined;
  mostRecentTransactionDate?: string | undefined;
  earliestCollectedDate?: Date | undefined;
  predictedMonthFromToday?: number | undefined;
  vdaEligible?: boolean | undefined;
  confidenceLevel?: number | undefined;
  lastProcessedAt?: string | undefined;
  lastTaxLiabilityProcessedAt?: string | undefined;
  periods?: Array<{ [k: string]: any }> | undefined;
  currency?: CurrencyEnum | undefined;
  id: string;
  createdAt: Date;
  updatedAt: Date;
  organizationId: string;
  registration?: Registration | undefined;
  registrationRegime?: RegistrationsRegimeEnum | undefined;
  isVdaEligible: boolean;
  nexusType: NexusTypeEnum;
  totalTransactions: number;
  totalTransactionsIncluded: number;
  totalTransactionsExempted: number;
  totalTransactionsMarketplace: number;
  marketplaceIncluded: boolean;
};

/** @internal */
export const Registration$inboundSchema: z.ZodType<
  Registration,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type Registration$Outbound = {};

/** @internal */
export const Registration$outboundSchema: z.ZodType<
  Registration$Outbound,
  z.ZodTypeDef,
  Registration
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Registration$ {
  /** @deprecated use `Registration$inboundSchema` instead. */
  export const inboundSchema = Registration$inboundSchema;
  /** @deprecated use `Registration$outboundSchema` instead. */
  export const outboundSchema = Registration$outboundSchema;
  /** @deprecated use `Registration$Outbound` instead. */
  export type Outbound = Registration$Outbound;
}

export function registrationToJSON(registration: Registration): string {
  return JSON.stringify(Registration$outboundSchema.parse(registration));
}

export function registrationFromJSON(
  jsonString: string,
): SafeParseResult<Registration, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Registration$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Registration' from JSON`,
  );
}

/** @internal */
export const NexusResponse$inboundSchema: z.ZodType<
  NexusResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  processing_status: NexusStatusEnum$inboundSchema.optional(),
  status: NexusStateEnum$inboundSchema.optional(),
  country_code: CountryCodeEnum$inboundSchema,
  state_code: z.string(),
  state_name: z.string(),
  treatment_of_exempt_transactions: TreatmentEnum$inboundSchema,
  trigger: z.string(),
  sales_or_transactions: SalesOrTransactionsEnum$inboundSchema,
  threshold_sales: z.number().int(),
  threshold_transactions: z.number().int(),
  start_date: z.string().transform(v => new RFCDate(v)),
  transaction_count: z.number().int().default(0),
  transactions_amount: z.string().default("0.00"),
  previous_transaction_count: z.number().int().default(0),
  previous_transactions_amount: z.string().default("0.00"),
  calculated_tax_liability: z.string().default("0.00"),
  imported_tax_liability: z.string().default("0.00"),
  tax_liability: z.string().default("0.00"),
  nexus_met: z.boolean().default(false),
  nexus_met_date: z.string().optional(),
  economic_nexus_met: z.boolean().default(false),
  economic_nexus_met_date: z.string().optional(),
  physical_nexus_met: z.boolean().default(false),
  physical_nexus_met_date: z.string().optional(),
  collected_tax_nexus_met: z.boolean().default(false),
  collected_tax_nexus_met_date: z.string().optional(),
  collected_tax_enabled: z.boolean().default(false),
  period_model: PeriodModelEnum$inboundSchema,
  period_start_date: z.string().transform(v => new RFCDate(v)),
  period_end_date: z.string().transform(v => new RFCDate(v)),
  previous_period_start_date: z.string(),
  previous_period_end_date: z.string(),
  earliest_transaction_date: z.string().optional(),
  most_recent_transaction_date: z.string().optional(),
  earliest_collected_date: z.string().datetime({ offset: true }).default(
    "2018-01-01T00:00:00",
  ).transform(v => new Date(v)),
  predicted_month_from_today: z.number().int().optional(),
  vda_eligible: z.boolean().default(false),
  confidence_level: z.number().optional(),
  last_processed_at: z.string().optional(),
  last_tax_liability_processed_at: z.string().optional(),
  periods: z.array(z.record(z.any())).optional(),
  currency: CurrencyEnum$inboundSchema.optional(),
  id: z.string(),
  created_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  updated_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  organization_id: z.string(),
  registration: z.lazy(() => Registration$inboundSchema).optional(),
  registration_regime: RegistrationsRegimeEnum$inboundSchema.optional(),
  is_vda_eligible: z.boolean(),
  nexus_type: NexusTypeEnum$inboundSchema,
  total_transactions: z.number().int(),
  total_transactions_included: z.number().int(),
  total_transactions_exempted: z.number().int(),
  total_transactions_marketplace: z.number().int(),
  marketplace_included: z.boolean(),
}).transform((v) => {
  return remap$(v, {
    "processing_status": "processingStatus",
    "country_code": "countryCode",
    "state_code": "stateCode",
    "state_name": "stateName",
    "treatment_of_exempt_transactions": "treatmentOfExemptTransactions",
    "sales_or_transactions": "salesOrTransactions",
    "threshold_sales": "thresholdSales",
    "threshold_transactions": "thresholdTransactions",
    "start_date": "startDate",
    "transaction_count": "transactionCount",
    "transactions_amount": "transactionsAmount",
    "previous_transaction_count": "previousTransactionCount",
    "previous_transactions_amount": "previousTransactionsAmount",
    "calculated_tax_liability": "calculatedTaxLiability",
    "imported_tax_liability": "importedTaxLiability",
    "tax_liability": "taxLiability",
    "nexus_met": "nexusMet",
    "nexus_met_date": "nexusMetDate",
    "economic_nexus_met": "economicNexusMet",
    "economic_nexus_met_date": "economicNexusMetDate",
    "physical_nexus_met": "physicalNexusMet",
    "physical_nexus_met_date": "physicalNexusMetDate",
    "collected_tax_nexus_met": "collectedTaxNexusMet",
    "collected_tax_nexus_met_date": "collectedTaxNexusMetDate",
    "collected_tax_enabled": "collectedTaxEnabled",
    "period_model": "periodModel",
    "period_start_date": "periodStartDate",
    "period_end_date": "periodEndDate",
    "previous_period_start_date": "previousPeriodStartDate",
    "previous_period_end_date": "previousPeriodEndDate",
    "earliest_transaction_date": "earliestTransactionDate",
    "most_recent_transaction_date": "mostRecentTransactionDate",
    "earliest_collected_date": "earliestCollectedDate",
    "predicted_month_from_today": "predictedMonthFromToday",
    "vda_eligible": "vdaEligible",
    "confidence_level": "confidenceLevel",
    "last_processed_at": "lastProcessedAt",
    "last_tax_liability_processed_at": "lastTaxLiabilityProcessedAt",
    "created_at": "createdAt",
    "updated_at": "updatedAt",
    "organization_id": "organizationId",
    "registration_regime": "registrationRegime",
    "is_vda_eligible": "isVdaEligible",
    "nexus_type": "nexusType",
    "total_transactions": "totalTransactions",
    "total_transactions_included": "totalTransactionsIncluded",
    "total_transactions_exempted": "totalTransactionsExempted",
    "total_transactions_marketplace": "totalTransactionsMarketplace",
    "marketplace_included": "marketplaceIncluded",
  });
});

/** @internal */
export type NexusResponse$Outbound = {
  processing_status?: string | undefined;
  status?: string | undefined;
  country_code: string;
  state_code: string;
  state_name: string;
  treatment_of_exempt_transactions: string;
  trigger: string;
  sales_or_transactions: string;
  threshold_sales: number;
  threshold_transactions: number;
  start_date: string;
  transaction_count: number;
  transactions_amount: string;
  previous_transaction_count: number;
  previous_transactions_amount: string;
  calculated_tax_liability: string;
  imported_tax_liability: string;
  tax_liability: string;
  nexus_met: boolean;
  nexus_met_date?: string | undefined;
  economic_nexus_met: boolean;
  economic_nexus_met_date?: string | undefined;
  physical_nexus_met: boolean;
  physical_nexus_met_date?: string | undefined;
  collected_tax_nexus_met: boolean;
  collected_tax_nexus_met_date?: string | undefined;
  collected_tax_enabled: boolean;
  period_model: string;
  period_start_date: string;
  period_end_date: string;
  previous_period_start_date: string;
  previous_period_end_date: string;
  earliest_transaction_date?: string | undefined;
  most_recent_transaction_date?: string | undefined;
  earliest_collected_date: string;
  predicted_month_from_today?: number | undefined;
  vda_eligible: boolean;
  confidence_level?: number | undefined;
  last_processed_at?: string | undefined;
  last_tax_liability_processed_at?: string | undefined;
  periods?: Array<{ [k: string]: any }> | undefined;
  currency?: string | undefined;
  id: string;
  created_at: string;
  updated_at: string;
  organization_id: string;
  registration?: Registration$Outbound | undefined;
  registration_regime?: string | undefined;
  is_vda_eligible: boolean;
  nexus_type: string;
  total_transactions: number;
  total_transactions_included: number;
  total_transactions_exempted: number;
  total_transactions_marketplace: number;
  marketplace_included: boolean;
};

/** @internal */
export const NexusResponse$outboundSchema: z.ZodType<
  NexusResponse$Outbound,
  z.ZodTypeDef,
  NexusResponse
> = z.object({
  processingStatus: NexusStatusEnum$outboundSchema.optional(),
  status: NexusStateEnum$outboundSchema.optional(),
  countryCode: CountryCodeEnum$outboundSchema,
  stateCode: z.string(),
  stateName: z.string(),
  treatmentOfExemptTransactions: TreatmentEnum$outboundSchema,
  trigger: z.string(),
  salesOrTransactions: SalesOrTransactionsEnum$outboundSchema,
  thresholdSales: z.number().int(),
  thresholdTransactions: z.number().int(),
  startDate: z.instanceof(RFCDate).transform(v => v.toString()),
  transactionCount: z.number().int().default(0),
  transactionsAmount: z.string().default("0.00"),
  previousTransactionCount: z.number().int().default(0),
  previousTransactionsAmount: z.string().default("0.00"),
  calculatedTaxLiability: z.string().default("0.00"),
  importedTaxLiability: z.string().default("0.00"),
  taxLiability: z.string().default("0.00"),
  nexusMet: z.boolean().default(false),
  nexusMetDate: z.string().optional(),
  economicNexusMet: z.boolean().default(false),
  economicNexusMetDate: z.string().optional(),
  physicalNexusMet: z.boolean().default(false),
  physicalNexusMetDate: z.string().optional(),
  collectedTaxNexusMet: z.boolean().default(false),
  collectedTaxNexusMetDate: z.string().optional(),
  collectedTaxEnabled: z.boolean().default(false),
  periodModel: PeriodModelEnum$outboundSchema,
  periodStartDate: z.instanceof(RFCDate).transform(v => v.toString()),
  periodEndDate: z.instanceof(RFCDate).transform(v => v.toString()),
  previousPeriodStartDate: z.string(),
  previousPeriodEndDate: z.string(),
  earliestTransactionDate: z.string().optional(),
  mostRecentTransactionDate: z.string().optional(),
  earliestCollectedDate: z.date().default(() => new Date("2018-01-01T00:00:00"))
    .transform(v => v.toISOString()),
  predictedMonthFromToday: z.number().int().optional(),
  vdaEligible: z.boolean().default(false),
  confidenceLevel: z.number().optional(),
  lastProcessedAt: z.string().optional(),
  lastTaxLiabilityProcessedAt: z.string().optional(),
  periods: z.array(z.record(z.any())).optional(),
  currency: CurrencyEnum$outboundSchema.optional(),
  id: z.string(),
  createdAt: z.date().transform(v => v.toISOString()),
  updatedAt: z.date().transform(v => v.toISOString()),
  organizationId: z.string(),
  registration: z.lazy(() => Registration$outboundSchema).optional(),
  registrationRegime: RegistrationsRegimeEnum$outboundSchema.optional(),
  isVdaEligible: z.boolean(),
  nexusType: NexusTypeEnum$outboundSchema,
  totalTransactions: z.number().int(),
  totalTransactionsIncluded: z.number().int(),
  totalTransactionsExempted: z.number().int(),
  totalTransactionsMarketplace: z.number().int(),
  marketplaceIncluded: z.boolean(),
}).transform((v) => {
  return remap$(v, {
    processingStatus: "processing_status",
    countryCode: "country_code",
    stateCode: "state_code",
    stateName: "state_name",
    treatmentOfExemptTransactions: "treatment_of_exempt_transactions",
    salesOrTransactions: "sales_or_transactions",
    thresholdSales: "threshold_sales",
    thresholdTransactions: "threshold_transactions",
    startDate: "start_date",
    transactionCount: "transaction_count",
    transactionsAmount: "transactions_amount",
    previousTransactionCount: "previous_transaction_count",
    previousTransactionsAmount: "previous_transactions_amount",
    calculatedTaxLiability: "calculated_tax_liability",
    importedTaxLiability: "imported_tax_liability",
    taxLiability: "tax_liability",
    nexusMet: "nexus_met",
    nexusMetDate: "nexus_met_date",
    economicNexusMet: "economic_nexus_met",
    economicNexusMetDate: "economic_nexus_met_date",
    physicalNexusMet: "physical_nexus_met",
    physicalNexusMetDate: "physical_nexus_met_date",
    collectedTaxNexusMet: "collected_tax_nexus_met",
    collectedTaxNexusMetDate: "collected_tax_nexus_met_date",
    collectedTaxEnabled: "collected_tax_enabled",
    periodModel: "period_model",
    periodStartDate: "period_start_date",
    periodEndDate: "period_end_date",
    previousPeriodStartDate: "previous_period_start_date",
    previousPeriodEndDate: "previous_period_end_date",
    earliestTransactionDate: "earliest_transaction_date",
    mostRecentTransactionDate: "most_recent_transaction_date",
    earliestCollectedDate: "earliest_collected_date",
    predictedMonthFromToday: "predicted_month_from_today",
    vdaEligible: "vda_eligible",
    confidenceLevel: "confidence_level",
    lastProcessedAt: "last_processed_at",
    lastTaxLiabilityProcessedAt: "last_tax_liability_processed_at",
    createdAt: "created_at",
    updatedAt: "updated_at",
    organizationId: "organization_id",
    registrationRegime: "registration_regime",
    isVdaEligible: "is_vda_eligible",
    nexusType: "nexus_type",
    totalTransactions: "total_transactions",
    totalTransactionsIncluded: "total_transactions_included",
    totalTransactionsExempted: "total_transactions_exempted",
    totalTransactionsMarketplace: "total_transactions_marketplace",
    marketplaceIncluded: "marketplace_included",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NexusResponse$ {
  /** @deprecated use `NexusResponse$inboundSchema` instead. */
  export const inboundSchema = NexusResponse$inboundSchema;
  /** @deprecated use `NexusResponse$outboundSchema` instead. */
  export const outboundSchema = NexusResponse$outboundSchema;
  /** @deprecated use `NexusResponse$Outbound` instead. */
  export type Outbound = NexusResponse$Outbound;
}

export function nexusResponseToJSON(nexusResponse: NexusResponse): string {
  return JSON.stringify(NexusResponse$outboundSchema.parse(nexusResponse));
}

export function nexusResponseFromJSON(
  jsonString: string,
): SafeParseResult<NexusResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => NexusResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'NexusResponse' from JSON`,
  );
}
