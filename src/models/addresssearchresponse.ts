/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  AddressResponseData,
  AddressResponseData$inboundSchema,
  AddressResponseData$Outbound,
  AddressResponseData$outboundSchema,
} from "./addressresponsedata.js";
import {
  AddressSubmittedResponse,
  AddressSubmittedResponse$inboundSchema,
  AddressSubmittedResponse$Outbound,
  AddressSubmittedResponse$outboundSchema,
} from "./addresssubmittedresponse.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type AddressSearchResponse = {
  addressSubmitted: AddressSubmittedResponse;
  responseAddress: AddressResponseData;
  /**
   * Indicates if the address was VERIFIED, PARTIALLY_VERIFIED, INVALID, UNVERIFIABLE, BLANK
   */
  verificationStatus: string;
  /**
   * List of additional fields added to enrich the address
   */
  enrichFields: Array<string>;
};

/** @internal */
export const AddressSearchResponse$inboundSchema: z.ZodType<
  AddressSearchResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  address_submitted: AddressSubmittedResponse$inboundSchema,
  response_address: AddressResponseData$inboundSchema,
  verification_status: z.string(),
  enrich_fields: z.array(z.string()),
}).transform((v) => {
  return remap$(v, {
    "address_submitted": "addressSubmitted",
    "response_address": "responseAddress",
    "verification_status": "verificationStatus",
    "enrich_fields": "enrichFields",
  });
});

/** @internal */
export type AddressSearchResponse$Outbound = {
  address_submitted: AddressSubmittedResponse$Outbound;
  response_address: AddressResponseData$Outbound;
  verification_status: string;
  enrich_fields: Array<string>;
};

/** @internal */
export const AddressSearchResponse$outboundSchema: z.ZodType<
  AddressSearchResponse$Outbound,
  z.ZodTypeDef,
  AddressSearchResponse
> = z.object({
  addressSubmitted: AddressSubmittedResponse$outboundSchema,
  responseAddress: AddressResponseData$outboundSchema,
  verificationStatus: z.string(),
  enrichFields: z.array(z.string()),
}).transform((v) => {
  return remap$(v, {
    addressSubmitted: "address_submitted",
    responseAddress: "response_address",
    verificationStatus: "verification_status",
    enrichFields: "enrich_fields",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AddressSearchResponse$ {
  /** @deprecated use `AddressSearchResponse$inboundSchema` instead. */
  export const inboundSchema = AddressSearchResponse$inboundSchema;
  /** @deprecated use `AddressSearchResponse$outboundSchema` instead. */
  export const outboundSchema = AddressSearchResponse$outboundSchema;
  /** @deprecated use `AddressSearchResponse$Outbound` instead. */
  export type Outbound = AddressSearchResponse$Outbound;
}

export function addressSearchResponseToJSON(
  addressSearchResponse: AddressSearchResponse,
): string {
  return JSON.stringify(
    AddressSearchResponse$outboundSchema.parse(addressSearchResponse),
  );
}

export function addressSearchResponseFromJSON(
  jsonString: string,
): SafeParseResult<AddressSearchResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AddressSearchResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AddressSearchResponse' from JSON`,
  );
}
