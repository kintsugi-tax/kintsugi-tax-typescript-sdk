/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  ProductCategoryEnum,
  ProductCategoryEnum$inboundSchema,
  ProductCategoryEnum$outboundSchema,
} from "./productcategoryenum.js";
import {
  ProductSubCategoryEnum,
  ProductSubCategoryEnum$inboundSchema,
  ProductSubCategoryEnum$outboundSchema,
} from "./productsubcategoryenum.js";
import {
  SourceEnum,
  SourceEnum$inboundSchema,
  SourceEnum$outboundSchema,
} from "./sourceenum.js";
import {
  TaxExemptionEnum,
  TaxExemptionEnum$inboundSchema,
  TaxExemptionEnum$outboundSchema,
} from "./taxexemptionenum.js";
import {
  TaxItemEstimate,
  TaxItemEstimate$inboundSchema,
  TaxItemEstimate$Outbound,
  TaxItemEstimate$outboundSchema,
} from "./taxitemestimate.js";

export type TransactionItemEstimateResponse = {
  /**
   * A unique identifier for the transaction item.
   */
  externalId?: string | null | undefined;
  /**
   * The date of the transaction item.
   */
  date: Date;
  /**
   * A description of the item.
   */
  description?: string | null | undefined;
  /**
   * External product identifier. If not found and product_subcategory
   *
   * @remarks
   *         and product_category are not provided, an error occurs.
   */
  externalProductId?: string | null | undefined;
  /**
   * Name of the product. Used if creating a new product.
   */
  productName?: string | null | undefined;
  /**
   * Description of the product. Used if creating a new product.
   */
  productDescription?: string | null | undefined;
  productSource?: SourceEnum | null | undefined;
  /**
   * Subcategory of the product. Required if product_category is used
   *
   * @remarks
   *         in place of external_product_id.
   */
  productSubcategory?: ProductSubCategoryEnum | null | undefined;
  /**
   * Category of the product. Required if product_subcategory is used
   *
   * @remarks
   *         in place of external_product_id.
   */
  productCategory?: ProductCategoryEnum | null | undefined;
  /**
   * Defaults to 1.0. The quantity of the item.
   */
  quantity?: string | undefined;
  /**
   * The total amount of the item.
   */
  amount: string;
  /**
   * Indicates whether the transaction item is exempt from tax.
   */
  exempt?: boolean | undefined;
  /**
   * The total tax amount for the transaction item.
   */
  taxAmount?: string | undefined;
  /**
   * The taxable amount for the transaction item.
   */
  taxableAmount?: string | undefined;
  /**
   * The tax rate applied to the transaction item.
   */
  taxRate?: string | undefined;
  /**
   * Reason for exemption, if applicable.
   */
  exemptReason?: TaxExemptionEnum | null | undefined;
  /**
   * List of tax items applied to the transaction item.
   */
  taxItems?: Array<TaxItemEstimate> | undefined;
};

/** @internal */
export const TransactionItemEstimateResponse$inboundSchema: z.ZodType<
  TransactionItemEstimateResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  external_id: z.nullable(z.string()).optional(),
  date: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  description: z.nullable(z.string()).optional(),
  external_product_id: z.nullable(z.string()).optional(),
  product_name: z.nullable(z.string()).optional(),
  product_description: z.nullable(z.string()).optional(),
  product_source: z.nullable(SourceEnum$inboundSchema).optional(),
  product_subcategory: z.nullable(ProductSubCategoryEnum$inboundSchema)
    .optional(),
  product_category: z.nullable(ProductCategoryEnum$inboundSchema).optional(),
  quantity: z.string().default("1.0"),
  amount: z.string(),
  exempt: z.boolean().default(false),
  tax_amount: z.string().default("0.00"),
  taxable_amount: z.string().default("0.00"),
  tax_rate: z.string().default("0.00"),
  exempt_reason: z.nullable(TaxExemptionEnum$inboundSchema).optional(),
  tax_items: z.array(TaxItemEstimate$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "external_id": "externalId",
    "external_product_id": "externalProductId",
    "product_name": "productName",
    "product_description": "productDescription",
    "product_source": "productSource",
    "product_subcategory": "productSubcategory",
    "product_category": "productCategory",
    "tax_amount": "taxAmount",
    "taxable_amount": "taxableAmount",
    "tax_rate": "taxRate",
    "exempt_reason": "exemptReason",
    "tax_items": "taxItems",
  });
});

/** @internal */
export type TransactionItemEstimateResponse$Outbound = {
  external_id?: string | null | undefined;
  date: string;
  description?: string | null | undefined;
  external_product_id?: string | null | undefined;
  product_name?: string | null | undefined;
  product_description?: string | null | undefined;
  product_source?: string | null | undefined;
  product_subcategory?: string | null | undefined;
  product_category?: string | null | undefined;
  quantity: string;
  amount: string;
  exempt: boolean;
  tax_amount: string;
  taxable_amount: string;
  tax_rate: string;
  exempt_reason?: string | null | undefined;
  tax_items?: Array<TaxItemEstimate$Outbound> | undefined;
};

/** @internal */
export const TransactionItemEstimateResponse$outboundSchema: z.ZodType<
  TransactionItemEstimateResponse$Outbound,
  z.ZodTypeDef,
  TransactionItemEstimateResponse
> = z.object({
  externalId: z.nullable(z.string()).optional(),
  date: z.date().transform(v => v.toISOString()),
  description: z.nullable(z.string()).optional(),
  externalProductId: z.nullable(z.string()).optional(),
  productName: z.nullable(z.string()).optional(),
  productDescription: z.nullable(z.string()).optional(),
  productSource: z.nullable(SourceEnum$outboundSchema).optional(),
  productSubcategory: z.nullable(ProductSubCategoryEnum$outboundSchema)
    .optional(),
  productCategory: z.nullable(ProductCategoryEnum$outboundSchema).optional(),
  quantity: z.string().default("1.0"),
  amount: z.string(),
  exempt: z.boolean().default(false),
  taxAmount: z.string().default("0.00"),
  taxableAmount: z.string().default("0.00"),
  taxRate: z.string().default("0.00"),
  exemptReason: z.nullable(TaxExemptionEnum$outboundSchema).optional(),
  taxItems: z.array(TaxItemEstimate$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    externalId: "external_id",
    externalProductId: "external_product_id",
    productName: "product_name",
    productDescription: "product_description",
    productSource: "product_source",
    productSubcategory: "product_subcategory",
    productCategory: "product_category",
    taxAmount: "tax_amount",
    taxableAmount: "taxable_amount",
    taxRate: "tax_rate",
    exemptReason: "exempt_reason",
    taxItems: "tax_items",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionItemEstimateResponse$ {
  /** @deprecated use `TransactionItemEstimateResponse$inboundSchema` instead. */
  export const inboundSchema = TransactionItemEstimateResponse$inboundSchema;
  /** @deprecated use `TransactionItemEstimateResponse$outboundSchema` instead. */
  export const outboundSchema = TransactionItemEstimateResponse$outboundSchema;
  /** @deprecated use `TransactionItemEstimateResponse$Outbound` instead. */
  export type Outbound = TransactionItemEstimateResponse$Outbound;
}

export function transactionItemEstimateResponseToJSON(
  transactionItemEstimateResponse: TransactionItemEstimateResponse,
): string {
  return JSON.stringify(
    TransactionItemEstimateResponse$outboundSchema.parse(
      transactionItemEstimateResponse,
    ),
  );
}

export function transactionItemEstimateResponseFromJSON(
  jsonString: string,
): SafeParseResult<TransactionItemEstimateResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TransactionItemEstimateResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TransactionItemEstimateResponse' from JSON`,
  );
}
