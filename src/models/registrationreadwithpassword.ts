/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  ChangeRegimeStatusEnum,
  ChangeRegimeStatusEnum$inboundSchema,
  ChangeRegimeStatusEnum$outboundSchema,
} from "./changeregimestatusenum.js";
import {
  CountryCodeEnum,
  CountryCodeEnum$inboundSchema,
  CountryCodeEnum$outboundSchema,
} from "./countrycodeenum.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  FilingFrequencyEnum,
  FilingFrequencyEnum$inboundSchema,
  FilingFrequencyEnum$outboundSchema,
} from "./filingfrequencyenum.js";
import {
  OssTypeEnum,
  OssTypeEnum$inboundSchema,
  OssTypeEnum$outboundSchema,
} from "./osstypeenum.js";
import {
  RegistrationsRegimeEnum,
  RegistrationsRegimeEnum$inboundSchema,
  RegistrationsRegimeEnum$outboundSchema,
} from "./registrationsregimeenum.js";
import {
  RegistrationStatusEnum,
  RegistrationStatusEnum$inboundSchema,
  RegistrationStatusEnum$outboundSchema,
} from "./registrationstatusenum.js";
import {
  RegistrationTypeEnum,
  RegistrationTypeEnum$inboundSchema,
  RegistrationTypeEnum$outboundSchema,
} from "./registrationtypeenum.js";

export type RegistrationReadWithPassword = {
  /**
   * The date when the registration was created. Format: YYYY-MM-DD.
   */
  registrationDate?: string | undefined;
  /**
   * Email address associated with the registration.
   */
  registrationEmail?: string | undefined;
  /**
   * A unique key assigned to the registration.
   */
  registrationKey?: string | undefined;
  /**
   * A unique key assigned for deregistration.
   */
  deregistrationKey?: string | undefined;
  /**
   * Timestamp when the registration was requested.
   */
  registrationRequested?: string | undefined;
  /**
   * Timestamp when the registration was completed.
   */
  registrationCompleted?: string | undefined;
  /**
   * Timestamp when deregistration was requested.
   */
  deregistrationRequested?: string | undefined;
  /**
   * Timestamp when the deregistration was completed.
   */
  deregistrationCompleted?: string | undefined;
  /**
   * Indicates whether the registration was completed automatically.
   */
  autoRegistered?: boolean | undefined;
  registrationsRegime?: RegistrationsRegimeEnum | undefined;
  changeRegimeStatus?: ChangeRegimeStatusEnum | undefined;
  /**
   * Indicates whether third-party access is enabled for this registration.
   */
  thirdPartyEnabled?: boolean | undefined;
  /**
   * Indicates whether the  registration is marked as collecting in shopify
   */
  markedCollecting?: boolean | undefined;
  status: RegistrationStatusEnum;
  countryCode: CountryCodeEnum;
  /**
   * The state/province code where the registration applies.
   */
  stateCode: string;
  /**
   * The name of the state/province.
   */
  stateName: string;
  filingFrequency: FilingFrequencyEnum;
  /**
   * The number of days before the filing deadline.
   */
  filingDays: number;
  /**
   * Username for accessing tax registration details.
   */
  username?: string | undefined;
  /**
   * Additional comments related to the registration.
   */
  comment?: string | undefined;
  /**
   * The date from which filings should be created.
   *
   * @remarks
   *         should start (YYYY-MM-DD).
   */
  createFilingsFrom?: string | undefined;
  /**
   * Indicates whether an initial synchronization should be performed.
   */
  initialSync?: boolean | undefined;
  /**
   * The amount of fees associated with the registration.
   */
  amountFees?: string | undefined;
  /**
   * Indicates whether a Voluntary Disclosure Agreement (VDA) applies.
   */
  vda?: boolean | undefined;
  /**
   * Whether the registration was imported from another system.
   */
  imported?: boolean | undefined;
  /**
   * The sales tax ID associated with the registration.
   */
  salesTaxId?: string | undefined;
  /**
   * Indicates whether the registration is an SST Import.
   */
  sstImport?: boolean | undefined;
  /**
   * Type of OSS registration.
   */
  ossType?: OssTypeEnum | undefined;
  ossMemberStateOfIdentificationCode?: CountryCodeEnum | undefined;
  /**
   * The date when the registration was marked as collecting.
   */
  markedCollectingDate?: string | undefined;
  /**
   * Indicates whether the registration needs to be marked as collecting.
   */
  needsMarkAsCollecting?: boolean | undefined;
  /**
   * The unique identifier for the registration.
   */
  id: string;
  creditsTotalAvailable?: string | undefined;
  /**
   * Encrypted password for accessing the registration,
   *
   * @remarks
   *         if applicable.
   */
  passwordEncrypted?: string | undefined;
  /**
   * Indicates if all required credentials are present.
   */
  hasAllCredentials?: boolean | undefined;
  registrationType: RegistrationTypeEnum;
};

/** @internal */
export const RegistrationReadWithPassword$inboundSchema: z.ZodType<
  RegistrationReadWithPassword,
  z.ZodTypeDef,
  unknown
> = z.object({
  registration_date: z.string().optional(),
  registration_email: z.string().optional(),
  registration_key: z.string().optional(),
  deregistration_key: z.string().optional(),
  registration_requested: z.string().optional(),
  registration_completed: z.string().optional(),
  deregistration_requested: z.string().optional(),
  deregistration_completed: z.string().optional(),
  auto_registered: z.boolean().default(false),
  registrations_regime: RegistrationsRegimeEnum$inboundSchema.optional(),
  change_regime_status: ChangeRegimeStatusEnum$inboundSchema.optional(),
  third_party_enabled: z.boolean().default(false),
  marked_collecting: z.boolean().optional(),
  status: RegistrationStatusEnum$inboundSchema,
  country_code: CountryCodeEnum$inboundSchema,
  state_code: z.string(),
  state_name: z.string(),
  filing_frequency: FilingFrequencyEnum$inboundSchema,
  filing_days: z.number().int(),
  username: z.string().optional(),
  comment: z.string().optional(),
  create_filings_from: z.string().optional(),
  initial_sync: z.boolean().default(false),
  amount_fees: z.string().default("0.00"),
  vda: z.boolean().default(false),
  imported: z.boolean().optional(),
  sales_tax_id: z.string().optional(),
  sst_import: z.boolean().default(false),
  oss_type: OssTypeEnum$inboundSchema.optional(),
  oss_member_state_of_identification_code: CountryCodeEnum$inboundSchema
    .optional(),
  marked_collecting_date: z.string().optional(),
  needs_mark_as_collecting: z.boolean().default(false),
  id: z.string(),
  credits_total_available: z.string().default("0.00"),
  password_encrypted: z.string().optional(),
  has_all_credentials: z.boolean().default(false),
  registration_type: RegistrationTypeEnum$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "registration_date": "registrationDate",
    "registration_email": "registrationEmail",
    "registration_key": "registrationKey",
    "deregistration_key": "deregistrationKey",
    "registration_requested": "registrationRequested",
    "registration_completed": "registrationCompleted",
    "deregistration_requested": "deregistrationRequested",
    "deregistration_completed": "deregistrationCompleted",
    "auto_registered": "autoRegistered",
    "registrations_regime": "registrationsRegime",
    "change_regime_status": "changeRegimeStatus",
    "third_party_enabled": "thirdPartyEnabled",
    "marked_collecting": "markedCollecting",
    "country_code": "countryCode",
    "state_code": "stateCode",
    "state_name": "stateName",
    "filing_frequency": "filingFrequency",
    "filing_days": "filingDays",
    "create_filings_from": "createFilingsFrom",
    "initial_sync": "initialSync",
    "amount_fees": "amountFees",
    "sales_tax_id": "salesTaxId",
    "sst_import": "sstImport",
    "oss_type": "ossType",
    "oss_member_state_of_identification_code":
      "ossMemberStateOfIdentificationCode",
    "marked_collecting_date": "markedCollectingDate",
    "needs_mark_as_collecting": "needsMarkAsCollecting",
    "credits_total_available": "creditsTotalAvailable",
    "password_encrypted": "passwordEncrypted",
    "has_all_credentials": "hasAllCredentials",
    "registration_type": "registrationType",
  });
});

/** @internal */
export type RegistrationReadWithPassword$Outbound = {
  registration_date?: string | undefined;
  registration_email?: string | undefined;
  registration_key?: string | undefined;
  deregistration_key?: string | undefined;
  registration_requested?: string | undefined;
  registration_completed?: string | undefined;
  deregistration_requested?: string | undefined;
  deregistration_completed?: string | undefined;
  auto_registered: boolean;
  registrations_regime?: string | undefined;
  change_regime_status?: string | undefined;
  third_party_enabled: boolean;
  marked_collecting?: boolean | undefined;
  status: string;
  country_code: string;
  state_code: string;
  state_name: string;
  filing_frequency: string;
  filing_days: number;
  username?: string | undefined;
  comment?: string | undefined;
  create_filings_from?: string | undefined;
  initial_sync: boolean;
  amount_fees: string;
  vda: boolean;
  imported?: boolean | undefined;
  sales_tax_id?: string | undefined;
  sst_import: boolean;
  oss_type?: string | undefined;
  oss_member_state_of_identification_code?: string | undefined;
  marked_collecting_date?: string | undefined;
  needs_mark_as_collecting: boolean;
  id: string;
  credits_total_available: string;
  password_encrypted?: string | undefined;
  has_all_credentials: boolean;
  registration_type: string;
};

/** @internal */
export const RegistrationReadWithPassword$outboundSchema: z.ZodType<
  RegistrationReadWithPassword$Outbound,
  z.ZodTypeDef,
  RegistrationReadWithPassword
> = z.object({
  registrationDate: z.string().optional(),
  registrationEmail: z.string().optional(),
  registrationKey: z.string().optional(),
  deregistrationKey: z.string().optional(),
  registrationRequested: z.string().optional(),
  registrationCompleted: z.string().optional(),
  deregistrationRequested: z.string().optional(),
  deregistrationCompleted: z.string().optional(),
  autoRegistered: z.boolean().default(false),
  registrationsRegime: RegistrationsRegimeEnum$outboundSchema.optional(),
  changeRegimeStatus: ChangeRegimeStatusEnum$outboundSchema.optional(),
  thirdPartyEnabled: z.boolean().default(false),
  markedCollecting: z.boolean().optional(),
  status: RegistrationStatusEnum$outboundSchema,
  countryCode: CountryCodeEnum$outboundSchema,
  stateCode: z.string(),
  stateName: z.string(),
  filingFrequency: FilingFrequencyEnum$outboundSchema,
  filingDays: z.number().int(),
  username: z.string().optional(),
  comment: z.string().optional(),
  createFilingsFrom: z.string().optional(),
  initialSync: z.boolean().default(false),
  amountFees: z.string().default("0.00"),
  vda: z.boolean().default(false),
  imported: z.boolean().optional(),
  salesTaxId: z.string().optional(),
  sstImport: z.boolean().default(false),
  ossType: OssTypeEnum$outboundSchema.optional(),
  ossMemberStateOfIdentificationCode: CountryCodeEnum$outboundSchema.optional(),
  markedCollectingDate: z.string().optional(),
  needsMarkAsCollecting: z.boolean().default(false),
  id: z.string(),
  creditsTotalAvailable: z.string().default("0.00"),
  passwordEncrypted: z.string().optional(),
  hasAllCredentials: z.boolean().default(false),
  registrationType: RegistrationTypeEnum$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    registrationDate: "registration_date",
    registrationEmail: "registration_email",
    registrationKey: "registration_key",
    deregistrationKey: "deregistration_key",
    registrationRequested: "registration_requested",
    registrationCompleted: "registration_completed",
    deregistrationRequested: "deregistration_requested",
    deregistrationCompleted: "deregistration_completed",
    autoRegistered: "auto_registered",
    registrationsRegime: "registrations_regime",
    changeRegimeStatus: "change_regime_status",
    thirdPartyEnabled: "third_party_enabled",
    markedCollecting: "marked_collecting",
    countryCode: "country_code",
    stateCode: "state_code",
    stateName: "state_name",
    filingFrequency: "filing_frequency",
    filingDays: "filing_days",
    createFilingsFrom: "create_filings_from",
    initialSync: "initial_sync",
    amountFees: "amount_fees",
    salesTaxId: "sales_tax_id",
    sstImport: "sst_import",
    ossType: "oss_type",
    ossMemberStateOfIdentificationCode:
      "oss_member_state_of_identification_code",
    markedCollectingDate: "marked_collecting_date",
    needsMarkAsCollecting: "needs_mark_as_collecting",
    creditsTotalAvailable: "credits_total_available",
    passwordEncrypted: "password_encrypted",
    hasAllCredentials: "has_all_credentials",
    registrationType: "registration_type",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RegistrationReadWithPassword$ {
  /** @deprecated use `RegistrationReadWithPassword$inboundSchema` instead. */
  export const inboundSchema = RegistrationReadWithPassword$inboundSchema;
  /** @deprecated use `RegistrationReadWithPassword$outboundSchema` instead. */
  export const outboundSchema = RegistrationReadWithPassword$outboundSchema;
  /** @deprecated use `RegistrationReadWithPassword$Outbound` instead. */
  export type Outbound = RegistrationReadWithPassword$Outbound;
}

export function registrationReadWithPasswordToJSON(
  registrationReadWithPassword: RegistrationReadWithPassword,
): string {
  return JSON.stringify(
    RegistrationReadWithPassword$outboundSchema.parse(
      registrationReadWithPassword,
    ),
  );
}

export function registrationReadWithPasswordFromJSON(
  jsonString: string,
): SafeParseResult<RegistrationReadWithPassword, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RegistrationReadWithPassword$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RegistrationReadWithPassword' from JSON`,
  );
}
