/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  CurrencyEnum,
  CurrencyEnum$inboundSchema,
  CurrencyEnum$outboundSchema,
} from "./currencyenum.js";
import {
  CustomerBase,
  CustomerBase$inboundSchema,
  CustomerBase$Outbound,
  CustomerBase$outboundSchema,
} from "./customerbase.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  SourceEnum,
  SourceEnum$inboundSchema,
  SourceEnum$outboundSchema,
} from "./sourceenum.js";
import {
  TransactionItemEstimateResponse,
  TransactionItemEstimateResponse$inboundSchema,
  TransactionItemEstimateResponse$Outbound,
  TransactionItemEstimateResponse$outboundSchema,
} from "./transactionitemestimateresponse.js";

/**
 * Type of the address. Must be either
 *
 * @remarks
 *                         SHIP_TO or BILL_TO.
 */
export const TransactionEstimateResponseType = {
  ShipTo: "SHIP_TO",
  BillTo: "BILL_TO",
} as const;
/**
 * Type of the address. Must be either
 *
 * @remarks
 *                         SHIP_TO or BILL_TO.
 */
export type TransactionEstimateResponseType = ClosedEnum<
  typeof TransactionEstimateResponseType
>;

export type TransactionEstimateResponseAddress = {
  /**
   * Type of the address. Must be either
   *
   * @remarks
   *                         SHIP_TO or BILL_TO.
   */
  type: TransactionEstimateResponseType;
  /**
   * Phone number associated with the customer.
   */
  phone?: string | undefined;
  /**
   * Primary street address of the customer.
   */
  street1?: string | undefined;
  /**
   * Additional street address details, such as an apartment or suite number.
   */
  street2?: string | undefined;
  /**
   * City where the customer resides.
   */
  city?: string | undefined;
  /**
   * County or district of the customer.
   */
  county?: string | undefined;
  /**
   * State or province of the address.
   */
  state: string;
  /**
   * Postal code of the address.
   */
  postalCode: string;
  /**
   * Country of the address.
   */
  country: string;
  /**
   * Complete address string of the customer, which can be used as an alternative to individual fields.
   */
  fullAddress?: string | undefined;
  /**
   * Status of the address. Deprecated and ignored.
   *
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  status?: string | undefined;
  /**
   * Additional enriched fields related to the address.
   */
  enrichedFields?: string | undefined;
};

export type TransactionEstimateResponse = {
  /**
   * The date of the transaction in ISO 8601 format (e.g., 2025-01-25T12:00:00Z).
   */
  date: Date;
  /**
   * Unique identifier of this transaction in the source system.
   */
  externalId: string;
  /**
   * Total amount of the transaction.
   */
  totalAmount?: string | undefined;
  currency: CurrencyEnum;
  /**
   * An optional description of the transaction.
   */
  description?: string | undefined;
  source?: SourceEnum | undefined;
  /**
   * Indicates if the transaction involves a marketplace.
   */
  marketplace?: boolean | undefined;
  transactionItems: Array<TransactionItemEstimateResponse>;
  customer?: CustomerBase | undefined;
  /**
   * List of addresses related to the transaction. At least one BILL_TO or SHIP_TO address must be provided. The address will be validated during estimation, and the transaction may be rejected if the address does not pass validation. The SHIP_TO will be preferred to use for determining tax liability. **Deprecated:** Use of `address.status` in estimate api is ignored and will be removed in the future status will be considered UNVERIFIED by default and always validated
   */
  addresses: Array<TransactionEstimateResponseAddress>;
  /**
   * The total amount of tax determined for the transaction.
   */
  totalTaxAmountCalculated?: string | undefined;
  /**
   * The taxable amount for the transaction.
   */
  taxableAmount?: string | undefined;
  /**
   * The calculated tax rate for the transaction.
   */
  taxRateCalculated?: string | undefined;
  /**
   * Indicates if nexus was met for the transaction.**Deprecated:** Use `has_active_registration` instead.
   *
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  nexusMet?: boolean | undefined;
  /**
   * Indicates if there is an active registration for the transaction.
   */
  hasActiveRegistration?: boolean | undefined;
};

/** @internal */
export const TransactionEstimateResponseType$inboundSchema: z.ZodNativeEnum<
  typeof TransactionEstimateResponseType
> = z.nativeEnum(TransactionEstimateResponseType);

/** @internal */
export const TransactionEstimateResponseType$outboundSchema: z.ZodNativeEnum<
  typeof TransactionEstimateResponseType
> = TransactionEstimateResponseType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionEstimateResponseType$ {
  /** @deprecated use `TransactionEstimateResponseType$inboundSchema` instead. */
  export const inboundSchema = TransactionEstimateResponseType$inboundSchema;
  /** @deprecated use `TransactionEstimateResponseType$outboundSchema` instead. */
  export const outboundSchema = TransactionEstimateResponseType$outboundSchema;
}

/** @internal */
export const TransactionEstimateResponseAddress$inboundSchema: z.ZodType<
  TransactionEstimateResponseAddress,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: TransactionEstimateResponseType$inboundSchema,
  phone: z.string().optional(),
  street_1: z.string().optional(),
  street_2: z.string().optional(),
  city: z.string().optional(),
  county: z.string().optional(),
  state: z.string(),
  postal_code: z.string(),
  country: z.string(),
  full_address: z.string().optional(),
  status: z.string().optional(),
  enriched_fields: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "street_1": "street1",
    "street_2": "street2",
    "postal_code": "postalCode",
    "full_address": "fullAddress",
    "enriched_fields": "enrichedFields",
  });
});

/** @internal */
export type TransactionEstimateResponseAddress$Outbound = {
  type: string;
  phone?: string | undefined;
  street_1?: string | undefined;
  street_2?: string | undefined;
  city?: string | undefined;
  county?: string | undefined;
  state: string;
  postal_code: string;
  country: string;
  full_address?: string | undefined;
  status?: string | undefined;
  enriched_fields?: string | undefined;
};

/** @internal */
export const TransactionEstimateResponseAddress$outboundSchema: z.ZodType<
  TransactionEstimateResponseAddress$Outbound,
  z.ZodTypeDef,
  TransactionEstimateResponseAddress
> = z.object({
  type: TransactionEstimateResponseType$outboundSchema,
  phone: z.string().optional(),
  street1: z.string().optional(),
  street2: z.string().optional(),
  city: z.string().optional(),
  county: z.string().optional(),
  state: z.string(),
  postalCode: z.string(),
  country: z.string(),
  fullAddress: z.string().optional(),
  status: z.string().optional(),
  enrichedFields: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    street1: "street_1",
    street2: "street_2",
    postalCode: "postal_code",
    fullAddress: "full_address",
    enrichedFields: "enriched_fields",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionEstimateResponseAddress$ {
  /** @deprecated use `TransactionEstimateResponseAddress$inboundSchema` instead. */
  export const inboundSchema = TransactionEstimateResponseAddress$inboundSchema;
  /** @deprecated use `TransactionEstimateResponseAddress$outboundSchema` instead. */
  export const outboundSchema =
    TransactionEstimateResponseAddress$outboundSchema;
  /** @deprecated use `TransactionEstimateResponseAddress$Outbound` instead. */
  export type Outbound = TransactionEstimateResponseAddress$Outbound;
}

export function transactionEstimateResponseAddressToJSON(
  transactionEstimateResponseAddress: TransactionEstimateResponseAddress,
): string {
  return JSON.stringify(
    TransactionEstimateResponseAddress$outboundSchema.parse(
      transactionEstimateResponseAddress,
    ),
  );
}

export function transactionEstimateResponseAddressFromJSON(
  jsonString: string,
): SafeParseResult<TransactionEstimateResponseAddress, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      TransactionEstimateResponseAddress$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TransactionEstimateResponseAddress' from JSON`,
  );
}

/** @internal */
export const TransactionEstimateResponse$inboundSchema: z.ZodType<
  TransactionEstimateResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  date: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  external_id: z.string(),
  total_amount: z.string().default("0.0"),
  currency: CurrencyEnum$inboundSchema,
  description: z.string().optional(),
  source: SourceEnum$inboundSchema.optional(),
  marketplace: z.boolean().default(false),
  transaction_items: z.array(TransactionItemEstimateResponse$inboundSchema),
  customer: CustomerBase$inboundSchema.optional(),
  addresses: z.array(
    z.lazy(() => TransactionEstimateResponseAddress$inboundSchema),
  ),
  total_tax_amount_calculated: z.string().default("0.00"),
  taxable_amount: z.string().default("0.00"),
  tax_rate_calculated: z.string().default("0.00"),
  nexus_met: z.boolean().default(false),
  has_active_registration: z.boolean().default(false),
}).transform((v) => {
  return remap$(v, {
    "external_id": "externalId",
    "total_amount": "totalAmount",
    "transaction_items": "transactionItems",
    "total_tax_amount_calculated": "totalTaxAmountCalculated",
    "taxable_amount": "taxableAmount",
    "tax_rate_calculated": "taxRateCalculated",
    "nexus_met": "nexusMet",
    "has_active_registration": "hasActiveRegistration",
  });
});

/** @internal */
export type TransactionEstimateResponse$Outbound = {
  date: string;
  external_id: string;
  total_amount: string;
  currency: string;
  description?: string | undefined;
  source?: string | undefined;
  marketplace: boolean;
  transaction_items: Array<TransactionItemEstimateResponse$Outbound>;
  customer?: CustomerBase$Outbound | undefined;
  addresses: Array<TransactionEstimateResponseAddress$Outbound>;
  total_tax_amount_calculated: string;
  taxable_amount: string;
  tax_rate_calculated: string;
  nexus_met: boolean;
  has_active_registration: boolean;
};

/** @internal */
export const TransactionEstimateResponse$outboundSchema: z.ZodType<
  TransactionEstimateResponse$Outbound,
  z.ZodTypeDef,
  TransactionEstimateResponse
> = z.object({
  date: z.date().transform(v => v.toISOString()),
  externalId: z.string(),
  totalAmount: z.string().default("0.0"),
  currency: CurrencyEnum$outboundSchema,
  description: z.string().optional(),
  source: SourceEnum$outboundSchema.optional(),
  marketplace: z.boolean().default(false),
  transactionItems: z.array(TransactionItemEstimateResponse$outboundSchema),
  customer: CustomerBase$outboundSchema.optional(),
  addresses: z.array(
    z.lazy(() => TransactionEstimateResponseAddress$outboundSchema),
  ),
  totalTaxAmountCalculated: z.string().default("0.00"),
  taxableAmount: z.string().default("0.00"),
  taxRateCalculated: z.string().default("0.00"),
  nexusMet: z.boolean().default(false),
  hasActiveRegistration: z.boolean().default(false),
}).transform((v) => {
  return remap$(v, {
    externalId: "external_id",
    totalAmount: "total_amount",
    transactionItems: "transaction_items",
    totalTaxAmountCalculated: "total_tax_amount_calculated",
    taxableAmount: "taxable_amount",
    taxRateCalculated: "tax_rate_calculated",
    nexusMet: "nexus_met",
    hasActiveRegistration: "has_active_registration",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionEstimateResponse$ {
  /** @deprecated use `TransactionEstimateResponse$inboundSchema` instead. */
  export const inboundSchema = TransactionEstimateResponse$inboundSchema;
  /** @deprecated use `TransactionEstimateResponse$outboundSchema` instead. */
  export const outboundSchema = TransactionEstimateResponse$outboundSchema;
  /** @deprecated use `TransactionEstimateResponse$Outbound` instead. */
  export type Outbound = TransactionEstimateResponse$Outbound;
}

export function transactionEstimateResponseToJSON(
  transactionEstimateResponse: TransactionEstimateResponse,
): string {
  return JSON.stringify(
    TransactionEstimateResponse$outboundSchema.parse(
      transactionEstimateResponse,
    ),
  );
}

export function transactionEstimateResponseFromJSON(
  jsonString: string,
): SafeParseResult<TransactionEstimateResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TransactionEstimateResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TransactionEstimateResponse' from JSON`,
  );
}
