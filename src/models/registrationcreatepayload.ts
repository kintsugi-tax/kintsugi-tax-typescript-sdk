/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  ChangeRegimeStatusEnum,
  ChangeRegimeStatusEnum$inboundSchema,
  ChangeRegimeStatusEnum$outboundSchema,
} from "./changeregimestatusenum.js";
import {
  CountryCodeEnum,
  CountryCodeEnum$inboundSchema,
  CountryCodeEnum$outboundSchema,
} from "./countrycodeenum.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  FilingFrequencyEnum,
  FilingFrequencyEnum$inboundSchema,
  FilingFrequencyEnum$outboundSchema,
} from "./filingfrequencyenum.js";
import {
  RegistrationsRegimeEnum,
  RegistrationsRegimeEnum$inboundSchema,
  RegistrationsRegimeEnum$outboundSchema,
} from "./registrationsregimeenum.js";

export type RegistrationCreatePayload = {
  /**
   * Specifies this is a regular jurisdiction registration import.
   */
  registrationImportType?: string | undefined;
  /**
   * The date when the registration was created. Format: YYYY-MM-DD.
   */
  registrationDate?: string | undefined;
  /**
   * Email address associated with the registration.
   */
  registrationEmail?: string | undefined;
  /**
   * A unique key assigned to the registration.
   */
  registrationKey?: string | undefined;
  /**
   * A unique key assigned for deregistration.
   */
  deregistrationKey?: string | undefined;
  /**
   * Timestamp when the registration was requested.
   */
  registrationRequested?: string | undefined;
  /**
   * Timestamp when the registration was completed.
   */
  registrationCompleted?: string | undefined;
  /**
   * Timestamp when deregistration was requested.
   */
  deregistrationRequested?: string | undefined;
  /**
   * Timestamp when the deregistration was completed.
   */
  deregistrationCompleted?: string | undefined;
  /**
   * Indicates whether the registration was completed automatically.
   */
  autoRegistered?: boolean | undefined;
  registrationsRegime?: RegistrationsRegimeEnum | undefined;
  changeRegimeStatus?: ChangeRegimeStatusEnum | undefined;
  countryCode: CountryCodeEnum;
  /**
   * The state/province code where the registration applies.
   */
  stateCode: string;
  /**
   * The name of the state/province.
   */
  stateName: string;
  filingFrequency: FilingFrequencyEnum;
  /**
   * The number of days before the filing deadline.
   */
  filingDays: number;
  /**
   * Username for accessing tax registration details.
   */
  username?: string | undefined;
  /**
   * Additional comments related to the registration.
   */
  comment?: string | undefined;
  /**
   * The date from which filings should be created. should start (YYYY-MM-DD).
   */
  createFilingsFrom?: string | undefined;
  /**
   * Indicates whether an initial synchronization should be performed.
   */
  initialSync?: boolean | undefined;
  /**
   * The amount of fees associated with the registration.
   */
  amountFees?: number | undefined;
  /**
   * Indicates whether a Voluntary Disclosure Agreement (VDA) applies.
   */
  vda?: boolean | undefined;
  /**
   * Whether the registration was imported from another system.
   */
  imported?: boolean | undefined;
  /**
   * The sales tax ID associated with the registration.
   */
  salesTaxId?: string | undefined;
  /**
   * Indicates whether the registration is an SST Import.
   */
  sstImport?: boolean | undefined;
  /**
   * The plaintext password for accessing the tax registration account.
   */
  passwordPlainText?: string | undefined;
  /**
   * Metadata related to the password.
   */
  passwordMetadataPlainText?: string | undefined;
};

/** @internal */
export const RegistrationCreatePayload$inboundSchema: z.ZodType<
  RegistrationCreatePayload,
  z.ZodTypeDef,
  unknown
> = z.object({
  registration_import_type: z.string().default("REGULAR"),
  registration_date: z.string().optional(),
  registration_email: z.string().optional(),
  registration_key: z.string().optional(),
  deregistration_key: z.string().optional(),
  registration_requested: z.string().optional(),
  registration_completed: z.string().optional(),
  deregistration_requested: z.string().optional(),
  deregistration_completed: z.string().optional(),
  auto_registered: z.boolean().default(false),
  registrations_regime: RegistrationsRegimeEnum$inboundSchema.optional(),
  change_regime_status: ChangeRegimeStatusEnum$inboundSchema.optional(),
  country_code: CountryCodeEnum$inboundSchema,
  state_code: z.string(),
  state_name: z.string(),
  filing_frequency: FilingFrequencyEnum$inboundSchema,
  filing_days: z.number().int(),
  username: z.string().optional(),
  comment: z.string().optional(),
  create_filings_from: z.string().optional(),
  initial_sync: z.boolean().default(false),
  amount_fees: z.number().default(0.00),
  vda: z.boolean().default(false),
  imported: z.boolean().optional(),
  sales_tax_id: z.string().optional(),
  sst_import: z.boolean().default(false),
  password_plain_text: z.string().optional(),
  password_metadata_plain_text: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "registration_import_type": "registrationImportType",
    "registration_date": "registrationDate",
    "registration_email": "registrationEmail",
    "registration_key": "registrationKey",
    "deregistration_key": "deregistrationKey",
    "registration_requested": "registrationRequested",
    "registration_completed": "registrationCompleted",
    "deregistration_requested": "deregistrationRequested",
    "deregistration_completed": "deregistrationCompleted",
    "auto_registered": "autoRegistered",
    "registrations_regime": "registrationsRegime",
    "change_regime_status": "changeRegimeStatus",
    "country_code": "countryCode",
    "state_code": "stateCode",
    "state_name": "stateName",
    "filing_frequency": "filingFrequency",
    "filing_days": "filingDays",
    "create_filings_from": "createFilingsFrom",
    "initial_sync": "initialSync",
    "amount_fees": "amountFees",
    "sales_tax_id": "salesTaxId",
    "sst_import": "sstImport",
    "password_plain_text": "passwordPlainText",
    "password_metadata_plain_text": "passwordMetadataPlainText",
  });
});

/** @internal */
export type RegistrationCreatePayload$Outbound = {
  registration_import_type: string;
  registration_date?: string | undefined;
  registration_email?: string | undefined;
  registration_key?: string | undefined;
  deregistration_key?: string | undefined;
  registration_requested?: string | undefined;
  registration_completed?: string | undefined;
  deregistration_requested?: string | undefined;
  deregistration_completed?: string | undefined;
  auto_registered: boolean;
  registrations_regime?: string | undefined;
  change_regime_status?: string | undefined;
  country_code: string;
  state_code: string;
  state_name: string;
  filing_frequency: string;
  filing_days: number;
  username?: string | undefined;
  comment?: string | undefined;
  create_filings_from?: string | undefined;
  initial_sync: boolean;
  amount_fees: number;
  vda: boolean;
  imported?: boolean | undefined;
  sales_tax_id?: string | undefined;
  sst_import: boolean;
  password_plain_text?: string | undefined;
  password_metadata_plain_text?: string | undefined;
};

/** @internal */
export const RegistrationCreatePayload$outboundSchema: z.ZodType<
  RegistrationCreatePayload$Outbound,
  z.ZodTypeDef,
  RegistrationCreatePayload
> = z.object({
  registrationImportType: z.string().default("REGULAR"),
  registrationDate: z.string().optional(),
  registrationEmail: z.string().optional(),
  registrationKey: z.string().optional(),
  deregistrationKey: z.string().optional(),
  registrationRequested: z.string().optional(),
  registrationCompleted: z.string().optional(),
  deregistrationRequested: z.string().optional(),
  deregistrationCompleted: z.string().optional(),
  autoRegistered: z.boolean().default(false),
  registrationsRegime: RegistrationsRegimeEnum$outboundSchema.optional(),
  changeRegimeStatus: ChangeRegimeStatusEnum$outboundSchema.optional(),
  countryCode: CountryCodeEnum$outboundSchema,
  stateCode: z.string(),
  stateName: z.string(),
  filingFrequency: FilingFrequencyEnum$outboundSchema,
  filingDays: z.number().int(),
  username: z.string().optional(),
  comment: z.string().optional(),
  createFilingsFrom: z.string().optional(),
  initialSync: z.boolean().default(false),
  amountFees: z.number().default(0.00),
  vda: z.boolean().default(false),
  imported: z.boolean().optional(),
  salesTaxId: z.string().optional(),
  sstImport: z.boolean().default(false),
  passwordPlainText: z.string().optional(),
  passwordMetadataPlainText: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    registrationImportType: "registration_import_type",
    registrationDate: "registration_date",
    registrationEmail: "registration_email",
    registrationKey: "registration_key",
    deregistrationKey: "deregistration_key",
    registrationRequested: "registration_requested",
    registrationCompleted: "registration_completed",
    deregistrationRequested: "deregistration_requested",
    deregistrationCompleted: "deregistration_completed",
    autoRegistered: "auto_registered",
    registrationsRegime: "registrations_regime",
    changeRegimeStatus: "change_regime_status",
    countryCode: "country_code",
    stateCode: "state_code",
    stateName: "state_name",
    filingFrequency: "filing_frequency",
    filingDays: "filing_days",
    createFilingsFrom: "create_filings_from",
    initialSync: "initial_sync",
    amountFees: "amount_fees",
    salesTaxId: "sales_tax_id",
    sstImport: "sst_import",
    passwordPlainText: "password_plain_text",
    passwordMetadataPlainText: "password_metadata_plain_text",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RegistrationCreatePayload$ {
  /** @deprecated use `RegistrationCreatePayload$inboundSchema` instead. */
  export const inboundSchema = RegistrationCreatePayload$inboundSchema;
  /** @deprecated use `RegistrationCreatePayload$outboundSchema` instead. */
  export const outboundSchema = RegistrationCreatePayload$outboundSchema;
  /** @deprecated use `RegistrationCreatePayload$Outbound` instead. */
  export type Outbound = RegistrationCreatePayload$Outbound;
}

export function registrationCreatePayloadToJSON(
  registrationCreatePayload: RegistrationCreatePayload,
): string {
  return JSON.stringify(
    RegistrationCreatePayload$outboundSchema.parse(registrationCreatePayload),
  );
}

export function registrationCreatePayloadFromJSON(
  jsonString: string,
): SafeParseResult<RegistrationCreatePayload, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RegistrationCreatePayload$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RegistrationCreatePayload' from JSON`,
  );
}
