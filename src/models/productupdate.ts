/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  ProductCategoryEnum,
  ProductCategoryEnum$inboundSchema,
  ProductCategoryEnum$outboundSchema,
} from "./productcategoryenum.js";
import {
  ProductStatusEnum,
  ProductStatusEnum$inboundSchema,
  ProductStatusEnum$outboundSchema,
} from "./productstatusenum.js";
import {
  ProductSubCategoryEnum,
  ProductSubCategoryEnum$inboundSchema,
  ProductSubCategoryEnum$outboundSchema,
} from "./productsubcategoryenum.js";

export type ProductUpdate = {
  /**
   * The unique identifier of the product to be updated.
   */
  id?: string | null | undefined;
  /**
   * External identifier provided for the product,
   *
   * @remarks
   *         typically by the source system.
   */
  externalId?: string | null | undefined;
  sku?: Array<string> | null | undefined;
  /**
   * Name of the product.
   */
  name: string;
  /**
   * Description of the product.
   */
  description?: string | null | undefined;
  status?: ProductStatusEnum | undefined;
  productCategory: ProductCategoryEnum;
  productSubcategory: ProductSubCategoryEnum;
  /**
   * Indicates whether the product is tax-exempt.
   */
  taxExempt: boolean;
  /**
   * Indicates if the product classification failed.
   */
  classificationFailed?: boolean | null | undefined;
};

/** @internal */
export const ProductUpdate$inboundSchema: z.ZodType<
  ProductUpdate,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  external_id: z.nullable(z.string()).optional(),
  sku: z.nullable(z.array(z.string())).optional(),
  name: z.string(),
  description: z.nullable(z.string()).optional(),
  status: ProductStatusEnum$inboundSchema.optional(),
  product_category: ProductCategoryEnum$inboundSchema,
  product_subcategory: ProductSubCategoryEnum$inboundSchema,
  tax_exempt: z.boolean(),
  classification_failed: z.nullable(z.boolean()).optional(),
}).transform((v) => {
  return remap$(v, {
    "external_id": "externalId",
    "product_category": "productCategory",
    "product_subcategory": "productSubcategory",
    "tax_exempt": "taxExempt",
    "classification_failed": "classificationFailed",
  });
});

/** @internal */
export type ProductUpdate$Outbound = {
  id?: string | null | undefined;
  external_id?: string | null | undefined;
  sku?: Array<string> | null | undefined;
  name: string;
  description?: string | null | undefined;
  status?: string | undefined;
  product_category: string;
  product_subcategory: string;
  tax_exempt: boolean;
  classification_failed?: boolean | null | undefined;
};

/** @internal */
export const ProductUpdate$outboundSchema: z.ZodType<
  ProductUpdate$Outbound,
  z.ZodTypeDef,
  ProductUpdate
> = z.object({
  id: z.nullable(z.string()).optional(),
  externalId: z.nullable(z.string()).optional(),
  sku: z.nullable(z.array(z.string())).optional(),
  name: z.string(),
  description: z.nullable(z.string()).optional(),
  status: ProductStatusEnum$outboundSchema.optional(),
  productCategory: ProductCategoryEnum$outboundSchema,
  productSubcategory: ProductSubCategoryEnum$outboundSchema,
  taxExempt: z.boolean(),
  classificationFailed: z.nullable(z.boolean()).optional(),
}).transform((v) => {
  return remap$(v, {
    externalId: "external_id",
    productCategory: "product_category",
    productSubcategory: "product_subcategory",
    taxExempt: "tax_exempt",
    classificationFailed: "classification_failed",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ProductUpdate$ {
  /** @deprecated use `ProductUpdate$inboundSchema` instead. */
  export const inboundSchema = ProductUpdate$inboundSchema;
  /** @deprecated use `ProductUpdate$outboundSchema` instead. */
  export const outboundSchema = ProductUpdate$outboundSchema;
  /** @deprecated use `ProductUpdate$Outbound` instead. */
  export type Outbound = ProductUpdate$Outbound;
}

export function productUpdateToJSON(productUpdate: ProductUpdate): string {
  return JSON.stringify(ProductUpdate$outboundSchema.parse(productUpdate));
}

export function productUpdateFromJSON(
  jsonString: string,
): SafeParseResult<ProductUpdate, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ProductUpdate$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ProductUpdate' from JSON`,
  );
}
