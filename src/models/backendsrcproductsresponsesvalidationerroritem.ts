/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type BackendSrcProductsResponsesValidationErrorItem = {
  /**
   * Validation issues, such as missing required
   *
   * @remarks
   *                     fields or invalid field values.
   */
  type: string;
  /**
   * Location of error
   */
  loc: Array<string>;
  /**
   * Error message
   */
  msg: string;
  /**
   * Invalid input value
   */
  input?: any | undefined;
  /**
   * Additional context
   */
  ctx: { [k: string]: any };
};

/** @internal */
export const BackendSrcProductsResponsesValidationErrorItem$inboundSchema:
  z.ZodType<
    BackendSrcProductsResponsesValidationErrorItem,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type: z.string(),
    loc: z.array(z.string()),
    msg: z.string(),
    input: z.any().optional(),
    ctx: z.record(z.any()),
  });

/** @internal */
export type BackendSrcProductsResponsesValidationErrorItem$Outbound = {
  type: string;
  loc: Array<string>;
  msg: string;
  input?: any | undefined;
  ctx: { [k: string]: any };
};

/** @internal */
export const BackendSrcProductsResponsesValidationErrorItem$outboundSchema:
  z.ZodType<
    BackendSrcProductsResponsesValidationErrorItem$Outbound,
    z.ZodTypeDef,
    BackendSrcProductsResponsesValidationErrorItem
  > = z.object({
    type: z.string(),
    loc: z.array(z.string()),
    msg: z.string(),
    input: z.any().optional(),
    ctx: z.record(z.any()),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BackendSrcProductsResponsesValidationErrorItem$ {
  /** @deprecated use `BackendSrcProductsResponsesValidationErrorItem$inboundSchema` instead. */
  export const inboundSchema =
    BackendSrcProductsResponsesValidationErrorItem$inboundSchema;
  /** @deprecated use `BackendSrcProductsResponsesValidationErrorItem$outboundSchema` instead. */
  export const outboundSchema =
    BackendSrcProductsResponsesValidationErrorItem$outboundSchema;
  /** @deprecated use `BackendSrcProductsResponsesValidationErrorItem$Outbound` instead. */
  export type Outbound =
    BackendSrcProductsResponsesValidationErrorItem$Outbound;
}

export function backendSrcProductsResponsesValidationErrorItemToJSON(
  backendSrcProductsResponsesValidationErrorItem:
    BackendSrcProductsResponsesValidationErrorItem,
): string {
  return JSON.stringify(
    BackendSrcProductsResponsesValidationErrorItem$outboundSchema.parse(
      backendSrcProductsResponsesValidationErrorItem,
    ),
  );
}

export function backendSrcProductsResponsesValidationErrorItemFromJSON(
  jsonString: string,
): SafeParseResult<
  BackendSrcProductsResponsesValidationErrorItem,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      BackendSrcProductsResponsesValidationErrorItem$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'BackendSrcProductsResponsesValidationErrorItem' from JSON`,
  );
}
