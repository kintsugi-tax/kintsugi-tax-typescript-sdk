/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  CustomerRead,
  CustomerRead$inboundSchema,
  CustomerRead$Outbound,
  CustomerRead$outboundSchema,
} from "./customerread.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type PageCustomerRead = {
  items: Array<CustomerRead>;
  total: number;
  page: number;
  size: number;
  pages?: number | undefined;
};

/** @internal */
export const PageCustomerRead$inboundSchema: z.ZodType<
  PageCustomerRead,
  z.ZodTypeDef,
  unknown
> = z.object({
  items: z.array(CustomerRead$inboundSchema),
  total: z.number().int(),
  page: z.number().int(),
  size: z.number().int(),
  pages: z.number().int().optional(),
});

/** @internal */
export type PageCustomerRead$Outbound = {
  items: Array<CustomerRead$Outbound>;
  total: number;
  page: number;
  size: number;
  pages?: number | undefined;
};

/** @internal */
export const PageCustomerRead$outboundSchema: z.ZodType<
  PageCustomerRead$Outbound,
  z.ZodTypeDef,
  PageCustomerRead
> = z.object({
  items: z.array(CustomerRead$outboundSchema),
  total: z.number().int(),
  page: z.number().int(),
  size: z.number().int(),
  pages: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PageCustomerRead$ {
  /** @deprecated use `PageCustomerRead$inboundSchema` instead. */
  export const inboundSchema = PageCustomerRead$inboundSchema;
  /** @deprecated use `PageCustomerRead$outboundSchema` instead. */
  export const outboundSchema = PageCustomerRead$outboundSchema;
  /** @deprecated use `PageCustomerRead$Outbound` instead. */
  export type Outbound = PageCustomerRead$Outbound;
}

export function pageCustomerReadToJSON(
  pageCustomerRead: PageCustomerRead,
): string {
  return JSON.stringify(
    PageCustomerRead$outboundSchema.parse(pageCustomerRead),
  );
}

export function pageCustomerReadFromJSON(
  jsonString: string,
): SafeParseResult<PageCustomerRead, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PageCustomerRead$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PageCustomerRead' from JSON`,
  );
}
