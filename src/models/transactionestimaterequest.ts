/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  CurrencyEnum,
  CurrencyEnum$inboundSchema,
  CurrencyEnum$outboundSchema,
} from "./currencyenum.js";
import {
  CustomerBaseInput,
  CustomerBaseInput$inboundSchema,
  CustomerBaseInput$Outbound,
  CustomerBaseInput$outboundSchema,
} from "./customerbaseinput.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  SourceEnum,
  SourceEnum$inboundSchema,
  SourceEnum$outboundSchema,
} from "./sourceenum.js";
import {
  TransactionItemEstimateBase,
  TransactionItemEstimateBase$inboundSchema,
  TransactionItemEstimateBase$Outbound,
  TransactionItemEstimateBase$outboundSchema,
} from "./transactionitemestimatebase.js";

/**
 * Total amount of the transaction.
 */
export type TotalAmountOfTheTransactionAfterDiscounts = number | string;

/**
 * Type of the address. Must be either
 *
 * @remarks
 *                         SHIP_TO or BILL_TO.
 */
export const TransactionEstimateRequestType = {
  ShipTo: "SHIP_TO",
  BillTo: "BILL_TO",
} as const;
/**
 * Type of the address. Must be either
 *
 * @remarks
 *                         SHIP_TO or BILL_TO.
 */
export type TransactionEstimateRequestType = ClosedEnum<
  typeof TransactionEstimateRequestType
>;

export type TransactionEstimateRequestAddress = {
  /**
   * Type of the address. Must be either
   *
   * @remarks
   *                         SHIP_TO or BILL_TO.
   */
  type: TransactionEstimateRequestType;
  /**
   * Phone number associated with the customer.
   */
  phone?: string | undefined;
  /**
   * Primary street address of the customer.
   */
  street1?: string | undefined;
  /**
   * Additional street address details, such as an apartment or suite number.
   */
  street2?: string | undefined;
  /**
   * City where the customer resides.
   */
  city?: string | undefined;
  /**
   * County or district of the customer.
   */
  county?: string | undefined;
  /**
   * State or province of the address.
   */
  state: string;
  /**
   * Postal code of the address.
   */
  postalCode: string;
  /**
   * Country of the address.
   */
  country: string;
  /**
   * Complete address string of the customer, which can be used as an alternative to individual fields.
   */
  fullAddress?: string | undefined;
  /**
   * Status of the address. Deprecated and ignored.
   *
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  status?: string | undefined;
  /**
   * Additional enriched fields related to the address.
   */
  enrichedFields?: string | undefined;
};

/**
 * Request model for tax estimation, including all fields from TransactionEstimateBase
 *
 * @remarks
 * and an additional field to simulate nexus being met.
 */
export type TransactionEstimateRequest = {
  /**
   * The date of the transaction in ISO 8601 format (e.g., 2025-01-25T12:00:00Z).
   */
  date: Date;
  /**
   * Unique identifier of this transaction in the source system.
   */
  externalId: string;
  /**
   * Total amount of the transaction.
   */
  totalAmount?: number | string | undefined;
  currency: CurrencyEnum;
  /**
   * An optional description of the transaction.
   */
  description?: string | null | undefined;
  /**
   * While currently not used, it may be used in the future to determine taxability. The source of the transaction (e.g., OTHER).
   *
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  source?: SourceEnum | null | undefined;
  /**
   * Indicates if the transaction involves a marketplace.
   */
  marketplace?: boolean | null | undefined;
  /**
   * Details about the customer. If the customer is not found, it will be ignored.
   */
  customer?: CustomerBaseInput | null | undefined;
  /**
   * List of addresses related to the transaction. At least one BILL_TO or SHIP_TO address must be provided. The address will be validated during estimation, and the transaction may be rejected if the address does not pass validation. The SHIP_TO will be preferred to use for determining tax liability. **Deprecated:** Use of `address.status` in estimate api is ignored and will be removed in the future status will be considered UNVERIFIED by default and always validated
   */
  addresses: Array<TransactionEstimateRequestAddress>;
  /**
   * List of items involved in the transaction.
   */
  transactionItems: Array<TransactionItemEstimateBase>;
  /**
   * If True, assumes active registration is met for tax estimation.
   */
  simulateActiveRegistration?: boolean | null | undefined;
  /**
   * Use simulate_active_registration instead.
   *
   * @remarks
   *         This field will be removed in future releases.
   *
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  simulateNexusMet?: boolean | null | undefined;
};

/** @internal */
export const TotalAmountOfTheTransactionAfterDiscounts$inboundSchema: z.ZodType<
  TotalAmountOfTheTransactionAfterDiscounts,
  z.ZodTypeDef,
  unknown
> = z.union([z.number(), z.string()]);

/** @internal */
export type TotalAmountOfTheTransactionAfterDiscounts$Outbound =
  | number
  | string;

/** @internal */
export const TotalAmountOfTheTransactionAfterDiscounts$outboundSchema:
  z.ZodType<
    TotalAmountOfTheTransactionAfterDiscounts$Outbound,
    z.ZodTypeDef,
    TotalAmountOfTheTransactionAfterDiscounts
  > = z.union([z.number(), z.string()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TotalAmountOfTheTransactionAfterDiscounts$ {
  /** @deprecated use `TotalAmountOfTheTransactionAfterDiscounts$inboundSchema` instead. */
  export const inboundSchema =
    TotalAmountOfTheTransactionAfterDiscounts$inboundSchema;
  /** @deprecated use `TotalAmountOfTheTransactionAfterDiscounts$outboundSchema` instead. */
  export const outboundSchema =
    TotalAmountOfTheTransactionAfterDiscounts$outboundSchema;
  /** @deprecated use `TotalAmountOfTheTransactionAfterDiscounts$Outbound` instead. */
  export type Outbound = TotalAmountOfTheTransactionAfterDiscounts$Outbound;
}

export function totalAmountOfTheTransactionAfterDiscountsToJSON(
  totalAmountOfTheTransactionAfterDiscounts:
    TotalAmountOfTheTransactionAfterDiscounts,
): string {
  return JSON.stringify(
    TotalAmountOfTheTransactionAfterDiscounts$outboundSchema.parse(
      totalAmountOfTheTransactionAfterDiscounts,
    ),
  );
}

export function totalAmountOfTheTransactionAfterDiscountsFromJSON(
  jsonString: string,
): SafeParseResult<
  TotalAmountOfTheTransactionAfterDiscounts,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      TotalAmountOfTheTransactionAfterDiscounts$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'TotalAmountOfTheTransactionAfterDiscounts' from JSON`,
  );
}

/** @internal */
export const TransactionEstimateRequestType$inboundSchema: z.ZodNativeEnum<
  typeof TransactionEstimateRequestType
> = z.nativeEnum(TransactionEstimateRequestType);

/** @internal */
export const TransactionEstimateRequestType$outboundSchema: z.ZodNativeEnum<
  typeof TransactionEstimateRequestType
> = TransactionEstimateRequestType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionEstimateRequestType$ {
  /** @deprecated use `TransactionEstimateRequestType$inboundSchema` instead. */
  export const inboundSchema = TransactionEstimateRequestType$inboundSchema;
  /** @deprecated use `TransactionEstimateRequestType$outboundSchema` instead. */
  export const outboundSchema = TransactionEstimateRequestType$outboundSchema;
}

/** @internal */
export const TransactionEstimateRequestAddress$inboundSchema: z.ZodType<
  TransactionEstimateRequestAddress,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: TransactionEstimateRequestType$inboundSchema,
  phone: z.string().optional(),
  street_1: z.string().optional(),
  street_2: z.string().optional(),
  city: z.string().optional(),
  county: z.string().optional(),
  state: z.string(),
  postal_code: z.string(),
  country: z.string(),
  full_address: z.string().optional(),
  status: z.string().optional(),
  enriched_fields: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "street_1": "street1",
    "street_2": "street2",
    "postal_code": "postalCode",
    "full_address": "fullAddress",
    "enriched_fields": "enrichedFields",
  });
});

/** @internal */
export type TransactionEstimateRequestAddress$Outbound = {
  type: string;
  phone?: string | undefined;
  street_1?: string | undefined;
  street_2?: string | undefined;
  city?: string | undefined;
  county?: string | undefined;
  state: string;
  postal_code: string;
  country: string;
  full_address?: string | undefined;
  status?: string | undefined;
  enriched_fields?: string | undefined;
};

/** @internal */
export const TransactionEstimateRequestAddress$outboundSchema: z.ZodType<
  TransactionEstimateRequestAddress$Outbound,
  z.ZodTypeDef,
  TransactionEstimateRequestAddress
> = z.object({
  type: TransactionEstimateRequestType$outboundSchema,
  phone: z.string().optional(),
  street1: z.string().optional(),
  street2: z.string().optional(),
  city: z.string().optional(),
  county: z.string().optional(),
  state: z.string(),
  postalCode: z.string(),
  country: z.string(),
  fullAddress: z.string().optional(),
  status: z.string().optional(),
  enrichedFields: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    street1: "street_1",
    street2: "street_2",
    postalCode: "postal_code",
    fullAddress: "full_address",
    enrichedFields: "enriched_fields",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionEstimateRequestAddress$ {
  /** @deprecated use `TransactionEstimateRequestAddress$inboundSchema` instead. */
  export const inboundSchema = TransactionEstimateRequestAddress$inboundSchema;
  /** @deprecated use `TransactionEstimateRequestAddress$outboundSchema` instead. */
  export const outboundSchema =
    TransactionEstimateRequestAddress$outboundSchema;
  /** @deprecated use `TransactionEstimateRequestAddress$Outbound` instead. */
  export type Outbound = TransactionEstimateRequestAddress$Outbound;
}

export function transactionEstimateRequestAddressToJSON(
  transactionEstimateRequestAddress: TransactionEstimateRequestAddress,
): string {
  return JSON.stringify(
    TransactionEstimateRequestAddress$outboundSchema.parse(
      transactionEstimateRequestAddress,
    ),
  );
}

export function transactionEstimateRequestAddressFromJSON(
  jsonString: string,
): SafeParseResult<TransactionEstimateRequestAddress, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TransactionEstimateRequestAddress$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TransactionEstimateRequestAddress' from JSON`,
  );
}

/** @internal */
export const TransactionEstimateRequest$inboundSchema: z.ZodType<
  TransactionEstimateRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  date: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  external_id: z.string(),
  total_amount: z.union([z.number(), z.string()]).optional(),
  currency: CurrencyEnum$inboundSchema,
  description: z.nullable(z.string()).optional(),
  source: z.nullable(SourceEnum$inboundSchema).optional(),
  marketplace: z.nullable(z.boolean()).optional(),
  customer: z.nullable(CustomerBaseInput$inboundSchema).optional(),
  addresses: z.array(
    z.lazy(() => TransactionEstimateRequestAddress$inboundSchema),
  ),
  transaction_items: z.array(TransactionItemEstimateBase$inboundSchema),
  simulate_active_registration: z.nullable(z.boolean()).optional(),
  simulate_nexus_met: z.nullable(z.boolean()).optional(),
}).transform((v) => {
  return remap$(v, {
    "external_id": "externalId",
    "total_amount": "totalAmount",
    "transaction_items": "transactionItems",
    "simulate_active_registration": "simulateActiveRegistration",
    "simulate_nexus_met": "simulateNexusMet",
  });
});

/** @internal */
export type TransactionEstimateRequest$Outbound = {
  date: string;
  external_id: string;
  total_amount?: number | string | undefined;
  currency: string;
  description?: string | null | undefined;
  source?: string | null | undefined;
  marketplace?: boolean | null | undefined;
  customer?: CustomerBaseInput$Outbound | null | undefined;
  addresses: Array<TransactionEstimateRequestAddress$Outbound>;
  transaction_items: Array<TransactionItemEstimateBase$Outbound>;
  simulate_active_registration?: boolean | null | undefined;
  simulate_nexus_met?: boolean | null | undefined;
};

/** @internal */
export const TransactionEstimateRequest$outboundSchema: z.ZodType<
  TransactionEstimateRequest$Outbound,
  z.ZodTypeDef,
  TransactionEstimateRequest
> = z.object({
  date: z.date().transform(v => v.toISOString()),
  externalId: z.string(),
  totalAmount: z.union([z.number(), z.string()]).optional(),
  currency: CurrencyEnum$outboundSchema,
  description: z.nullable(z.string()).optional(),
  source: z.nullable(SourceEnum$outboundSchema).optional(),
  marketplace: z.nullable(z.boolean()).optional(),
  customer: z.nullable(CustomerBaseInput$outboundSchema).optional(),
  addresses: z.array(
    z.lazy(() => TransactionEstimateRequestAddress$outboundSchema),
  ),
  transactionItems: z.array(TransactionItemEstimateBase$outboundSchema),
  simulateActiveRegistration: z.nullable(z.boolean()).optional(),
  simulateNexusMet: z.nullable(z.boolean()).optional(),
}).transform((v) => {
  return remap$(v, {
    externalId: "external_id",
    totalAmount: "total_amount",
    transactionItems: "transaction_items",
    simulateActiveRegistration: "simulate_active_registration",
    simulateNexusMet: "simulate_nexus_met",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionEstimateRequest$ {
  /** @deprecated use `TransactionEstimateRequest$inboundSchema` instead. */
  export const inboundSchema = TransactionEstimateRequest$inboundSchema;
  /** @deprecated use `TransactionEstimateRequest$outboundSchema` instead. */
  export const outboundSchema = TransactionEstimateRequest$outboundSchema;
  /** @deprecated use `TransactionEstimateRequest$Outbound` instead. */
  export type Outbound = TransactionEstimateRequest$Outbound;
}

export function transactionEstimateRequestToJSON(
  transactionEstimateRequest: TransactionEstimateRequest,
): string {
  return JSON.stringify(
    TransactionEstimateRequest$outboundSchema.parse(transactionEstimateRequest),
  );
}

export function transactionEstimateRequestFromJSON(
  jsonString: string,
): SafeParseResult<TransactionEstimateRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TransactionEstimateRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TransactionEstimateRequest' from JSON`,
  );
}
