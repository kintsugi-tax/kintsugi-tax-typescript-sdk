/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  ExemptionStatus,
  ExemptionStatus$inboundSchema,
  ExemptionStatus$outboundSchema,
} from "./exemptionstatus.js";
import {
  ExemptionType,
  ExemptionType$inboundSchema,
  ExemptionType$outboundSchema,
} from "./exemptiontype.js";

export type ExemptionRequired = {
  jurisdiction?: string | undefined;
  customerId?: string | undefined;
  organizationId: string;
  exemptionType: ExemptionType;
  startDate: Date;
  status: ExemptionStatus;
  reseller: boolean;
};

/** @internal */
export const ExemptionRequired$inboundSchema: z.ZodType<
  ExemptionRequired,
  z.ZodTypeDef,
  unknown
> = z.object({
  jurisdiction: z.string().optional(),
  customer_id: z.string().optional(),
  organization_id: z.string(),
  exemption_type: ExemptionType$inboundSchema,
  start_date: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  status: ExemptionStatus$inboundSchema,
  reseller: z.boolean(),
}).transform((v) => {
  return remap$(v, {
    "customer_id": "customerId",
    "organization_id": "organizationId",
    "exemption_type": "exemptionType",
    "start_date": "startDate",
  });
});

/** @internal */
export type ExemptionRequired$Outbound = {
  jurisdiction?: string | undefined;
  customer_id?: string | undefined;
  organization_id: string;
  exemption_type: string;
  start_date: string;
  status: string;
  reseller: boolean;
};

/** @internal */
export const ExemptionRequired$outboundSchema: z.ZodType<
  ExemptionRequired$Outbound,
  z.ZodTypeDef,
  ExemptionRequired
> = z.object({
  jurisdiction: z.string().optional(),
  customerId: z.string().optional(),
  organizationId: z.string(),
  exemptionType: ExemptionType$outboundSchema,
  startDate: z.date().transform(v => v.toISOString()),
  status: ExemptionStatus$outboundSchema,
  reseller: z.boolean(),
}).transform((v) => {
  return remap$(v, {
    customerId: "customer_id",
    organizationId: "organization_id",
    exemptionType: "exemption_type",
    startDate: "start_date",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ExemptionRequired$ {
  /** @deprecated use `ExemptionRequired$inboundSchema` instead. */
  export const inboundSchema = ExemptionRequired$inboundSchema;
  /** @deprecated use `ExemptionRequired$outboundSchema` instead. */
  export const outboundSchema = ExemptionRequired$outboundSchema;
  /** @deprecated use `ExemptionRequired$Outbound` instead. */
  export type Outbound = ExemptionRequired$Outbound;
}

export function exemptionRequiredToJSON(
  exemptionRequired: ExemptionRequired,
): string {
  return JSON.stringify(
    ExemptionRequired$outboundSchema.parse(exemptionRequired),
  );
}

export function exemptionRequiredFromJSON(
  jsonString: string,
): SafeParseResult<ExemptionRequired, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ExemptionRequired$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ExemptionRequired' from JSON`,
  );
}
