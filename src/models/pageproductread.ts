/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  ProductRead,
  ProductRead$inboundSchema,
  ProductRead$Outbound,
  ProductRead$outboundSchema,
} from "./productread.js";

export type PageProductRead = {
  items: Array<ProductRead>;
  total: number;
  page: number;
  size: number;
  pages?: number | undefined;
};

/** @internal */
export const PageProductRead$inboundSchema: z.ZodType<
  PageProductRead,
  z.ZodTypeDef,
  unknown
> = z.object({
  items: z.array(ProductRead$inboundSchema),
  total: z.number().int(),
  page: z.number().int(),
  size: z.number().int(),
  pages: z.number().int().optional(),
});

/** @internal */
export type PageProductRead$Outbound = {
  items: Array<ProductRead$Outbound>;
  total: number;
  page: number;
  size: number;
  pages?: number | undefined;
};

/** @internal */
export const PageProductRead$outboundSchema: z.ZodType<
  PageProductRead$Outbound,
  z.ZodTypeDef,
  PageProductRead
> = z.object({
  items: z.array(ProductRead$outboundSchema),
  total: z.number().int(),
  page: z.number().int(),
  size: z.number().int(),
  pages: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PageProductRead$ {
  /** @deprecated use `PageProductRead$inboundSchema` instead. */
  export const inboundSchema = PageProductRead$inboundSchema;
  /** @deprecated use `PageProductRead$outboundSchema` instead. */
  export const outboundSchema = PageProductRead$outboundSchema;
  /** @deprecated use `PageProductRead$Outbound` instead. */
  export type Outbound = PageProductRead$Outbound;
}

export function pageProductReadToJSON(
  pageProductRead: PageProductRead,
): string {
  return JSON.stringify(PageProductRead$outboundSchema.parse(pageProductRead));
}

export function pageProductReadFromJSON(
  jsonString: string,
): SafeParseResult<PageProductRead, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PageProductRead$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PageProductRead' from JSON`,
  );
}
