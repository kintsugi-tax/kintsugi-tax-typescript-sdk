/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  AppliedTo,
  AppliedTo$inboundSchema,
  AppliedTo$outboundSchema,
} from "./appliedto.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type DiscountBuilder = {
  externalId?: string | undefined;
  appliedTo: AppliedTo;
  discountAmount?: number | undefined;
};

/** @internal */
export const DiscountBuilder$inboundSchema: z.ZodType<
  DiscountBuilder,
  z.ZodTypeDef,
  unknown
> = z.object({
  external_id: z.string().optional(),
  applied_to: AppliedTo$inboundSchema,
  discount_amount: z.number().default(0.00),
}).transform((v) => {
  return remap$(v, {
    "external_id": "externalId",
    "applied_to": "appliedTo",
    "discount_amount": "discountAmount",
  });
});

/** @internal */
export type DiscountBuilder$Outbound = {
  external_id?: string | undefined;
  applied_to: string;
  discount_amount: number;
};

/** @internal */
export const DiscountBuilder$outboundSchema: z.ZodType<
  DiscountBuilder$Outbound,
  z.ZodTypeDef,
  DiscountBuilder
> = z.object({
  externalId: z.string().optional(),
  appliedTo: AppliedTo$outboundSchema,
  discountAmount: z.number().default(0.00),
}).transform((v) => {
  return remap$(v, {
    externalId: "external_id",
    appliedTo: "applied_to",
    discountAmount: "discount_amount",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DiscountBuilder$ {
  /** @deprecated use `DiscountBuilder$inboundSchema` instead. */
  export const inboundSchema = DiscountBuilder$inboundSchema;
  /** @deprecated use `DiscountBuilder$outboundSchema` instead. */
  export const outboundSchema = DiscountBuilder$outboundSchema;
  /** @deprecated use `DiscountBuilder$Outbound` instead. */
  export type Outbound = DiscountBuilder$Outbound;
}

export function discountBuilderToJSON(
  discountBuilder: DiscountBuilder,
): string {
  return JSON.stringify(DiscountBuilder$outboundSchema.parse(discountBuilder));
}

export function discountBuilderFromJSON(
  jsonString: string,
): SafeParseResult<DiscountBuilder, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DiscountBuilder$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DiscountBuilder' from JSON`,
  );
}
