/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  TaxItemReturnReasonEnum,
  TaxItemReturnReasonEnum$inboundSchema,
  TaxItemReturnReasonEnum$outboundSchema,
} from "./taxitemreturnreasonenum.js";

export type TaxItemEstimate = {
  rate?: string | undefined;
  name: string;
  amount?: string | undefined;
  exempt?: boolean | undefined;
  /**
   * We use this to understand the response from get_tax_items
   */
  exemptReason?: TaxItemReturnReasonEnum | undefined;
  rule?: string | undefined;
};

/** @internal */
export const TaxItemEstimate$inboundSchema: z.ZodType<
  TaxItemEstimate,
  z.ZodTypeDef,
  unknown
> = z.object({
  rate: z.string().default("0.0"),
  name: z.string(),
  amount: z.string().default("0.0"),
  exempt: z.boolean().default(false),
  exempt_reason: TaxItemReturnReasonEnum$inboundSchema.optional(),
  rule: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "exempt_reason": "exemptReason",
  });
});

/** @internal */
export type TaxItemEstimate$Outbound = {
  rate: string;
  name: string;
  amount: string;
  exempt: boolean;
  exempt_reason?: string | undefined;
  rule?: string | undefined;
};

/** @internal */
export const TaxItemEstimate$outboundSchema: z.ZodType<
  TaxItemEstimate$Outbound,
  z.ZodTypeDef,
  TaxItemEstimate
> = z.object({
  rate: z.string().default("0.0"),
  name: z.string(),
  amount: z.string().default("0.0"),
  exempt: z.boolean().default(false),
  exemptReason: TaxItemReturnReasonEnum$outboundSchema.optional(),
  rule: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    exemptReason: "exempt_reason",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TaxItemEstimate$ {
  /** @deprecated use `TaxItemEstimate$inboundSchema` instead. */
  export const inboundSchema = TaxItemEstimate$inboundSchema;
  /** @deprecated use `TaxItemEstimate$outboundSchema` instead. */
  export const outboundSchema = TaxItemEstimate$outboundSchema;
  /** @deprecated use `TaxItemEstimate$Outbound` instead. */
  export type Outbound = TaxItemEstimate$Outbound;
}

export function taxItemEstimateToJSON(
  taxItemEstimate: TaxItemEstimate,
): string {
  return JSON.stringify(TaxItemEstimate$outboundSchema.parse(taxItemEstimate));
}

export function taxItemEstimateFromJSON(
  jsonString: string,
): SafeParseResult<TaxItemEstimate, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TaxItemEstimate$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TaxItemEstimate' from JSON`,
  );
}
