/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { RFCDate } from "../types/rfcdate.js";
import {
  AddressInput,
  AddressInput$inboundSchema,
  AddressInput$Outbound,
  AddressInput$outboundSchema,
} from "./addressinput.js";
import {
  AddressStatus,
  AddressStatus$inboundSchema,
  AddressStatus$outboundSchema,
} from "./addressstatus.js";
import {
  CountryCodeEnum,
  CountryCodeEnum$inboundSchema,
  CountryCodeEnum$outboundSchema,
} from "./countrycodeenum.js";
import {
  CurrencyEnum,
  CurrencyEnum$inboundSchema,
  CurrencyEnum$outboundSchema,
} from "./currencyenum.js";
import {
  CustomerCreate,
  CustomerCreate$inboundSchema,
  CustomerCreate$Outbound,
  CustomerCreate$outboundSchema,
} from "./customercreate.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  Exemption,
  Exemption$inboundSchema,
  Exemption$Outbound,
  Exemption$outboundSchema,
} from "./exemption.js";
import {
  ExemptionRequired,
  ExemptionRequired$inboundSchema,
  ExemptionRequired$Outbound,
  ExemptionRequired$outboundSchema,
} from "./exemptionrequired.js";
import {
  ProcessingStatusEnum,
  ProcessingStatusEnum$inboundSchema,
  ProcessingStatusEnum$outboundSchema,
} from "./processingstatusenum.js";
import {
  SourceEnum,
  SourceEnum$inboundSchema,
  SourceEnum$outboundSchema,
} from "./sourceenum.js";
import {
  TaxLiabilitySourceEnum,
  TaxLiabilitySourceEnum$inboundSchema,
  TaxLiabilitySourceEnum$outboundSchema,
} from "./taxliabilitysourceenum.js";
import {
  TransactionAddressBuilder,
  TransactionAddressBuilder$inboundSchema,
  TransactionAddressBuilder$Outbound,
  TransactionAddressBuilder$outboundSchema,
} from "./transactionaddressbuilder.js";
import {
  TransactionExemptStatusEnum,
  TransactionExemptStatusEnum$inboundSchema,
  TransactionExemptStatusEnum$outboundSchema,
} from "./transactionexemptstatusenum.js";
import {
  TransactionItemCreateUpdate,
  TransactionItemCreateUpdate$inboundSchema,
  TransactionItemCreateUpdate$Outbound,
  TransactionItemCreateUpdate$outboundSchema,
} from "./transactionitemcreateupdate.js";
import {
  TransactionRefundStatus,
  TransactionRefundStatus$inboundSchema,
  TransactionRefundStatus$outboundSchema,
} from "./transactionrefundstatus.js";
import {
  TransactionStatusEnum,
  TransactionStatusEnum$inboundSchema,
  TransactionStatusEnum$outboundSchema,
} from "./transactionstatusenum.js";

/**
 * Total amount of the transaction.
 */
export type TransactionCreateTotalAmount = number | string;

/**
 * Imported tax amount.
 */
export type TransactionCreateTotalTaxAmountImported = number | string;

/**
 * Imported tax rate.
 */
export type TransactionCreateTaxRateImported = number | string;

/**
 * Calculated tax amount.
 */
export type TransactionCreateTotalTaxAmountCalculated = number | string;

/**
 * Calculated tax rate.
 */
export type TransactionCreateTaxRateCalculated = number | string;

/**
 * Total tax liability amount.
 */
export type TransactionCreateTotalTaxLiabilityAmount = number | string;

/**
 * Taxable amount.
 */
export type TransactionCreateTaxableAmount = number | string;

/**
 * Converted total amount.
 */
export type TransactionCreateConvertedTotalAmount = number | string;

/**
 * Converted imported tax amount.
 */
export type TransactionCreateConvertedTotalTaxAmountImported = number | string;

/**
 * Converted calculated tax amount.
 */
export type TransactionCreateConvertedTotalTaxAmountCalculated =
  | number
  | string;

/**
 * Currency conversion rate.
 */
export type TransactionCreateConversionRate = number | string;

/**
 * Converted taxable amount.
 */
export type TransactionCreateConvertedTaxableAmount = number | string;

/**
 * Converted total discount amount.
 */
export type TransactionCreateConvertedTotalDiscount = number | string;

/**
 * Converted subtotal amount.
 */
export type TransactionCreateConvertedSubtotal = number | string;

/**
 * Converted total tax liability amount.
 */
export type TransactionCreateConvertedTotalTaxLiabilityAmount = number | string;

export type TransactionCreateAddresses =
  | Array<TransactionAddressBuilder>
  | Array<AddressInput>;

export type TransactionCreate = {
  /**
   * Indicates if transaction requires tax exemption.
   */
  requiresExemption?: ExemptionRequired | null | undefined;
  /**
   * Unique identifier of the organization.
   */
  organizationId: string;
  /**
   * External identifier of the transaction.
   */
  externalId: string;
  /**
   * Transaction date and time
   */
  date: Date;
  /**
   * Transaction date in the shop's local timezone
   */
  shopDate?: RFCDate | null | undefined;
  /**
   * Timezone of the shop
   */
  shopDateTz?: string | null | undefined;
  status?: TransactionStatusEnum | undefined;
  /**
   * Description of the transaction.
   */
  description?: string | null | undefined;
  /**
   * Status of refund, if applicable
   */
  refundStatus?: TransactionRefundStatus | null | undefined;
  /**
   * Total amount of the transaction.
   */
  totalAmount?: number | string | undefined;
  /**
   * Unique identifier of the customer.
   */
  customerId?: string | null | undefined;
  /**
   * Indicates if transaction is marketplace-based.
   */
  marketplace?: boolean | null | undefined;
  /**
   * Exemption status (e.g., NOT_EXEMPT)
   */
  exempt?: TransactionExemptStatusEnum | null | undefined;
  /**
   * List of exemptions applied (if any).
   */
  exemptions?: Array<Exemption> | null | undefined;
  /**
   * Related transaction identifier.
   */
  relatedTo?: string | null | undefined;
  /**
   * Secondary External Identifier.
   */
  secondaryExternalId?: string | null | undefined;
  /**
   * Secondary source information
   */
  secondarySource?: string | null | undefined;
  /**
   * Friendly identifier of the original item.
   */
  externalFriendlyId?: string | null | undefined;
  /**
   * Imported tax amount.
   */
  totalTaxAmountImported?: number | string | undefined;
  /**
   * Imported tax rate.
   */
  taxRateImported?: number | string | undefined;
  /**
   * Calculated tax amount.
   */
  totalTaxAmountCalculated?: number | string | undefined;
  /**
   * Calculated tax rate.
   */
  taxRateCalculated?: number | string | undefined;
  /**
   * Total tax liability amount.
   */
  totalTaxLiabilityAmount?: number | string | undefined;
  /**
   * Source of tax liability.
   */
  taxLiabilitySource?: TaxLiabilitySourceEnum | null | undefined;
  /**
   * Taxable amount.
   */
  taxableAmount?: number | string | undefined;
  currency?: CurrencyEnum | undefined;
  /**
   * Transaction lock status.
   */
  locked?: boolean | undefined;
  source?: SourceEnum | undefined;
  /**
   * Connection Identifier
   */
  connectionId?: string | null | undefined;
  /**
   * Filing identifier.
   */
  filingId?: string | null | undefined;
  /**
   * City of the transaction address.
   */
  city?: string | null | undefined;
  /**
   * County of the transaction address.
   */
  county?: string | null | undefined;
  /**
   * State of the transaction address.
   */
  state?: string | null | undefined;
  /**
   * Country code (ISO Alpha-2).
   */
  country?: CountryCodeEnum | null | undefined;
  /**
   * Postal code of the transaction.
   */
  postalCode?: string | null | undefined;
  /**
   * Tax ID associated with the transaction
   */
  taxId?: string | null | undefined;
  addressStatus?: AddressStatus | undefined;
  /**
   * Our transaction state, used to determine when/if a transaction needs additional
   *
   * @remarks
   * processing.
   */
  processingStatus?: ProcessingStatusEnum | undefined;
  /**
   * Destination currency code (ISO 4217, e.g., USD)
   */
  destinationCurrency?: CurrencyEnum | null | undefined;
  /**
   * Converted total amount.
   */
  convertedTotalAmount?: number | string | null | undefined;
  /**
   * Converted imported tax amount.
   */
  convertedTotalTaxAmountImported?: number | string | null | undefined;
  /**
   * Converted calculated tax amount.
   */
  convertedTotalTaxAmountCalculated?: number | string | null | undefined;
  /**
   * Currency conversion rate.
   */
  conversionRate?: number | string | null | undefined;
  /**
   * Converted taxable amount.
   */
  convertedTaxableAmount?: number | string | null | undefined;
  /**
   * Converted total discount amount.
   */
  convertedTotalDiscount?: number | string | null | undefined;
  /**
   * Converted subtotal amount.
   */
  convertedSubtotal?: number | string | null | undefined;
  /**
   * Converted total tax liability amount.
   */
  convertedTotalTaxLiabilityAmount?: number | string | null | undefined;
  addresses: Array<TransactionAddressBuilder> | Array<AddressInput>;
  transactionItems: Array<TransactionItemCreateUpdate>;
  customer?: CustomerCreate | null | undefined;
};

/** @internal */
export const TransactionCreateTotalAmount$inboundSchema: z.ZodType<
  TransactionCreateTotalAmount,
  z.ZodTypeDef,
  unknown
> = z.union([z.number(), z.string()]);

/** @internal */
export type TransactionCreateTotalAmount$Outbound = number | string;

/** @internal */
export const TransactionCreateTotalAmount$outboundSchema: z.ZodType<
  TransactionCreateTotalAmount$Outbound,
  z.ZodTypeDef,
  TransactionCreateTotalAmount
> = z.union([z.number(), z.string()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionCreateTotalAmount$ {
  /** @deprecated use `TransactionCreateTotalAmount$inboundSchema` instead. */
  export const inboundSchema = TransactionCreateTotalAmount$inboundSchema;
  /** @deprecated use `TransactionCreateTotalAmount$outboundSchema` instead. */
  export const outboundSchema = TransactionCreateTotalAmount$outboundSchema;
  /** @deprecated use `TransactionCreateTotalAmount$Outbound` instead. */
  export type Outbound = TransactionCreateTotalAmount$Outbound;
}

export function transactionCreateTotalAmountToJSON(
  transactionCreateTotalAmount: TransactionCreateTotalAmount,
): string {
  return JSON.stringify(
    TransactionCreateTotalAmount$outboundSchema.parse(
      transactionCreateTotalAmount,
    ),
  );
}

export function transactionCreateTotalAmountFromJSON(
  jsonString: string,
): SafeParseResult<TransactionCreateTotalAmount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TransactionCreateTotalAmount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TransactionCreateTotalAmount' from JSON`,
  );
}

/** @internal */
export const TransactionCreateTotalTaxAmountImported$inboundSchema: z.ZodType<
  TransactionCreateTotalTaxAmountImported,
  z.ZodTypeDef,
  unknown
> = z.union([z.number(), z.string()]);

/** @internal */
export type TransactionCreateTotalTaxAmountImported$Outbound = number | string;

/** @internal */
export const TransactionCreateTotalTaxAmountImported$outboundSchema: z.ZodType<
  TransactionCreateTotalTaxAmountImported$Outbound,
  z.ZodTypeDef,
  TransactionCreateTotalTaxAmountImported
> = z.union([z.number(), z.string()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionCreateTotalTaxAmountImported$ {
  /** @deprecated use `TransactionCreateTotalTaxAmountImported$inboundSchema` instead. */
  export const inboundSchema =
    TransactionCreateTotalTaxAmountImported$inboundSchema;
  /** @deprecated use `TransactionCreateTotalTaxAmountImported$outboundSchema` instead. */
  export const outboundSchema =
    TransactionCreateTotalTaxAmountImported$outboundSchema;
  /** @deprecated use `TransactionCreateTotalTaxAmountImported$Outbound` instead. */
  export type Outbound = TransactionCreateTotalTaxAmountImported$Outbound;
}

export function transactionCreateTotalTaxAmountImportedToJSON(
  transactionCreateTotalTaxAmountImported:
    TransactionCreateTotalTaxAmountImported,
): string {
  return JSON.stringify(
    TransactionCreateTotalTaxAmountImported$outboundSchema.parse(
      transactionCreateTotalTaxAmountImported,
    ),
  );
}

export function transactionCreateTotalTaxAmountImportedFromJSON(
  jsonString: string,
): SafeParseResult<
  TransactionCreateTotalTaxAmountImported,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      TransactionCreateTotalTaxAmountImported$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'TransactionCreateTotalTaxAmountImported' from JSON`,
  );
}

/** @internal */
export const TransactionCreateTaxRateImported$inboundSchema: z.ZodType<
  TransactionCreateTaxRateImported,
  z.ZodTypeDef,
  unknown
> = z.union([z.number(), z.string()]);

/** @internal */
export type TransactionCreateTaxRateImported$Outbound = number | string;

/** @internal */
export const TransactionCreateTaxRateImported$outboundSchema: z.ZodType<
  TransactionCreateTaxRateImported$Outbound,
  z.ZodTypeDef,
  TransactionCreateTaxRateImported
> = z.union([z.number(), z.string()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionCreateTaxRateImported$ {
  /** @deprecated use `TransactionCreateTaxRateImported$inboundSchema` instead. */
  export const inboundSchema = TransactionCreateTaxRateImported$inboundSchema;
  /** @deprecated use `TransactionCreateTaxRateImported$outboundSchema` instead. */
  export const outboundSchema = TransactionCreateTaxRateImported$outboundSchema;
  /** @deprecated use `TransactionCreateTaxRateImported$Outbound` instead. */
  export type Outbound = TransactionCreateTaxRateImported$Outbound;
}

export function transactionCreateTaxRateImportedToJSON(
  transactionCreateTaxRateImported: TransactionCreateTaxRateImported,
): string {
  return JSON.stringify(
    TransactionCreateTaxRateImported$outboundSchema.parse(
      transactionCreateTaxRateImported,
    ),
  );
}

export function transactionCreateTaxRateImportedFromJSON(
  jsonString: string,
): SafeParseResult<TransactionCreateTaxRateImported, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TransactionCreateTaxRateImported$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TransactionCreateTaxRateImported' from JSON`,
  );
}

/** @internal */
export const TransactionCreateTotalTaxAmountCalculated$inboundSchema: z.ZodType<
  TransactionCreateTotalTaxAmountCalculated,
  z.ZodTypeDef,
  unknown
> = z.union([z.number(), z.string()]);

/** @internal */
export type TransactionCreateTotalTaxAmountCalculated$Outbound =
  | number
  | string;

/** @internal */
export const TransactionCreateTotalTaxAmountCalculated$outboundSchema:
  z.ZodType<
    TransactionCreateTotalTaxAmountCalculated$Outbound,
    z.ZodTypeDef,
    TransactionCreateTotalTaxAmountCalculated
  > = z.union([z.number(), z.string()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionCreateTotalTaxAmountCalculated$ {
  /** @deprecated use `TransactionCreateTotalTaxAmountCalculated$inboundSchema` instead. */
  export const inboundSchema =
    TransactionCreateTotalTaxAmountCalculated$inboundSchema;
  /** @deprecated use `TransactionCreateTotalTaxAmountCalculated$outboundSchema` instead. */
  export const outboundSchema =
    TransactionCreateTotalTaxAmountCalculated$outboundSchema;
  /** @deprecated use `TransactionCreateTotalTaxAmountCalculated$Outbound` instead. */
  export type Outbound = TransactionCreateTotalTaxAmountCalculated$Outbound;
}

export function transactionCreateTotalTaxAmountCalculatedToJSON(
  transactionCreateTotalTaxAmountCalculated:
    TransactionCreateTotalTaxAmountCalculated,
): string {
  return JSON.stringify(
    TransactionCreateTotalTaxAmountCalculated$outboundSchema.parse(
      transactionCreateTotalTaxAmountCalculated,
    ),
  );
}

export function transactionCreateTotalTaxAmountCalculatedFromJSON(
  jsonString: string,
): SafeParseResult<
  TransactionCreateTotalTaxAmountCalculated,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      TransactionCreateTotalTaxAmountCalculated$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'TransactionCreateTotalTaxAmountCalculated' from JSON`,
  );
}

/** @internal */
export const TransactionCreateTaxRateCalculated$inboundSchema: z.ZodType<
  TransactionCreateTaxRateCalculated,
  z.ZodTypeDef,
  unknown
> = z.union([z.number(), z.string()]);

/** @internal */
export type TransactionCreateTaxRateCalculated$Outbound = number | string;

/** @internal */
export const TransactionCreateTaxRateCalculated$outboundSchema: z.ZodType<
  TransactionCreateTaxRateCalculated$Outbound,
  z.ZodTypeDef,
  TransactionCreateTaxRateCalculated
> = z.union([z.number(), z.string()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionCreateTaxRateCalculated$ {
  /** @deprecated use `TransactionCreateTaxRateCalculated$inboundSchema` instead. */
  export const inboundSchema = TransactionCreateTaxRateCalculated$inboundSchema;
  /** @deprecated use `TransactionCreateTaxRateCalculated$outboundSchema` instead. */
  export const outboundSchema =
    TransactionCreateTaxRateCalculated$outboundSchema;
  /** @deprecated use `TransactionCreateTaxRateCalculated$Outbound` instead. */
  export type Outbound = TransactionCreateTaxRateCalculated$Outbound;
}

export function transactionCreateTaxRateCalculatedToJSON(
  transactionCreateTaxRateCalculated: TransactionCreateTaxRateCalculated,
): string {
  return JSON.stringify(
    TransactionCreateTaxRateCalculated$outboundSchema.parse(
      transactionCreateTaxRateCalculated,
    ),
  );
}

export function transactionCreateTaxRateCalculatedFromJSON(
  jsonString: string,
): SafeParseResult<TransactionCreateTaxRateCalculated, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      TransactionCreateTaxRateCalculated$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TransactionCreateTaxRateCalculated' from JSON`,
  );
}

/** @internal */
export const TransactionCreateTotalTaxLiabilityAmount$inboundSchema: z.ZodType<
  TransactionCreateTotalTaxLiabilityAmount,
  z.ZodTypeDef,
  unknown
> = z.union([z.number(), z.string()]);

/** @internal */
export type TransactionCreateTotalTaxLiabilityAmount$Outbound = number | string;

/** @internal */
export const TransactionCreateTotalTaxLiabilityAmount$outboundSchema: z.ZodType<
  TransactionCreateTotalTaxLiabilityAmount$Outbound,
  z.ZodTypeDef,
  TransactionCreateTotalTaxLiabilityAmount
> = z.union([z.number(), z.string()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionCreateTotalTaxLiabilityAmount$ {
  /** @deprecated use `TransactionCreateTotalTaxLiabilityAmount$inboundSchema` instead. */
  export const inboundSchema =
    TransactionCreateTotalTaxLiabilityAmount$inboundSchema;
  /** @deprecated use `TransactionCreateTotalTaxLiabilityAmount$outboundSchema` instead. */
  export const outboundSchema =
    TransactionCreateTotalTaxLiabilityAmount$outboundSchema;
  /** @deprecated use `TransactionCreateTotalTaxLiabilityAmount$Outbound` instead. */
  export type Outbound = TransactionCreateTotalTaxLiabilityAmount$Outbound;
}

export function transactionCreateTotalTaxLiabilityAmountToJSON(
  transactionCreateTotalTaxLiabilityAmount:
    TransactionCreateTotalTaxLiabilityAmount,
): string {
  return JSON.stringify(
    TransactionCreateTotalTaxLiabilityAmount$outboundSchema.parse(
      transactionCreateTotalTaxLiabilityAmount,
    ),
  );
}

export function transactionCreateTotalTaxLiabilityAmountFromJSON(
  jsonString: string,
): SafeParseResult<
  TransactionCreateTotalTaxLiabilityAmount,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      TransactionCreateTotalTaxLiabilityAmount$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'TransactionCreateTotalTaxLiabilityAmount' from JSON`,
  );
}

/** @internal */
export const TransactionCreateTaxableAmount$inboundSchema: z.ZodType<
  TransactionCreateTaxableAmount,
  z.ZodTypeDef,
  unknown
> = z.union([z.number(), z.string()]);

/** @internal */
export type TransactionCreateTaxableAmount$Outbound = number | string;

/** @internal */
export const TransactionCreateTaxableAmount$outboundSchema: z.ZodType<
  TransactionCreateTaxableAmount$Outbound,
  z.ZodTypeDef,
  TransactionCreateTaxableAmount
> = z.union([z.number(), z.string()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionCreateTaxableAmount$ {
  /** @deprecated use `TransactionCreateTaxableAmount$inboundSchema` instead. */
  export const inboundSchema = TransactionCreateTaxableAmount$inboundSchema;
  /** @deprecated use `TransactionCreateTaxableAmount$outboundSchema` instead. */
  export const outboundSchema = TransactionCreateTaxableAmount$outboundSchema;
  /** @deprecated use `TransactionCreateTaxableAmount$Outbound` instead. */
  export type Outbound = TransactionCreateTaxableAmount$Outbound;
}

export function transactionCreateTaxableAmountToJSON(
  transactionCreateTaxableAmount: TransactionCreateTaxableAmount,
): string {
  return JSON.stringify(
    TransactionCreateTaxableAmount$outboundSchema.parse(
      transactionCreateTaxableAmount,
    ),
  );
}

export function transactionCreateTaxableAmountFromJSON(
  jsonString: string,
): SafeParseResult<TransactionCreateTaxableAmount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TransactionCreateTaxableAmount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TransactionCreateTaxableAmount' from JSON`,
  );
}

/** @internal */
export const TransactionCreateConvertedTotalAmount$inboundSchema: z.ZodType<
  TransactionCreateConvertedTotalAmount,
  z.ZodTypeDef,
  unknown
> = z.union([z.number(), z.string()]);

/** @internal */
export type TransactionCreateConvertedTotalAmount$Outbound = number | string;

/** @internal */
export const TransactionCreateConvertedTotalAmount$outboundSchema: z.ZodType<
  TransactionCreateConvertedTotalAmount$Outbound,
  z.ZodTypeDef,
  TransactionCreateConvertedTotalAmount
> = z.union([z.number(), z.string()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionCreateConvertedTotalAmount$ {
  /** @deprecated use `TransactionCreateConvertedTotalAmount$inboundSchema` instead. */
  export const inboundSchema =
    TransactionCreateConvertedTotalAmount$inboundSchema;
  /** @deprecated use `TransactionCreateConvertedTotalAmount$outboundSchema` instead. */
  export const outboundSchema =
    TransactionCreateConvertedTotalAmount$outboundSchema;
  /** @deprecated use `TransactionCreateConvertedTotalAmount$Outbound` instead. */
  export type Outbound = TransactionCreateConvertedTotalAmount$Outbound;
}

export function transactionCreateConvertedTotalAmountToJSON(
  transactionCreateConvertedTotalAmount: TransactionCreateConvertedTotalAmount,
): string {
  return JSON.stringify(
    TransactionCreateConvertedTotalAmount$outboundSchema.parse(
      transactionCreateConvertedTotalAmount,
    ),
  );
}

export function transactionCreateConvertedTotalAmountFromJSON(
  jsonString: string,
): SafeParseResult<TransactionCreateConvertedTotalAmount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      TransactionCreateConvertedTotalAmount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TransactionCreateConvertedTotalAmount' from JSON`,
  );
}

/** @internal */
export const TransactionCreateConvertedTotalTaxAmountImported$inboundSchema:
  z.ZodType<
    TransactionCreateConvertedTotalTaxAmountImported,
    z.ZodTypeDef,
    unknown
  > = z.union([z.number(), z.string()]);

/** @internal */
export type TransactionCreateConvertedTotalTaxAmountImported$Outbound =
  | number
  | string;

/** @internal */
export const TransactionCreateConvertedTotalTaxAmountImported$outboundSchema:
  z.ZodType<
    TransactionCreateConvertedTotalTaxAmountImported$Outbound,
    z.ZodTypeDef,
    TransactionCreateConvertedTotalTaxAmountImported
  > = z.union([z.number(), z.string()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionCreateConvertedTotalTaxAmountImported$ {
  /** @deprecated use `TransactionCreateConvertedTotalTaxAmountImported$inboundSchema` instead. */
  export const inboundSchema =
    TransactionCreateConvertedTotalTaxAmountImported$inboundSchema;
  /** @deprecated use `TransactionCreateConvertedTotalTaxAmountImported$outboundSchema` instead. */
  export const outboundSchema =
    TransactionCreateConvertedTotalTaxAmountImported$outboundSchema;
  /** @deprecated use `TransactionCreateConvertedTotalTaxAmountImported$Outbound` instead. */
  export type Outbound =
    TransactionCreateConvertedTotalTaxAmountImported$Outbound;
}

export function transactionCreateConvertedTotalTaxAmountImportedToJSON(
  transactionCreateConvertedTotalTaxAmountImported:
    TransactionCreateConvertedTotalTaxAmountImported,
): string {
  return JSON.stringify(
    TransactionCreateConvertedTotalTaxAmountImported$outboundSchema.parse(
      transactionCreateConvertedTotalTaxAmountImported,
    ),
  );
}

export function transactionCreateConvertedTotalTaxAmountImportedFromJSON(
  jsonString: string,
): SafeParseResult<
  TransactionCreateConvertedTotalTaxAmountImported,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      TransactionCreateConvertedTotalTaxAmountImported$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'TransactionCreateConvertedTotalTaxAmountImported' from JSON`,
  );
}

/** @internal */
export const TransactionCreateConvertedTotalTaxAmountCalculated$inboundSchema:
  z.ZodType<
    TransactionCreateConvertedTotalTaxAmountCalculated,
    z.ZodTypeDef,
    unknown
  > = z.union([z.number(), z.string()]);

/** @internal */
export type TransactionCreateConvertedTotalTaxAmountCalculated$Outbound =
  | number
  | string;

/** @internal */
export const TransactionCreateConvertedTotalTaxAmountCalculated$outboundSchema:
  z.ZodType<
    TransactionCreateConvertedTotalTaxAmountCalculated$Outbound,
    z.ZodTypeDef,
    TransactionCreateConvertedTotalTaxAmountCalculated
  > = z.union([z.number(), z.string()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionCreateConvertedTotalTaxAmountCalculated$ {
  /** @deprecated use `TransactionCreateConvertedTotalTaxAmountCalculated$inboundSchema` instead. */
  export const inboundSchema =
    TransactionCreateConvertedTotalTaxAmountCalculated$inboundSchema;
  /** @deprecated use `TransactionCreateConvertedTotalTaxAmountCalculated$outboundSchema` instead. */
  export const outboundSchema =
    TransactionCreateConvertedTotalTaxAmountCalculated$outboundSchema;
  /** @deprecated use `TransactionCreateConvertedTotalTaxAmountCalculated$Outbound` instead. */
  export type Outbound =
    TransactionCreateConvertedTotalTaxAmountCalculated$Outbound;
}

export function transactionCreateConvertedTotalTaxAmountCalculatedToJSON(
  transactionCreateConvertedTotalTaxAmountCalculated:
    TransactionCreateConvertedTotalTaxAmountCalculated,
): string {
  return JSON.stringify(
    TransactionCreateConvertedTotalTaxAmountCalculated$outboundSchema.parse(
      transactionCreateConvertedTotalTaxAmountCalculated,
    ),
  );
}

export function transactionCreateConvertedTotalTaxAmountCalculatedFromJSON(
  jsonString: string,
): SafeParseResult<
  TransactionCreateConvertedTotalTaxAmountCalculated,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      TransactionCreateConvertedTotalTaxAmountCalculated$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'TransactionCreateConvertedTotalTaxAmountCalculated' from JSON`,
  );
}

/** @internal */
export const TransactionCreateConversionRate$inboundSchema: z.ZodType<
  TransactionCreateConversionRate,
  z.ZodTypeDef,
  unknown
> = z.union([z.number(), z.string()]);

/** @internal */
export type TransactionCreateConversionRate$Outbound = number | string;

/** @internal */
export const TransactionCreateConversionRate$outboundSchema: z.ZodType<
  TransactionCreateConversionRate$Outbound,
  z.ZodTypeDef,
  TransactionCreateConversionRate
> = z.union([z.number(), z.string()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionCreateConversionRate$ {
  /** @deprecated use `TransactionCreateConversionRate$inboundSchema` instead. */
  export const inboundSchema = TransactionCreateConversionRate$inboundSchema;
  /** @deprecated use `TransactionCreateConversionRate$outboundSchema` instead. */
  export const outboundSchema = TransactionCreateConversionRate$outboundSchema;
  /** @deprecated use `TransactionCreateConversionRate$Outbound` instead. */
  export type Outbound = TransactionCreateConversionRate$Outbound;
}

export function transactionCreateConversionRateToJSON(
  transactionCreateConversionRate: TransactionCreateConversionRate,
): string {
  return JSON.stringify(
    TransactionCreateConversionRate$outboundSchema.parse(
      transactionCreateConversionRate,
    ),
  );
}

export function transactionCreateConversionRateFromJSON(
  jsonString: string,
): SafeParseResult<TransactionCreateConversionRate, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TransactionCreateConversionRate$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TransactionCreateConversionRate' from JSON`,
  );
}

/** @internal */
export const TransactionCreateConvertedTaxableAmount$inboundSchema: z.ZodType<
  TransactionCreateConvertedTaxableAmount,
  z.ZodTypeDef,
  unknown
> = z.union([z.number(), z.string()]);

/** @internal */
export type TransactionCreateConvertedTaxableAmount$Outbound = number | string;

/** @internal */
export const TransactionCreateConvertedTaxableAmount$outboundSchema: z.ZodType<
  TransactionCreateConvertedTaxableAmount$Outbound,
  z.ZodTypeDef,
  TransactionCreateConvertedTaxableAmount
> = z.union([z.number(), z.string()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionCreateConvertedTaxableAmount$ {
  /** @deprecated use `TransactionCreateConvertedTaxableAmount$inboundSchema` instead. */
  export const inboundSchema =
    TransactionCreateConvertedTaxableAmount$inboundSchema;
  /** @deprecated use `TransactionCreateConvertedTaxableAmount$outboundSchema` instead. */
  export const outboundSchema =
    TransactionCreateConvertedTaxableAmount$outboundSchema;
  /** @deprecated use `TransactionCreateConvertedTaxableAmount$Outbound` instead. */
  export type Outbound = TransactionCreateConvertedTaxableAmount$Outbound;
}

export function transactionCreateConvertedTaxableAmountToJSON(
  transactionCreateConvertedTaxableAmount:
    TransactionCreateConvertedTaxableAmount,
): string {
  return JSON.stringify(
    TransactionCreateConvertedTaxableAmount$outboundSchema.parse(
      transactionCreateConvertedTaxableAmount,
    ),
  );
}

export function transactionCreateConvertedTaxableAmountFromJSON(
  jsonString: string,
): SafeParseResult<
  TransactionCreateConvertedTaxableAmount,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      TransactionCreateConvertedTaxableAmount$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'TransactionCreateConvertedTaxableAmount' from JSON`,
  );
}

/** @internal */
export const TransactionCreateConvertedTotalDiscount$inboundSchema: z.ZodType<
  TransactionCreateConvertedTotalDiscount,
  z.ZodTypeDef,
  unknown
> = z.union([z.number(), z.string()]);

/** @internal */
export type TransactionCreateConvertedTotalDiscount$Outbound = number | string;

/** @internal */
export const TransactionCreateConvertedTotalDiscount$outboundSchema: z.ZodType<
  TransactionCreateConvertedTotalDiscount$Outbound,
  z.ZodTypeDef,
  TransactionCreateConvertedTotalDiscount
> = z.union([z.number(), z.string()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionCreateConvertedTotalDiscount$ {
  /** @deprecated use `TransactionCreateConvertedTotalDiscount$inboundSchema` instead. */
  export const inboundSchema =
    TransactionCreateConvertedTotalDiscount$inboundSchema;
  /** @deprecated use `TransactionCreateConvertedTotalDiscount$outboundSchema` instead. */
  export const outboundSchema =
    TransactionCreateConvertedTotalDiscount$outboundSchema;
  /** @deprecated use `TransactionCreateConvertedTotalDiscount$Outbound` instead. */
  export type Outbound = TransactionCreateConvertedTotalDiscount$Outbound;
}

export function transactionCreateConvertedTotalDiscountToJSON(
  transactionCreateConvertedTotalDiscount:
    TransactionCreateConvertedTotalDiscount,
): string {
  return JSON.stringify(
    TransactionCreateConvertedTotalDiscount$outboundSchema.parse(
      transactionCreateConvertedTotalDiscount,
    ),
  );
}

export function transactionCreateConvertedTotalDiscountFromJSON(
  jsonString: string,
): SafeParseResult<
  TransactionCreateConvertedTotalDiscount,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      TransactionCreateConvertedTotalDiscount$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'TransactionCreateConvertedTotalDiscount' from JSON`,
  );
}

/** @internal */
export const TransactionCreateConvertedSubtotal$inboundSchema: z.ZodType<
  TransactionCreateConvertedSubtotal,
  z.ZodTypeDef,
  unknown
> = z.union([z.number(), z.string()]);

/** @internal */
export type TransactionCreateConvertedSubtotal$Outbound = number | string;

/** @internal */
export const TransactionCreateConvertedSubtotal$outboundSchema: z.ZodType<
  TransactionCreateConvertedSubtotal$Outbound,
  z.ZodTypeDef,
  TransactionCreateConvertedSubtotal
> = z.union([z.number(), z.string()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionCreateConvertedSubtotal$ {
  /** @deprecated use `TransactionCreateConvertedSubtotal$inboundSchema` instead. */
  export const inboundSchema = TransactionCreateConvertedSubtotal$inboundSchema;
  /** @deprecated use `TransactionCreateConvertedSubtotal$outboundSchema` instead. */
  export const outboundSchema =
    TransactionCreateConvertedSubtotal$outboundSchema;
  /** @deprecated use `TransactionCreateConvertedSubtotal$Outbound` instead. */
  export type Outbound = TransactionCreateConvertedSubtotal$Outbound;
}

export function transactionCreateConvertedSubtotalToJSON(
  transactionCreateConvertedSubtotal: TransactionCreateConvertedSubtotal,
): string {
  return JSON.stringify(
    TransactionCreateConvertedSubtotal$outboundSchema.parse(
      transactionCreateConvertedSubtotal,
    ),
  );
}

export function transactionCreateConvertedSubtotalFromJSON(
  jsonString: string,
): SafeParseResult<TransactionCreateConvertedSubtotal, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      TransactionCreateConvertedSubtotal$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TransactionCreateConvertedSubtotal' from JSON`,
  );
}

/** @internal */
export const TransactionCreateConvertedTotalTaxLiabilityAmount$inboundSchema:
  z.ZodType<
    TransactionCreateConvertedTotalTaxLiabilityAmount,
    z.ZodTypeDef,
    unknown
  > = z.union([z.number(), z.string()]);

/** @internal */
export type TransactionCreateConvertedTotalTaxLiabilityAmount$Outbound =
  | number
  | string;

/** @internal */
export const TransactionCreateConvertedTotalTaxLiabilityAmount$outboundSchema:
  z.ZodType<
    TransactionCreateConvertedTotalTaxLiabilityAmount$Outbound,
    z.ZodTypeDef,
    TransactionCreateConvertedTotalTaxLiabilityAmount
  > = z.union([z.number(), z.string()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionCreateConvertedTotalTaxLiabilityAmount$ {
  /** @deprecated use `TransactionCreateConvertedTotalTaxLiabilityAmount$inboundSchema` instead. */
  export const inboundSchema =
    TransactionCreateConvertedTotalTaxLiabilityAmount$inboundSchema;
  /** @deprecated use `TransactionCreateConvertedTotalTaxLiabilityAmount$outboundSchema` instead. */
  export const outboundSchema =
    TransactionCreateConvertedTotalTaxLiabilityAmount$outboundSchema;
  /** @deprecated use `TransactionCreateConvertedTotalTaxLiabilityAmount$Outbound` instead. */
  export type Outbound =
    TransactionCreateConvertedTotalTaxLiabilityAmount$Outbound;
}

export function transactionCreateConvertedTotalTaxLiabilityAmountToJSON(
  transactionCreateConvertedTotalTaxLiabilityAmount:
    TransactionCreateConvertedTotalTaxLiabilityAmount,
): string {
  return JSON.stringify(
    TransactionCreateConvertedTotalTaxLiabilityAmount$outboundSchema.parse(
      transactionCreateConvertedTotalTaxLiabilityAmount,
    ),
  );
}

export function transactionCreateConvertedTotalTaxLiabilityAmountFromJSON(
  jsonString: string,
): SafeParseResult<
  TransactionCreateConvertedTotalTaxLiabilityAmount,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      TransactionCreateConvertedTotalTaxLiabilityAmount$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'TransactionCreateConvertedTotalTaxLiabilityAmount' from JSON`,
  );
}

/** @internal */
export const TransactionCreateAddresses$inboundSchema: z.ZodType<
  TransactionCreateAddresses,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.array(TransactionAddressBuilder$inboundSchema),
  z.array(AddressInput$inboundSchema),
]);

/** @internal */
export type TransactionCreateAddresses$Outbound =
  | Array<TransactionAddressBuilder$Outbound>
  | Array<AddressInput$Outbound>;

/** @internal */
export const TransactionCreateAddresses$outboundSchema: z.ZodType<
  TransactionCreateAddresses$Outbound,
  z.ZodTypeDef,
  TransactionCreateAddresses
> = z.union([
  z.array(TransactionAddressBuilder$outboundSchema),
  z.array(AddressInput$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionCreateAddresses$ {
  /** @deprecated use `TransactionCreateAddresses$inboundSchema` instead. */
  export const inboundSchema = TransactionCreateAddresses$inboundSchema;
  /** @deprecated use `TransactionCreateAddresses$outboundSchema` instead. */
  export const outboundSchema = TransactionCreateAddresses$outboundSchema;
  /** @deprecated use `TransactionCreateAddresses$Outbound` instead. */
  export type Outbound = TransactionCreateAddresses$Outbound;
}

export function transactionCreateAddressesToJSON(
  transactionCreateAddresses: TransactionCreateAddresses,
): string {
  return JSON.stringify(
    TransactionCreateAddresses$outboundSchema.parse(transactionCreateAddresses),
  );
}

export function transactionCreateAddressesFromJSON(
  jsonString: string,
): SafeParseResult<TransactionCreateAddresses, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TransactionCreateAddresses$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TransactionCreateAddresses' from JSON`,
  );
}

/** @internal */
export const TransactionCreate$inboundSchema: z.ZodType<
  TransactionCreate,
  z.ZodTypeDef,
  unknown
> = z.object({
  requires_exemption: z.nullable(ExemptionRequired$inboundSchema).optional(),
  organization_id: z.string(),
  external_id: z.string(),
  date: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  shop_date: z.nullable(z.string().transform(v => new RFCDate(v))).optional(),
  shop_date_tz: z.nullable(z.string()).optional(),
  status: TransactionStatusEnum$inboundSchema.optional(),
  description: z.nullable(z.string()).optional(),
  refund_status: z.nullable(TransactionRefundStatus$inboundSchema).optional(),
  total_amount: z.union([z.number(), z.string()]).optional(),
  customer_id: z.nullable(z.string()).optional(),
  marketplace: z.nullable(z.boolean()).optional(),
  exempt: z.nullable(TransactionExemptStatusEnum$inboundSchema).optional(),
  exemptions: z.nullable(z.array(Exemption$inboundSchema)).optional(),
  related_to: z.nullable(z.string()).optional(),
  secondary_external_id: z.nullable(z.string()).optional(),
  secondary_source: z.nullable(z.string()).optional(),
  external_friendly_id: z.nullable(z.string()).optional(),
  total_tax_amount_imported: z.union([z.number(), z.string()]).optional(),
  tax_rate_imported: z.union([z.number(), z.string()]).optional(),
  total_tax_amount_calculated: z.union([z.number(), z.string()]).optional(),
  tax_rate_calculated: z.union([z.number(), z.string()]).optional(),
  total_tax_liability_amount: z.union([z.number(), z.string()]).optional(),
  tax_liability_source: z.nullable(TaxLiabilitySourceEnum$inboundSchema)
    .optional(),
  taxable_amount: z.union([z.number(), z.string()]).optional(),
  currency: CurrencyEnum$inboundSchema.optional(),
  locked: z.boolean().default(false),
  source: SourceEnum$inboundSchema.optional(),
  connection_id: z.nullable(z.string()).optional(),
  filing_id: z.nullable(z.string()).optional(),
  city: z.nullable(z.string()).optional(),
  county: z.nullable(z.string()).optional(),
  state: z.nullable(z.string()).optional(),
  country: z.nullable(CountryCodeEnum$inboundSchema).optional(),
  postal_code: z.nullable(z.string()).optional(),
  tax_id: z.nullable(z.string()).optional(),
  address_status: AddressStatus$inboundSchema.optional(),
  processing_status: ProcessingStatusEnum$inboundSchema.optional(),
  destination_currency: z.nullable(CurrencyEnum$inboundSchema).optional(),
  converted_total_amount: z.nullable(z.union([z.number(), z.string()]))
    .optional(),
  converted_total_tax_amount_imported: z.nullable(
    z.union([z.number(), z.string()]),
  ).optional(),
  converted_total_tax_amount_calculated: z.nullable(
    z.union([z.number(), z.string()]),
  ).optional(),
  conversion_rate: z.nullable(z.union([z.number(), z.string()])).optional(),
  converted_taxable_amount: z.nullable(z.union([z.number(), z.string()]))
    .optional(),
  converted_total_discount: z.nullable(z.union([z.number(), z.string()]))
    .optional(),
  converted_subtotal: z.nullable(z.union([z.number(), z.string()])).optional(),
  converted_total_tax_liability_amount: z.nullable(
    z.union([z.number(), z.string()]),
  ).optional(),
  addresses: z.union([
    z.array(TransactionAddressBuilder$inboundSchema),
    z.array(AddressInput$inboundSchema),
  ]),
  transaction_items: z.array(TransactionItemCreateUpdate$inboundSchema),
  customer: z.nullable(CustomerCreate$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "requires_exemption": "requiresExemption",
    "organization_id": "organizationId",
    "external_id": "externalId",
    "shop_date": "shopDate",
    "shop_date_tz": "shopDateTz",
    "refund_status": "refundStatus",
    "total_amount": "totalAmount",
    "customer_id": "customerId",
    "related_to": "relatedTo",
    "secondary_external_id": "secondaryExternalId",
    "secondary_source": "secondarySource",
    "external_friendly_id": "externalFriendlyId",
    "total_tax_amount_imported": "totalTaxAmountImported",
    "tax_rate_imported": "taxRateImported",
    "total_tax_amount_calculated": "totalTaxAmountCalculated",
    "tax_rate_calculated": "taxRateCalculated",
    "total_tax_liability_amount": "totalTaxLiabilityAmount",
    "tax_liability_source": "taxLiabilitySource",
    "taxable_amount": "taxableAmount",
    "connection_id": "connectionId",
    "filing_id": "filingId",
    "postal_code": "postalCode",
    "tax_id": "taxId",
    "address_status": "addressStatus",
    "processing_status": "processingStatus",
    "destination_currency": "destinationCurrency",
    "converted_total_amount": "convertedTotalAmount",
    "converted_total_tax_amount_imported": "convertedTotalTaxAmountImported",
    "converted_total_tax_amount_calculated":
      "convertedTotalTaxAmountCalculated",
    "conversion_rate": "conversionRate",
    "converted_taxable_amount": "convertedTaxableAmount",
    "converted_total_discount": "convertedTotalDiscount",
    "converted_subtotal": "convertedSubtotal",
    "converted_total_tax_liability_amount": "convertedTotalTaxLiabilityAmount",
    "transaction_items": "transactionItems",
  });
});

/** @internal */
export type TransactionCreate$Outbound = {
  requires_exemption?: ExemptionRequired$Outbound | null | undefined;
  organization_id: string;
  external_id: string;
  date: string;
  shop_date?: string | null | undefined;
  shop_date_tz?: string | null | undefined;
  status?: string | undefined;
  description?: string | null | undefined;
  refund_status?: string | null | undefined;
  total_amount?: number | string | undefined;
  customer_id?: string | null | undefined;
  marketplace?: boolean | null | undefined;
  exempt?: string | null | undefined;
  exemptions?: Array<Exemption$Outbound> | null | undefined;
  related_to?: string | null | undefined;
  secondary_external_id?: string | null | undefined;
  secondary_source?: string | null | undefined;
  external_friendly_id?: string | null | undefined;
  total_tax_amount_imported?: number | string | undefined;
  tax_rate_imported?: number | string | undefined;
  total_tax_amount_calculated?: number | string | undefined;
  tax_rate_calculated?: number | string | undefined;
  total_tax_liability_amount?: number | string | undefined;
  tax_liability_source?: string | null | undefined;
  taxable_amount?: number | string | undefined;
  currency?: string | undefined;
  locked: boolean;
  source?: string | undefined;
  connection_id?: string | null | undefined;
  filing_id?: string | null | undefined;
  city?: string | null | undefined;
  county?: string | null | undefined;
  state?: string | null | undefined;
  country?: string | null | undefined;
  postal_code?: string | null | undefined;
  tax_id?: string | null | undefined;
  address_status?: string | undefined;
  processing_status?: string | undefined;
  destination_currency?: string | null | undefined;
  converted_total_amount?: number | string | null | undefined;
  converted_total_tax_amount_imported?: number | string | null | undefined;
  converted_total_tax_amount_calculated?: number | string | null | undefined;
  conversion_rate?: number | string | null | undefined;
  converted_taxable_amount?: number | string | null | undefined;
  converted_total_discount?: number | string | null | undefined;
  converted_subtotal?: number | string | null | undefined;
  converted_total_tax_liability_amount?: number | string | null | undefined;
  addresses:
    | Array<TransactionAddressBuilder$Outbound>
    | Array<AddressInput$Outbound>;
  transaction_items: Array<TransactionItemCreateUpdate$Outbound>;
  customer?: CustomerCreate$Outbound | null | undefined;
};

/** @internal */
export const TransactionCreate$outboundSchema: z.ZodType<
  TransactionCreate$Outbound,
  z.ZodTypeDef,
  TransactionCreate
> = z.object({
  requiresExemption: z.nullable(ExemptionRequired$outboundSchema).optional(),
  organizationId: z.string(),
  externalId: z.string(),
  date: z.date().transform(v => v.toISOString()),
  shopDate: z.nullable(z.instanceof(RFCDate).transform(v => v.toString()))
    .optional(),
  shopDateTz: z.nullable(z.string()).optional(),
  status: TransactionStatusEnum$outboundSchema.optional(),
  description: z.nullable(z.string()).optional(),
  refundStatus: z.nullable(TransactionRefundStatus$outboundSchema).optional(),
  totalAmount: z.union([z.number(), z.string()]).optional(),
  customerId: z.nullable(z.string()).optional(),
  marketplace: z.nullable(z.boolean()).optional(),
  exempt: z.nullable(TransactionExemptStatusEnum$outboundSchema).optional(),
  exemptions: z.nullable(z.array(Exemption$outboundSchema)).optional(),
  relatedTo: z.nullable(z.string()).optional(),
  secondaryExternalId: z.nullable(z.string()).optional(),
  secondarySource: z.nullable(z.string()).optional(),
  externalFriendlyId: z.nullable(z.string()).optional(),
  totalTaxAmountImported: z.union([z.number(), z.string()]).optional(),
  taxRateImported: z.union([z.number(), z.string()]).optional(),
  totalTaxAmountCalculated: z.union([z.number(), z.string()]).optional(),
  taxRateCalculated: z.union([z.number(), z.string()]).optional(),
  totalTaxLiabilityAmount: z.union([z.number(), z.string()]).optional(),
  taxLiabilitySource: z.nullable(TaxLiabilitySourceEnum$outboundSchema)
    .optional(),
  taxableAmount: z.union([z.number(), z.string()]).optional(),
  currency: CurrencyEnum$outboundSchema.optional(),
  locked: z.boolean().default(false),
  source: SourceEnum$outboundSchema.optional(),
  connectionId: z.nullable(z.string()).optional(),
  filingId: z.nullable(z.string()).optional(),
  city: z.nullable(z.string()).optional(),
  county: z.nullable(z.string()).optional(),
  state: z.nullable(z.string()).optional(),
  country: z.nullable(CountryCodeEnum$outboundSchema).optional(),
  postalCode: z.nullable(z.string()).optional(),
  taxId: z.nullable(z.string()).optional(),
  addressStatus: AddressStatus$outboundSchema.optional(),
  processingStatus: ProcessingStatusEnum$outboundSchema.optional(),
  destinationCurrency: z.nullable(CurrencyEnum$outboundSchema).optional(),
  convertedTotalAmount: z.nullable(z.union([z.number(), z.string()]))
    .optional(),
  convertedTotalTaxAmountImported: z.nullable(z.union([z.number(), z.string()]))
    .optional(),
  convertedTotalTaxAmountCalculated: z.nullable(
    z.union([z.number(), z.string()]),
  ).optional(),
  conversionRate: z.nullable(z.union([z.number(), z.string()])).optional(),
  convertedTaxableAmount: z.nullable(z.union([z.number(), z.string()]))
    .optional(),
  convertedTotalDiscount: z.nullable(z.union([z.number(), z.string()]))
    .optional(),
  convertedSubtotal: z.nullable(z.union([z.number(), z.string()])).optional(),
  convertedTotalTaxLiabilityAmount: z.nullable(
    z.union([z.number(), z.string()]),
  ).optional(),
  addresses: z.union([
    z.array(TransactionAddressBuilder$outboundSchema),
    z.array(AddressInput$outboundSchema),
  ]),
  transactionItems: z.array(TransactionItemCreateUpdate$outboundSchema),
  customer: z.nullable(CustomerCreate$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    requiresExemption: "requires_exemption",
    organizationId: "organization_id",
    externalId: "external_id",
    shopDate: "shop_date",
    shopDateTz: "shop_date_tz",
    refundStatus: "refund_status",
    totalAmount: "total_amount",
    customerId: "customer_id",
    relatedTo: "related_to",
    secondaryExternalId: "secondary_external_id",
    secondarySource: "secondary_source",
    externalFriendlyId: "external_friendly_id",
    totalTaxAmountImported: "total_tax_amount_imported",
    taxRateImported: "tax_rate_imported",
    totalTaxAmountCalculated: "total_tax_amount_calculated",
    taxRateCalculated: "tax_rate_calculated",
    totalTaxLiabilityAmount: "total_tax_liability_amount",
    taxLiabilitySource: "tax_liability_source",
    taxableAmount: "taxable_amount",
    connectionId: "connection_id",
    filingId: "filing_id",
    postalCode: "postal_code",
    taxId: "tax_id",
    addressStatus: "address_status",
    processingStatus: "processing_status",
    destinationCurrency: "destination_currency",
    convertedTotalAmount: "converted_total_amount",
    convertedTotalTaxAmountImported: "converted_total_tax_amount_imported",
    convertedTotalTaxAmountCalculated: "converted_total_tax_amount_calculated",
    conversionRate: "conversion_rate",
    convertedTaxableAmount: "converted_taxable_amount",
    convertedTotalDiscount: "converted_total_discount",
    convertedSubtotal: "converted_subtotal",
    convertedTotalTaxLiabilityAmount: "converted_total_tax_liability_amount",
    transactionItems: "transaction_items",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionCreate$ {
  /** @deprecated use `TransactionCreate$inboundSchema` instead. */
  export const inboundSchema = TransactionCreate$inboundSchema;
  /** @deprecated use `TransactionCreate$outboundSchema` instead. */
  export const outboundSchema = TransactionCreate$outboundSchema;
  /** @deprecated use `TransactionCreate$Outbound` instead. */
  export type Outbound = TransactionCreate$Outbound;
}

export function transactionCreateToJSON(
  transactionCreate: TransactionCreate,
): string {
  return JSON.stringify(
    TransactionCreate$outboundSchema.parse(transactionCreate),
  );
}

export function transactionCreateFromJSON(
  jsonString: string,
): SafeParseResult<TransactionCreate, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TransactionCreate$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TransactionCreate' from JSON`,
  );
}
