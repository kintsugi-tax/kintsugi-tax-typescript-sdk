/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  AddressStatus,
  AddressStatus$inboundSchema,
  AddressStatus$outboundSchema,
} from "./addressstatus.js";
import {
  CountryCodeEnum,
  CountryCodeEnum$inboundSchema,
  CountryCodeEnum$outboundSchema,
} from "./countrycodeenum.js";
import {
  CurrencyEnum,
  CurrencyEnum$inboundSchema,
  CurrencyEnum$outboundSchema,
} from "./currencyenum.js";
import {
  CustomerCreate,
  CustomerCreate$inboundSchema,
  CustomerCreate$Outbound,
  CustomerCreate$outboundSchema,
} from "./customercreate.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  Exemption,
  Exemption$inboundSchema,
  Exemption$Outbound,
  Exemption$outboundSchema,
} from "./exemption.js";
import {
  ExemptionRequired,
  ExemptionRequired$inboundSchema,
  ExemptionRequired$Outbound,
  ExemptionRequired$outboundSchema,
} from "./exemptionrequired.js";
import {
  ProcessingStatusEnum,
  ProcessingStatusEnum$inboundSchema,
  ProcessingStatusEnum$outboundSchema,
} from "./processingstatusenum.js";
import {
  SourceEnum,
  SourceEnum$inboundSchema,
  SourceEnum$outboundSchema,
} from "./sourceenum.js";
import {
  TaxLiabilitySourceEnum,
  TaxLiabilitySourceEnum$inboundSchema,
  TaxLiabilitySourceEnum$outboundSchema,
} from "./taxliabilitysourceenum.js";
import {
  TransactionAddressBuilder,
  TransactionAddressBuilder$inboundSchema,
  TransactionAddressBuilder$Outbound,
  TransactionAddressBuilder$outboundSchema,
} from "./transactionaddressbuilder.js";
import {
  TransactionExemptStatusEnum,
  TransactionExemptStatusEnum$inboundSchema,
  TransactionExemptStatusEnum$outboundSchema,
} from "./transactionexemptstatusenum.js";
import {
  TransactionItemCreateUpdate,
  TransactionItemCreateUpdate$inboundSchema,
  TransactionItemCreateUpdate$Outbound,
  TransactionItemCreateUpdate$outboundSchema,
} from "./transactionitemcreateupdate.js";
import {
  TransactionRefundStatus,
  TransactionRefundStatus$inboundSchema,
  TransactionRefundStatus$outboundSchema,
} from "./transactionrefundstatus.js";
import {
  TransactionStatusEnum,
  TransactionStatusEnum$inboundSchema,
  TransactionStatusEnum$outboundSchema,
} from "./transactionstatusenum.js";

export type TransactionCreate = {
  requiresExemption?: ExemptionRequired | undefined;
  /**
   * Unique identifier of the organization.
   */
  organizationId: string;
  /**
   * External identifier of the transaction.
   */
  externalId: string;
  /**
   * Transaction date and time
   */
  date: Date;
  /**
   * Transaction date in the shop's local timezone
   */
  shopDate?: string | undefined;
  /**
   * Timezone of the shop
   */
  shopDateTz?: string | undefined;
  status?: TransactionStatusEnum | undefined;
  /**
   * Description of the transaction.
   */
  description?: string | undefined;
  /**
   * Shopify has 2 order statuses for refund case: refunded and partially_refunded
   *
   * @remarks
   * If the given order has different status from these 2, we will set the
   * transaction's refund_status to PARTIALLY_REFUNDED by default.
   */
  refundStatus?: TransactionRefundStatus | undefined;
  /**
   * Total amount of the transaction.
   */
  totalAmount?: number | undefined;
  /**
   * Unique identifier of the customer.
   */
  customerId?: string | undefined;
  /**
   * Indicates if transaction is marketplace-based.
   */
  marketplace?: boolean | undefined;
  /**
   * Based on transaction item exempt status.
   *
   * @remarks
   * NOT EXEMPT: None of the items are NOT EXEMPT
   * PARTIALLY EXEMPT: At least some of the items are NOT EXEMPT
   * FULLY_EXEMPT: All items sold in the transaction are EXEMPT
   */
  exempt?: TransactionExemptStatusEnum | undefined;
  /**
   * List of exemptions applied (if any).
   */
  exemptions?: Array<Exemption> | undefined;
  /**
   * Related transaction identifier.
   */
  relatedTo?: string | undefined;
  /**
   * Secondary External Identifier.
   */
  secondaryExternalId?: string | undefined;
  /**
   * Secondary source information
   */
  secondarySource?: string | undefined;
  /**
   * Friendly identifier of the original item.
   */
  externalFriendlyId?: string | undefined;
  /**
   * Imported tax amount.
   */
  totalTaxAmountImported?: number | undefined;
  /**
   * Imported tax rate.
   */
  taxRateImported?: number | undefined;
  /**
   * Calculated tax amount.
   */
  totalTaxAmountCalculated?: number | undefined;
  /**
   * Calculated tax rate.
   */
  taxRateCalculated?: number | undefined;
  /**
   * Total tax liability amount.
   */
  totalTaxLiabilityAmount?: number | undefined;
  taxLiabilitySource?: TaxLiabilitySourceEnum | undefined;
  /**
   * Taxable amount.
   */
  taxableAmount?: number | undefined;
  currency?: CurrencyEnum | undefined;
  /**
   * Transaction lock status.
   */
  locked?: boolean | undefined;
  source?: SourceEnum | undefined;
  /**
   * Connection Identifier
   */
  connectionId?: string | undefined;
  /**
   * Filing identifier.
   */
  filingId?: string | undefined;
  /**
   * City of the transaction address.
   */
  city?: string | undefined;
  /**
   * County of the transaction address.
   */
  county?: string | undefined;
  /**
   * State of the transaction address.
   */
  state?: string | undefined;
  country?: CountryCodeEnum | undefined;
  /**
   * Postal code of the transaction.
   */
  postalCode?: string | undefined;
  /**
   * Tax ID associated with the transaction
   */
  taxId?: string | undefined;
  addressStatus?: AddressStatus | undefined;
  /**
   * Our transaction state, used to determine when/if a transaction needs additional
   *
   * @remarks
   * processing.
   */
  processingStatus?: ProcessingStatusEnum | undefined;
  destinationCurrency?: CurrencyEnum | undefined;
  /**
   * Converted total amount.
   */
  convertedTotalAmount?: number | undefined;
  /**
   * Converted imported tax amount.
   */
  convertedTotalTaxAmountImported?: number | undefined;
  /**
   * Converted calculated tax amount.
   */
  convertedTotalTaxAmountCalculated?: number | undefined;
  /**
   * Currency conversion rate.
   */
  conversionRate?: number | undefined;
  /**
   * Converted taxable amount.
   */
  convertedTaxableAmount?: number | undefined;
  /**
   * Converted total discount amount.
   */
  convertedTotalDiscount?: number | undefined;
  /**
   * Converted subtotal amount.
   */
  convertedSubtotal?: number | undefined;
  /**
   * Converted total tax liability amount.
   */
  convertedTotalTaxLiabilityAmount?: number | undefined;
  addresses: Array<TransactionAddressBuilder>;
  transactionItems: Array<TransactionItemCreateUpdate>;
  customer?: CustomerCreate | undefined;
};

/** @internal */
export const TransactionCreate$inboundSchema: z.ZodType<
  TransactionCreate,
  z.ZodTypeDef,
  unknown
> = z.object({
  requires_exemption: ExemptionRequired$inboundSchema.optional(),
  organization_id: z.string(),
  external_id: z.string(),
  date: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  shop_date: z.string().optional(),
  shop_date_tz: z.string().optional(),
  status: TransactionStatusEnum$inboundSchema.optional(),
  description: z.string().optional(),
  refund_status: TransactionRefundStatus$inboundSchema.optional(),
  total_amount: z.number().default(0.00),
  customer_id: z.string().optional(),
  marketplace: z.boolean().default(false),
  exempt: TransactionExemptStatusEnum$inboundSchema.optional(),
  exemptions: z.array(Exemption$inboundSchema).optional(),
  related_to: z.string().optional(),
  secondary_external_id: z.string().optional(),
  secondary_source: z.string().optional(),
  external_friendly_id: z.string().optional(),
  total_tax_amount_imported: z.number().default(0.00),
  tax_rate_imported: z.number().default(0.00),
  total_tax_amount_calculated: z.number().default(0.00),
  tax_rate_calculated: z.number().default(0.00),
  total_tax_liability_amount: z.number().default(0.00),
  tax_liability_source: TaxLiabilitySourceEnum$inboundSchema.optional(),
  taxable_amount: z.number().default(0.00),
  currency: CurrencyEnum$inboundSchema.optional(),
  locked: z.boolean().default(false),
  source: SourceEnum$inboundSchema.optional(),
  connection_id: z.string().optional(),
  filing_id: z.string().optional(),
  city: z.string().optional(),
  county: z.string().optional(),
  state: z.string().optional(),
  country: CountryCodeEnum$inboundSchema.optional(),
  postal_code: z.string().optional(),
  tax_id: z.string().optional(),
  address_status: AddressStatus$inboundSchema.optional(),
  processing_status: ProcessingStatusEnum$inboundSchema.optional(),
  destination_currency: CurrencyEnum$inboundSchema.optional(),
  converted_total_amount: z.number().optional(),
  converted_total_tax_amount_imported: z.number().optional(),
  converted_total_tax_amount_calculated: z.number().optional(),
  conversion_rate: z.number().optional(),
  converted_taxable_amount: z.number().optional(),
  converted_total_discount: z.number().optional(),
  converted_subtotal: z.number().optional(),
  converted_total_tax_liability_amount: z.number().optional(),
  addresses: z.array(TransactionAddressBuilder$inboundSchema),
  transaction_items: z.array(TransactionItemCreateUpdate$inboundSchema),
  customer: CustomerCreate$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "requires_exemption": "requiresExemption",
    "organization_id": "organizationId",
    "external_id": "externalId",
    "shop_date": "shopDate",
    "shop_date_tz": "shopDateTz",
    "refund_status": "refundStatus",
    "total_amount": "totalAmount",
    "customer_id": "customerId",
    "related_to": "relatedTo",
    "secondary_external_id": "secondaryExternalId",
    "secondary_source": "secondarySource",
    "external_friendly_id": "externalFriendlyId",
    "total_tax_amount_imported": "totalTaxAmountImported",
    "tax_rate_imported": "taxRateImported",
    "total_tax_amount_calculated": "totalTaxAmountCalculated",
    "tax_rate_calculated": "taxRateCalculated",
    "total_tax_liability_amount": "totalTaxLiabilityAmount",
    "tax_liability_source": "taxLiabilitySource",
    "taxable_amount": "taxableAmount",
    "connection_id": "connectionId",
    "filing_id": "filingId",
    "postal_code": "postalCode",
    "tax_id": "taxId",
    "address_status": "addressStatus",
    "processing_status": "processingStatus",
    "destination_currency": "destinationCurrency",
    "converted_total_amount": "convertedTotalAmount",
    "converted_total_tax_amount_imported": "convertedTotalTaxAmountImported",
    "converted_total_tax_amount_calculated":
      "convertedTotalTaxAmountCalculated",
    "conversion_rate": "conversionRate",
    "converted_taxable_amount": "convertedTaxableAmount",
    "converted_total_discount": "convertedTotalDiscount",
    "converted_subtotal": "convertedSubtotal",
    "converted_total_tax_liability_amount": "convertedTotalTaxLiabilityAmount",
    "transaction_items": "transactionItems",
  });
});

/** @internal */
export type TransactionCreate$Outbound = {
  requires_exemption?: ExemptionRequired$Outbound | undefined;
  organization_id: string;
  external_id: string;
  date: string;
  shop_date?: string | undefined;
  shop_date_tz?: string | undefined;
  status?: string | undefined;
  description?: string | undefined;
  refund_status?: string | undefined;
  total_amount: number;
  customer_id?: string | undefined;
  marketplace: boolean;
  exempt?: string | undefined;
  exemptions?: Array<Exemption$Outbound> | undefined;
  related_to?: string | undefined;
  secondary_external_id?: string | undefined;
  secondary_source?: string | undefined;
  external_friendly_id?: string | undefined;
  total_tax_amount_imported: number;
  tax_rate_imported: number;
  total_tax_amount_calculated: number;
  tax_rate_calculated: number;
  total_tax_liability_amount: number;
  tax_liability_source?: string | undefined;
  taxable_amount: number;
  currency?: string | undefined;
  locked: boolean;
  source?: string | undefined;
  connection_id?: string | undefined;
  filing_id?: string | undefined;
  city?: string | undefined;
  county?: string | undefined;
  state?: string | undefined;
  country?: string | undefined;
  postal_code?: string | undefined;
  tax_id?: string | undefined;
  address_status?: string | undefined;
  processing_status?: string | undefined;
  destination_currency?: string | undefined;
  converted_total_amount?: number | undefined;
  converted_total_tax_amount_imported?: number | undefined;
  converted_total_tax_amount_calculated?: number | undefined;
  conversion_rate?: number | undefined;
  converted_taxable_amount?: number | undefined;
  converted_total_discount?: number | undefined;
  converted_subtotal?: number | undefined;
  converted_total_tax_liability_amount?: number | undefined;
  addresses: Array<TransactionAddressBuilder$Outbound>;
  transaction_items: Array<TransactionItemCreateUpdate$Outbound>;
  customer?: CustomerCreate$Outbound | undefined;
};

/** @internal */
export const TransactionCreate$outboundSchema: z.ZodType<
  TransactionCreate$Outbound,
  z.ZodTypeDef,
  TransactionCreate
> = z.object({
  requiresExemption: ExemptionRequired$outboundSchema.optional(),
  organizationId: z.string(),
  externalId: z.string(),
  date: z.date().transform(v => v.toISOString()),
  shopDate: z.string().optional(),
  shopDateTz: z.string().optional(),
  status: TransactionStatusEnum$outboundSchema.optional(),
  description: z.string().optional(),
  refundStatus: TransactionRefundStatus$outboundSchema.optional(),
  totalAmount: z.number().default(0.00),
  customerId: z.string().optional(),
  marketplace: z.boolean().default(false),
  exempt: TransactionExemptStatusEnum$outboundSchema.optional(),
  exemptions: z.array(Exemption$outboundSchema).optional(),
  relatedTo: z.string().optional(),
  secondaryExternalId: z.string().optional(),
  secondarySource: z.string().optional(),
  externalFriendlyId: z.string().optional(),
  totalTaxAmountImported: z.number().default(0.00),
  taxRateImported: z.number().default(0.00),
  totalTaxAmountCalculated: z.number().default(0.00),
  taxRateCalculated: z.number().default(0.00),
  totalTaxLiabilityAmount: z.number().default(0.00),
  taxLiabilitySource: TaxLiabilitySourceEnum$outboundSchema.optional(),
  taxableAmount: z.number().default(0.00),
  currency: CurrencyEnum$outboundSchema.optional(),
  locked: z.boolean().default(false),
  source: SourceEnum$outboundSchema.optional(),
  connectionId: z.string().optional(),
  filingId: z.string().optional(),
  city: z.string().optional(),
  county: z.string().optional(),
  state: z.string().optional(),
  country: CountryCodeEnum$outboundSchema.optional(),
  postalCode: z.string().optional(),
  taxId: z.string().optional(),
  addressStatus: AddressStatus$outboundSchema.optional(),
  processingStatus: ProcessingStatusEnum$outboundSchema.optional(),
  destinationCurrency: CurrencyEnum$outboundSchema.optional(),
  convertedTotalAmount: z.number().optional(),
  convertedTotalTaxAmountImported: z.number().optional(),
  convertedTotalTaxAmountCalculated: z.number().optional(),
  conversionRate: z.number().optional(),
  convertedTaxableAmount: z.number().optional(),
  convertedTotalDiscount: z.number().optional(),
  convertedSubtotal: z.number().optional(),
  convertedTotalTaxLiabilityAmount: z.number().optional(),
  addresses: z.array(TransactionAddressBuilder$outboundSchema),
  transactionItems: z.array(TransactionItemCreateUpdate$outboundSchema),
  customer: CustomerCreate$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    requiresExemption: "requires_exemption",
    organizationId: "organization_id",
    externalId: "external_id",
    shopDate: "shop_date",
    shopDateTz: "shop_date_tz",
    refundStatus: "refund_status",
    totalAmount: "total_amount",
    customerId: "customer_id",
    relatedTo: "related_to",
    secondaryExternalId: "secondary_external_id",
    secondarySource: "secondary_source",
    externalFriendlyId: "external_friendly_id",
    totalTaxAmountImported: "total_tax_amount_imported",
    taxRateImported: "tax_rate_imported",
    totalTaxAmountCalculated: "total_tax_amount_calculated",
    taxRateCalculated: "tax_rate_calculated",
    totalTaxLiabilityAmount: "total_tax_liability_amount",
    taxLiabilitySource: "tax_liability_source",
    taxableAmount: "taxable_amount",
    connectionId: "connection_id",
    filingId: "filing_id",
    postalCode: "postal_code",
    taxId: "tax_id",
    addressStatus: "address_status",
    processingStatus: "processing_status",
    destinationCurrency: "destination_currency",
    convertedTotalAmount: "converted_total_amount",
    convertedTotalTaxAmountImported: "converted_total_tax_amount_imported",
    convertedTotalTaxAmountCalculated: "converted_total_tax_amount_calculated",
    conversionRate: "conversion_rate",
    convertedTaxableAmount: "converted_taxable_amount",
    convertedTotalDiscount: "converted_total_discount",
    convertedSubtotal: "converted_subtotal",
    convertedTotalTaxLiabilityAmount: "converted_total_tax_liability_amount",
    transactionItems: "transaction_items",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionCreate$ {
  /** @deprecated use `TransactionCreate$inboundSchema` instead. */
  export const inboundSchema = TransactionCreate$inboundSchema;
  /** @deprecated use `TransactionCreate$outboundSchema` instead. */
  export const outboundSchema = TransactionCreate$outboundSchema;
  /** @deprecated use `TransactionCreate$Outbound` instead. */
  export type Outbound = TransactionCreate$Outbound;
}

export function transactionCreateToJSON(
  transactionCreate: TransactionCreate,
): string {
  return JSON.stringify(
    TransactionCreate$outboundSchema.parse(transactionCreate),
  );
}

export function transactionCreateFromJSON(
  jsonString: string,
): SafeParseResult<TransactionCreate, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TransactionCreate$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TransactionCreate' from JSON`,
  );
}
