/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { RFCDate } from "../types/rfcdate.js";
import {
  AttachmentRead,
  AttachmentRead$inboundSchema,
  AttachmentRead$Outbound,
  AttachmentRead$outboundSchema,
} from "./attachmentread.js";
import {
  CountryCodeEnum,
  CountryCodeEnum$inboundSchema,
  CountryCodeEnum$outboundSchema,
} from "./countrycodeenum.js";
import {
  CustomerRead,
  CustomerRead$inboundSchema,
  CustomerRead$Outbound,
  CustomerRead$outboundSchema,
} from "./customerread.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  ExemptionStatus,
  ExemptionStatus$inboundSchema,
  ExemptionStatus$outboundSchema,
} from "./exemptionstatus.js";
import {
  ExemptionType,
  ExemptionType$inboundSchema,
  ExemptionType$outboundSchema,
} from "./exemptiontype.js";

export type BackendSrcExemptionsSerializersExemptionRead = {
  countryCode?: CountryCodeEnum | undefined;
  /**
   * The jurisdiction identifier for the exemption
   */
  jurisdiction?: string | undefined;
  /**
   * Start date for the exemption validity period (YYYY-MM-DD format)
   */
  startDate: RFCDate;
  /**
   * End date for the exemption validity period (YYYY-MM-DD format)
   */
  endDate?: string | undefined;
  /**
   * Unique identifier for the transaction, if applicable
   */
  transactionId?: string | undefined;
  /**
   * Indicates whether the exemption is for a reseller
   */
  reseller?: boolean | undefined;
  /**
   * Federal Employer Identification Number
   */
  fein?: string | undefined;
  /**
   * Sales tax ID for the exemption
   */
  salesTaxId?: string | undefined;
  /**
   * Unique identifier for the exemption
   */
  id: string;
  customer?: CustomerRead | undefined;
  /**
   * List of attachments related to the exemption
   */
  attachment?: Array<AttachmentRead> | undefined;
  exemptionType: ExemptionType;
  status: ExemptionStatus;
};

/** @internal */
export const BackendSrcExemptionsSerializersExemptionRead$inboundSchema:
  z.ZodType<
    BackendSrcExemptionsSerializersExemptionRead,
    z.ZodTypeDef,
    unknown
  > = z.object({
    country_code: CountryCodeEnum$inboundSchema.optional(),
    jurisdiction: z.string().optional(),
    start_date: z.string().transform(v => new RFCDate(v)),
    end_date: z.string().optional(),
    transaction_id: z.string().optional(),
    reseller: z.boolean().default(false),
    FEIN: z.string().optional(),
    sales_tax_id: z.string().optional(),
    id: z.string(),
    customer: CustomerRead$inboundSchema.optional(),
    attachment: z.array(AttachmentRead$inboundSchema).optional(),
    exemption_type: ExemptionType$inboundSchema,
    status: ExemptionStatus$inboundSchema,
  }).transform((v) => {
    return remap$(v, {
      "country_code": "countryCode",
      "start_date": "startDate",
      "end_date": "endDate",
      "transaction_id": "transactionId",
      "FEIN": "fein",
      "sales_tax_id": "salesTaxId",
      "exemption_type": "exemptionType",
    });
  });

/** @internal */
export type BackendSrcExemptionsSerializersExemptionRead$Outbound = {
  country_code?: string | undefined;
  jurisdiction?: string | undefined;
  start_date: string;
  end_date?: string | undefined;
  transaction_id?: string | undefined;
  reseller: boolean;
  FEIN?: string | undefined;
  sales_tax_id?: string | undefined;
  id: string;
  customer?: CustomerRead$Outbound | undefined;
  attachment?: Array<AttachmentRead$Outbound> | undefined;
  exemption_type: string;
  status: string;
};

/** @internal */
export const BackendSrcExemptionsSerializersExemptionRead$outboundSchema:
  z.ZodType<
    BackendSrcExemptionsSerializersExemptionRead$Outbound,
    z.ZodTypeDef,
    BackendSrcExemptionsSerializersExemptionRead
  > = z.object({
    countryCode: CountryCodeEnum$outboundSchema.optional(),
    jurisdiction: z.string().optional(),
    startDate: z.instanceof(RFCDate).transform(v => v.toString()),
    endDate: z.string().optional(),
    transactionId: z.string().optional(),
    reseller: z.boolean().default(false),
    fein: z.string().optional(),
    salesTaxId: z.string().optional(),
    id: z.string(),
    customer: CustomerRead$outboundSchema.optional(),
    attachment: z.array(AttachmentRead$outboundSchema).optional(),
    exemptionType: ExemptionType$outboundSchema,
    status: ExemptionStatus$outboundSchema,
  }).transform((v) => {
    return remap$(v, {
      countryCode: "country_code",
      startDate: "start_date",
      endDate: "end_date",
      transactionId: "transaction_id",
      fein: "FEIN",
      salesTaxId: "sales_tax_id",
      exemptionType: "exemption_type",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BackendSrcExemptionsSerializersExemptionRead$ {
  /** @deprecated use `BackendSrcExemptionsSerializersExemptionRead$inboundSchema` instead. */
  export const inboundSchema =
    BackendSrcExemptionsSerializersExemptionRead$inboundSchema;
  /** @deprecated use `BackendSrcExemptionsSerializersExemptionRead$outboundSchema` instead. */
  export const outboundSchema =
    BackendSrcExemptionsSerializersExemptionRead$outboundSchema;
  /** @deprecated use `BackendSrcExemptionsSerializersExemptionRead$Outbound` instead. */
  export type Outbound = BackendSrcExemptionsSerializersExemptionRead$Outbound;
}

export function backendSrcExemptionsSerializersExemptionReadToJSON(
  backendSrcExemptionsSerializersExemptionRead:
    BackendSrcExemptionsSerializersExemptionRead,
): string {
  return JSON.stringify(
    BackendSrcExemptionsSerializersExemptionRead$outboundSchema.parse(
      backendSrcExemptionsSerializersExemptionRead,
    ),
  );
}

export function backendSrcExemptionsSerializersExemptionReadFromJSON(
  jsonString: string,
): SafeParseResult<
  BackendSrcExemptionsSerializersExemptionRead,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      BackendSrcExemptionsSerializersExemptionRead$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'BackendSrcExemptionsSerializersExemptionRead' from JSON`,
  );
}
