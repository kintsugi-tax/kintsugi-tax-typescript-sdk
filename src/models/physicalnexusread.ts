/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { RFCDate } from "../types/rfcdate.js";
import {
  CountryCodeEnum,
  CountryCodeEnum$inboundSchema,
  CountryCodeEnum$outboundSchema,
} from "./countrycodeenum.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  PhysicalNexusCategory,
  PhysicalNexusCategory$inboundSchema,
  PhysicalNexusCategory$outboundSchema,
} from "./physicalnexuscategory.js";

export type PhysicalNexusRead = {
  countryCode: CountryCodeEnum;
  /**
   * The state or province code in
   *
   * @remarks
   *                             ISO 3166-2 format (e.g., CA).
   */
  stateCode: string;
  /**
   * The date when the nexus became
   *
   * @remarks
   *                             effective (YYYY-MM-DD).
   */
  startDate: RFCDate;
  /**
   * The date when the
   *
   * @remarks
   *                                         nexus ended, if applicable.
   */
  endDate?: string | undefined;
  category: PhysicalNexusCategory;
  /**
   * Optional
   *
   * @remarks
   *                                         external identifier for the nexus.
   */
  externalId?: string | undefined;
  /**
   * The unique identifier for the physical nexus.
   */
  id: string;
};

/** @internal */
export const PhysicalNexusRead$inboundSchema: z.ZodType<
  PhysicalNexusRead,
  z.ZodTypeDef,
  unknown
> = z.object({
  country_code: CountryCodeEnum$inboundSchema,
  state_code: z.string(),
  start_date: z.string().transform(v => new RFCDate(v)),
  end_date: z.string().optional(),
  category: PhysicalNexusCategory$inboundSchema,
  external_id: z.string().optional(),
  id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "country_code": "countryCode",
    "state_code": "stateCode",
    "start_date": "startDate",
    "end_date": "endDate",
    "external_id": "externalId",
  });
});

/** @internal */
export type PhysicalNexusRead$Outbound = {
  country_code: string;
  state_code: string;
  start_date: string;
  end_date?: string | undefined;
  category: string;
  external_id?: string | undefined;
  id: string;
};

/** @internal */
export const PhysicalNexusRead$outboundSchema: z.ZodType<
  PhysicalNexusRead$Outbound,
  z.ZodTypeDef,
  PhysicalNexusRead
> = z.object({
  countryCode: CountryCodeEnum$outboundSchema,
  stateCode: z.string(),
  startDate: z.instanceof(RFCDate).transform(v => v.toString()),
  endDate: z.string().optional(),
  category: PhysicalNexusCategory$outboundSchema,
  externalId: z.string().optional(),
  id: z.string(),
}).transform((v) => {
  return remap$(v, {
    countryCode: "country_code",
    stateCode: "state_code",
    startDate: "start_date",
    endDate: "end_date",
    externalId: "external_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PhysicalNexusRead$ {
  /** @deprecated use `PhysicalNexusRead$inboundSchema` instead. */
  export const inboundSchema = PhysicalNexusRead$inboundSchema;
  /** @deprecated use `PhysicalNexusRead$outboundSchema` instead. */
  export const outboundSchema = PhysicalNexusRead$outboundSchema;
  /** @deprecated use `PhysicalNexusRead$Outbound` instead. */
  export type Outbound = PhysicalNexusRead$Outbound;
}

export function physicalNexusReadToJSON(
  physicalNexusRead: PhysicalNexusRead,
): string {
  return JSON.stringify(
    PhysicalNexusRead$outboundSchema.parse(physicalNexusRead),
  );
}

export function physicalNexusReadFromJSON(
  jsonString: string,
): SafeParseResult<PhysicalNexusRead, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PhysicalNexusRead$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PhysicalNexusRead' from JSON`,
  );
}
