/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  ProductCategoryEnum,
  ProductCategoryEnum$inboundSchema,
  ProductCategoryEnum$outboundSchema,
} from "./productcategoryenum.js";
import {
  ProductSubCategoryEnum,
  ProductSubCategoryEnum$inboundSchema,
  ProductSubCategoryEnum$outboundSchema,
} from "./productsubcategoryenum.js";
import {
  SourceEnum,
  SourceEnum$inboundSchema,
  SourceEnum$outboundSchema,
} from "./sourceenum.js";

/**
 * Defaults to 1.0. The quantity of the item.
 */
export type QuantityOfTheProduct = number | string;

/**
 * The total amount of the item.
 */
export type TotalAmountOfThisTransactionItemAfterDiscounts = number | string;

export type TransactionItemEstimateBase = {
  /**
   * A unique identifier for the transaction item.
   */
  externalId?: string | null | undefined;
  /**
   * The date of the transaction item.
   */
  date: Date;
  /**
   * A description of the item.
   */
  description?: string | null | undefined;
  /**
   * External product identifier. If not found and product_subcategory
   *
   * @remarks
   *         and product_category are not provided, an error occurs.
   */
  externalProductId?: string | null | undefined;
  /**
   * Name of the product. Used if creating a new product.
   */
  productName?: string | null | undefined;
  /**
   * Description of the product. Used if creating a new product.
   */
  productDescription?: string | null | undefined;
  productSource?: SourceEnum | null | undefined;
  /**
   * Subcategory of the product. Required if product_category is used
   *
   * @remarks
   *         in place of external_product_id.
   */
  productSubcategory?: ProductSubCategoryEnum | null | undefined;
  /**
   * Category of the product. Required if product_subcategory is used
   *
   * @remarks
   *         in place of external_product_id.
   */
  productCategory?: ProductCategoryEnum | null | undefined;
  /**
   * Defaults to 1.0. The quantity of the item.
   */
  quantity?: number | string | undefined;
  /**
   * The total amount of the item.
   */
  amount: number | string;
  /**
   * Defaults to false. Indicates whether the item is exempt from tax.
   */
  exempt?: boolean | undefined;
};

/** @internal */
export const QuantityOfTheProduct$inboundSchema: z.ZodType<
  QuantityOfTheProduct,
  z.ZodTypeDef,
  unknown
> = z.union([z.number(), z.string()]);

/** @internal */
export type QuantityOfTheProduct$Outbound = number | string;

/** @internal */
export const QuantityOfTheProduct$outboundSchema: z.ZodType<
  QuantityOfTheProduct$Outbound,
  z.ZodTypeDef,
  QuantityOfTheProduct
> = z.union([z.number(), z.string()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace QuantityOfTheProduct$ {
  /** @deprecated use `QuantityOfTheProduct$inboundSchema` instead. */
  export const inboundSchema = QuantityOfTheProduct$inboundSchema;
  /** @deprecated use `QuantityOfTheProduct$outboundSchema` instead. */
  export const outboundSchema = QuantityOfTheProduct$outboundSchema;
  /** @deprecated use `QuantityOfTheProduct$Outbound` instead. */
  export type Outbound = QuantityOfTheProduct$Outbound;
}

export function quantityOfTheProductToJSON(
  quantityOfTheProduct: QuantityOfTheProduct,
): string {
  return JSON.stringify(
    QuantityOfTheProduct$outboundSchema.parse(quantityOfTheProduct),
  );
}

export function quantityOfTheProductFromJSON(
  jsonString: string,
): SafeParseResult<QuantityOfTheProduct, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => QuantityOfTheProduct$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'QuantityOfTheProduct' from JSON`,
  );
}

/** @internal */
export const TotalAmountOfThisTransactionItemAfterDiscounts$inboundSchema:
  z.ZodType<
    TotalAmountOfThisTransactionItemAfterDiscounts,
    z.ZodTypeDef,
    unknown
  > = z.union([z.number(), z.string()]);

/** @internal */
export type TotalAmountOfThisTransactionItemAfterDiscounts$Outbound =
  | number
  | string;

/** @internal */
export const TotalAmountOfThisTransactionItemAfterDiscounts$outboundSchema:
  z.ZodType<
    TotalAmountOfThisTransactionItemAfterDiscounts$Outbound,
    z.ZodTypeDef,
    TotalAmountOfThisTransactionItemAfterDiscounts
  > = z.union([z.number(), z.string()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TotalAmountOfThisTransactionItemAfterDiscounts$ {
  /** @deprecated use `TotalAmountOfThisTransactionItemAfterDiscounts$inboundSchema` instead. */
  export const inboundSchema =
    TotalAmountOfThisTransactionItemAfterDiscounts$inboundSchema;
  /** @deprecated use `TotalAmountOfThisTransactionItemAfterDiscounts$outboundSchema` instead. */
  export const outboundSchema =
    TotalAmountOfThisTransactionItemAfterDiscounts$outboundSchema;
  /** @deprecated use `TotalAmountOfThisTransactionItemAfterDiscounts$Outbound` instead. */
  export type Outbound =
    TotalAmountOfThisTransactionItemAfterDiscounts$Outbound;
}

export function totalAmountOfThisTransactionItemAfterDiscountsToJSON(
  totalAmountOfThisTransactionItemAfterDiscounts:
    TotalAmountOfThisTransactionItemAfterDiscounts,
): string {
  return JSON.stringify(
    TotalAmountOfThisTransactionItemAfterDiscounts$outboundSchema.parse(
      totalAmountOfThisTransactionItemAfterDiscounts,
    ),
  );
}

export function totalAmountOfThisTransactionItemAfterDiscountsFromJSON(
  jsonString: string,
): SafeParseResult<
  TotalAmountOfThisTransactionItemAfterDiscounts,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      TotalAmountOfThisTransactionItemAfterDiscounts$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'TotalAmountOfThisTransactionItemAfterDiscounts' from JSON`,
  );
}

/** @internal */
export const TransactionItemEstimateBase$inboundSchema: z.ZodType<
  TransactionItemEstimateBase,
  z.ZodTypeDef,
  unknown
> = z.object({
  external_id: z.nullable(z.string()).optional(),
  date: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  description: z.nullable(z.string()).optional(),
  external_product_id: z.nullable(z.string()).optional(),
  product_name: z.nullable(z.string()).optional(),
  product_description: z.nullable(z.string()).optional(),
  product_source: z.nullable(SourceEnum$inboundSchema).optional(),
  product_subcategory: z.nullable(ProductSubCategoryEnum$inboundSchema)
    .optional(),
  product_category: z.nullable(ProductCategoryEnum$inboundSchema).optional(),
  quantity: z.union([z.number(), z.string()]).optional(),
  amount: z.union([z.number(), z.string()]),
  exempt: z.boolean().default(false),
}).transform((v) => {
  return remap$(v, {
    "external_id": "externalId",
    "external_product_id": "externalProductId",
    "product_name": "productName",
    "product_description": "productDescription",
    "product_source": "productSource",
    "product_subcategory": "productSubcategory",
    "product_category": "productCategory",
  });
});

/** @internal */
export type TransactionItemEstimateBase$Outbound = {
  external_id?: string | null | undefined;
  date: string;
  description?: string | null | undefined;
  external_product_id?: string | null | undefined;
  product_name?: string | null | undefined;
  product_description?: string | null | undefined;
  product_source?: string | null | undefined;
  product_subcategory?: string | null | undefined;
  product_category?: string | null | undefined;
  quantity?: number | string | undefined;
  amount: number | string;
  exempt: boolean;
};

/** @internal */
export const TransactionItemEstimateBase$outboundSchema: z.ZodType<
  TransactionItemEstimateBase$Outbound,
  z.ZodTypeDef,
  TransactionItemEstimateBase
> = z.object({
  externalId: z.nullable(z.string()).optional(),
  date: z.date().transform(v => v.toISOString()),
  description: z.nullable(z.string()).optional(),
  externalProductId: z.nullable(z.string()).optional(),
  productName: z.nullable(z.string()).optional(),
  productDescription: z.nullable(z.string()).optional(),
  productSource: z.nullable(SourceEnum$outboundSchema).optional(),
  productSubcategory: z.nullable(ProductSubCategoryEnum$outboundSchema)
    .optional(),
  productCategory: z.nullable(ProductCategoryEnum$outboundSchema).optional(),
  quantity: z.union([z.number(), z.string()]).optional(),
  amount: z.union([z.number(), z.string()]),
  exempt: z.boolean().default(false),
}).transform((v) => {
  return remap$(v, {
    externalId: "external_id",
    externalProductId: "external_product_id",
    productName: "product_name",
    productDescription: "product_description",
    productSource: "product_source",
    productSubcategory: "product_subcategory",
    productCategory: "product_category",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionItemEstimateBase$ {
  /** @deprecated use `TransactionItemEstimateBase$inboundSchema` instead. */
  export const inboundSchema = TransactionItemEstimateBase$inboundSchema;
  /** @deprecated use `TransactionItemEstimateBase$outboundSchema` instead. */
  export const outboundSchema = TransactionItemEstimateBase$outboundSchema;
  /** @deprecated use `TransactionItemEstimateBase$Outbound` instead. */
  export type Outbound = TransactionItemEstimateBase$Outbound;
}

export function transactionItemEstimateBaseToJSON(
  transactionItemEstimateBase: TransactionItemEstimateBase,
): string {
  return JSON.stringify(
    TransactionItemEstimateBase$outboundSchema.parse(
      transactionItemEstimateBase,
    ),
  );
}

export function transactionItemEstimateBaseFromJSON(
  jsonString: string,
): SafeParseResult<TransactionItemEstimateBase, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TransactionItemEstimateBase$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TransactionItemEstimateBase' from JSON`,
  );
}
