/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  SourceEnum,
  SourceEnum$inboundSchema,
  SourceEnum$outboundSchema,
} from "./sourceenum.js";

export type TransactionItemEstimateBase = {
  /**
   * A unique identifier for the transaction item.
   */
  externalId?: string | undefined;
  /**
   * The date of the transaction item.
   */
  date: Date;
  /**
   * A description of the item.
   */
  description?: string | undefined;
  /**
   * External product identifier. If not found and product_subcategory
   *
   * @remarks
   *         and product_category are not provided, an error occurs.
   */
  externalProductId?: string | undefined;
  /**
   * Name of the product. Used if creating a new product.
   */
  productName?: string | undefined;
  /**
   * Description of the product. Used if creating a new product.
   */
  productDescription?: string | undefined;
  productSource?: SourceEnum | undefined;
  /**
   * Subcategory of the product. Required if product_category is used
   *
   * @remarks
   *         in place of external_product_id.
   */
  productSubcategory?: string | undefined;
  /**
   * Category of the product. Required if product_subcategory is used
   *
   * @remarks
   *         in place of external_product_id.
   */
  productCategory?: string | undefined;
  /**
   * Defaults to 1.0. The quantity of the item.
   */
  quantity?: number | undefined;
  /**
   * The total amount of the item.
   */
  amount: number;
  /**
   * Defaults to false. Indicates whether the item is exempt from tax.
   */
  exempt?: boolean | undefined;
};

/** @internal */
export const TransactionItemEstimateBase$inboundSchema: z.ZodType<
  TransactionItemEstimateBase,
  z.ZodTypeDef,
  unknown
> = z.object({
  external_id: z.string().optional(),
  date: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  description: z.string().optional(),
  external_product_id: z.string().optional(),
  product_name: z.string().optional(),
  product_description: z.string().optional(),
  product_source: SourceEnum$inboundSchema.optional(),
  product_subcategory: z.string().optional(),
  product_category: z.string().optional(),
  quantity: z.number().default(1.0),
  amount: z.number(),
  exempt: z.boolean().default(false),
}).transform((v) => {
  return remap$(v, {
    "external_id": "externalId",
    "external_product_id": "externalProductId",
    "product_name": "productName",
    "product_description": "productDescription",
    "product_source": "productSource",
    "product_subcategory": "productSubcategory",
    "product_category": "productCategory",
  });
});

/** @internal */
export type TransactionItemEstimateBase$Outbound = {
  external_id?: string | undefined;
  date: string;
  description?: string | undefined;
  external_product_id?: string | undefined;
  product_name?: string | undefined;
  product_description?: string | undefined;
  product_source?: string | undefined;
  product_subcategory?: string | undefined;
  product_category?: string | undefined;
  quantity: number;
  amount: number;
  exempt: boolean;
};

/** @internal */
export const TransactionItemEstimateBase$outboundSchema: z.ZodType<
  TransactionItemEstimateBase$Outbound,
  z.ZodTypeDef,
  TransactionItemEstimateBase
> = z.object({
  externalId: z.string().optional(),
  date: z.date().transform(v => v.toISOString()),
  description: z.string().optional(),
  externalProductId: z.string().optional(),
  productName: z.string().optional(),
  productDescription: z.string().optional(),
  productSource: SourceEnum$outboundSchema.optional(),
  productSubcategory: z.string().optional(),
  productCategory: z.string().optional(),
  quantity: z.number().default(1.0),
  amount: z.number(),
  exempt: z.boolean().default(false),
}).transform((v) => {
  return remap$(v, {
    externalId: "external_id",
    externalProductId: "external_product_id",
    productName: "product_name",
    productDescription: "product_description",
    productSource: "product_source",
    productSubcategory: "product_subcategory",
    productCategory: "product_category",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionItemEstimateBase$ {
  /** @deprecated use `TransactionItemEstimateBase$inboundSchema` instead. */
  export const inboundSchema = TransactionItemEstimateBase$inboundSchema;
  /** @deprecated use `TransactionItemEstimateBase$outboundSchema` instead. */
  export const outboundSchema = TransactionItemEstimateBase$outboundSchema;
  /** @deprecated use `TransactionItemEstimateBase$Outbound` instead. */
  export type Outbound = TransactionItemEstimateBase$Outbound;
}

export function transactionItemEstimateBaseToJSON(
  transactionItemEstimateBase: TransactionItemEstimateBase,
): string {
  return JSON.stringify(
    TransactionItemEstimateBase$outboundSchema.parse(
      transactionItemEstimateBase,
    ),
  );
}

export function transactionItemEstimateBaseFromJSON(
  jsonString: string,
): SafeParseResult<TransactionItemEstimateBase, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TransactionItemEstimateBase$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TransactionItemEstimateBase' from JSON`,
  );
}
