/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { RFCDate } from "../types/rfcdate.js";
import {
  CountryCodeEnum,
  CountryCodeEnum$inboundSchema,
  CountryCodeEnum$outboundSchema,
} from "./countrycodeenum.js";
import {
  CurrencyEnum,
  CurrencyEnum$inboundSchema,
  CurrencyEnum$outboundSchema,
} from "./currencyenum.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  FilingStatusEnum,
  FilingStatusEnum$inboundSchema,
  FilingStatusEnum$outboundSchema,
} from "./filingstatusenum.js";

/**
 * List of attachments associated with the filing, if any.
 */
export type Attachments = {};

export type FilingDetailsRead = {
  status?: FilingStatusEnum | undefined;
  /**
   * The start date of the filing period.
   */
  startDate: RFCDate;
  /**
   * The end date of the filing period.
   */
  endDate: RFCDate;
  /**
   * The due date of the filing.
   */
  dueDate?: string | undefined;
  /**
   * The date the filing was completed, if applicable.
   */
  dateFiled?: string | undefined;
  /**
   * Indicates if the filing was done manually.
   */
  isManual?: boolean | undefined;
  /**
   * The code of the state associated with the filing (e.g., IA, NY).
   */
  stateCode?: string | undefined;
  /**
   * The name of the state associated with the filing
   *
   * @remarks
   *         (e.g., Iowa, New York).
   */
  stateName?: string | undefined;
  countryCode: CountryCodeEnum;
  /**
   * The associated JIRA issue key for tracking the filing,
   *
   * @remarks
   *         if available. Can be null.
   */
  jiraIssueKey?: string | undefined;
  /**
   * Indicates if the filing was auto-approved. Defaults to false.
   */
  autoApproved?: boolean | undefined;
  /**
   * The calculated amount for the filing. Defaults to 0.00.
   */
  amountCalculated?: string | undefined;
  /**
   * Adjusted amount, if any.
   */
  amountAdjusted?: string | undefined;
  /**
   * Discounts applied to the filing.
   */
  amountDiscounts?: string | undefined;
  /**
   * Discounts applied to the amount.
   */
  amountFees?: string | undefined;
  /**
   * Penalties applied to the filing.
   */
  amountPenalties?: string | undefined;
  /**
   * Total tax collected during the filing period.
   */
  amountTaxCollected?: string | undefined;
  /**
   * Total sales amount during the filing period.
   */
  amountSales?: string | undefined;
  /**
   * Total taxable amount during the filing period.
   */
  totalTaxableSales?: string | undefined;
  /**
   * Final amount due for the filing.
   */
  amount?: string | undefined;
  /**
   * Total tax liability for the filing.
   */
  totalTaxLiability?: string | undefined;
  /**
   * Total number of transactions associated with the filing.
   */
  transactionCount?: number | undefined;
  /**
   * Notes or comments related to the filing.
   */
  internalNotes?: string | undefined;
  recentDetailsReportLink?: string | undefined;
  /**
   * The amount of tax remitted.
   */
  taxRemitted?: string | undefined;
  /**
   * Return confirmation ID, if applicable.
   */
  returnConfirmationId?: string | undefined;
  /**
   * Payment confirmation ID, if applicable.
   */
  paymentConfirmationId?: string | undefined;
  /**
   * Indicates if the filing can be approved.
   */
  blockApproval?: boolean | undefined;
  currency?: CurrencyEnum | undefined;
  /**
   * Indicates the date when filing will be unpaused.
   */
  pausedUntilDate?: string | undefined;
  /**
   * Unique identifier for the filing.
   */
  id: string;
  /**
   * Identifier for the registration associated with the filing.
   */
  registrationId: string;
  /**
   * List of attachments associated with the filing, if any.
   */
  attachments?: Attachments | undefined;
  creditsUtilized?: string | undefined;
};

/** @internal */
export const Attachments$inboundSchema: z.ZodType<
  Attachments,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type Attachments$Outbound = {};

/** @internal */
export const Attachments$outboundSchema: z.ZodType<
  Attachments$Outbound,
  z.ZodTypeDef,
  Attachments
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Attachments$ {
  /** @deprecated use `Attachments$inboundSchema` instead. */
  export const inboundSchema = Attachments$inboundSchema;
  /** @deprecated use `Attachments$outboundSchema` instead. */
  export const outboundSchema = Attachments$outboundSchema;
  /** @deprecated use `Attachments$Outbound` instead. */
  export type Outbound = Attachments$Outbound;
}

export function attachmentsToJSON(attachments: Attachments): string {
  return JSON.stringify(Attachments$outboundSchema.parse(attachments));
}

export function attachmentsFromJSON(
  jsonString: string,
): SafeParseResult<Attachments, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Attachments$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Attachments' from JSON`,
  );
}

/** @internal */
export const FilingDetailsRead$inboundSchema: z.ZodType<
  FilingDetailsRead,
  z.ZodTypeDef,
  unknown
> = z.object({
  status: FilingStatusEnum$inboundSchema.optional(),
  start_date: z.string().transform(v => new RFCDate(v)),
  end_date: z.string().transform(v => new RFCDate(v)),
  due_date: z.string().optional(),
  date_filed: z.string().optional(),
  is_manual: z.boolean().optional(),
  state_code: z.string().optional(),
  state_name: z.string().optional(),
  country_code: CountryCodeEnum$inboundSchema,
  jira_issue_key: z.string().optional(),
  auto_approved: z.boolean().default(false),
  amount_calculated: z.string().default("0.00"),
  amount_adjusted: z.string().default("0.00"),
  amount_discounts: z.string().default("0.00"),
  amount_fees: z.string().default("0.00"),
  amount_penalties: z.string().default("0.00"),
  amount_tax_collected: z.string().default("0.00"),
  amount_sales: z.string().default("0.00"),
  total_taxable_sales: z.string().default("0.00"),
  amount: z.string().default("0.00"),
  total_tax_liability: z.string().default("0.00"),
  transaction_count: z.number().int().default(0),
  internal_notes: z.string().optional(),
  recent_details_report_link: z.string().optional(),
  tax_remitted: z.string().default("0.00"),
  return_confirmation_id: z.string().optional(),
  payment_confirmation_id: z.string().optional(),
  block_approval: z.boolean().optional(),
  currency: CurrencyEnum$inboundSchema.optional(),
  paused_until_date: z.string().optional(),
  id: z.string(),
  registration_id: z.string(),
  attachments: z.lazy(() => Attachments$inboundSchema).optional(),
  credits_utilized: z.string().default("0.00"),
}).transform((v) => {
  return remap$(v, {
    "start_date": "startDate",
    "end_date": "endDate",
    "due_date": "dueDate",
    "date_filed": "dateFiled",
    "is_manual": "isManual",
    "state_code": "stateCode",
    "state_name": "stateName",
    "country_code": "countryCode",
    "jira_issue_key": "jiraIssueKey",
    "auto_approved": "autoApproved",
    "amount_calculated": "amountCalculated",
    "amount_adjusted": "amountAdjusted",
    "amount_discounts": "amountDiscounts",
    "amount_fees": "amountFees",
    "amount_penalties": "amountPenalties",
    "amount_tax_collected": "amountTaxCollected",
    "amount_sales": "amountSales",
    "total_taxable_sales": "totalTaxableSales",
    "total_tax_liability": "totalTaxLiability",
    "transaction_count": "transactionCount",
    "internal_notes": "internalNotes",
    "recent_details_report_link": "recentDetailsReportLink",
    "tax_remitted": "taxRemitted",
    "return_confirmation_id": "returnConfirmationId",
    "payment_confirmation_id": "paymentConfirmationId",
    "block_approval": "blockApproval",
    "paused_until_date": "pausedUntilDate",
    "registration_id": "registrationId",
    "credits_utilized": "creditsUtilized",
  });
});

/** @internal */
export type FilingDetailsRead$Outbound = {
  status?: string | undefined;
  start_date: string;
  end_date: string;
  due_date?: string | undefined;
  date_filed?: string | undefined;
  is_manual?: boolean | undefined;
  state_code?: string | undefined;
  state_name?: string | undefined;
  country_code: string;
  jira_issue_key?: string | undefined;
  auto_approved: boolean;
  amount_calculated: string;
  amount_adjusted: string;
  amount_discounts: string;
  amount_fees: string;
  amount_penalties: string;
  amount_tax_collected: string;
  amount_sales: string;
  total_taxable_sales: string;
  amount: string;
  total_tax_liability: string;
  transaction_count: number;
  internal_notes?: string | undefined;
  recent_details_report_link?: string | undefined;
  tax_remitted: string;
  return_confirmation_id?: string | undefined;
  payment_confirmation_id?: string | undefined;
  block_approval?: boolean | undefined;
  currency?: string | undefined;
  paused_until_date?: string | undefined;
  id: string;
  registration_id: string;
  attachments?: Attachments$Outbound | undefined;
  credits_utilized: string;
};

/** @internal */
export const FilingDetailsRead$outboundSchema: z.ZodType<
  FilingDetailsRead$Outbound,
  z.ZodTypeDef,
  FilingDetailsRead
> = z.object({
  status: FilingStatusEnum$outboundSchema.optional(),
  startDate: z.instanceof(RFCDate).transform(v => v.toString()),
  endDate: z.instanceof(RFCDate).transform(v => v.toString()),
  dueDate: z.string().optional(),
  dateFiled: z.string().optional(),
  isManual: z.boolean().optional(),
  stateCode: z.string().optional(),
  stateName: z.string().optional(),
  countryCode: CountryCodeEnum$outboundSchema,
  jiraIssueKey: z.string().optional(),
  autoApproved: z.boolean().default(false),
  amountCalculated: z.string().default("0.00"),
  amountAdjusted: z.string().default("0.00"),
  amountDiscounts: z.string().default("0.00"),
  amountFees: z.string().default("0.00"),
  amountPenalties: z.string().default("0.00"),
  amountTaxCollected: z.string().default("0.00"),
  amountSales: z.string().default("0.00"),
  totalTaxableSales: z.string().default("0.00"),
  amount: z.string().default("0.00"),
  totalTaxLiability: z.string().default("0.00"),
  transactionCount: z.number().int().default(0),
  internalNotes: z.string().optional(),
  recentDetailsReportLink: z.string().optional(),
  taxRemitted: z.string().default("0.00"),
  returnConfirmationId: z.string().optional(),
  paymentConfirmationId: z.string().optional(),
  blockApproval: z.boolean().optional(),
  currency: CurrencyEnum$outboundSchema.optional(),
  pausedUntilDate: z.string().optional(),
  id: z.string(),
  registrationId: z.string(),
  attachments: z.lazy(() => Attachments$outboundSchema).optional(),
  creditsUtilized: z.string().default("0.00"),
}).transform((v) => {
  return remap$(v, {
    startDate: "start_date",
    endDate: "end_date",
    dueDate: "due_date",
    dateFiled: "date_filed",
    isManual: "is_manual",
    stateCode: "state_code",
    stateName: "state_name",
    countryCode: "country_code",
    jiraIssueKey: "jira_issue_key",
    autoApproved: "auto_approved",
    amountCalculated: "amount_calculated",
    amountAdjusted: "amount_adjusted",
    amountDiscounts: "amount_discounts",
    amountFees: "amount_fees",
    amountPenalties: "amount_penalties",
    amountTaxCollected: "amount_tax_collected",
    amountSales: "amount_sales",
    totalTaxableSales: "total_taxable_sales",
    totalTaxLiability: "total_tax_liability",
    transactionCount: "transaction_count",
    internalNotes: "internal_notes",
    recentDetailsReportLink: "recent_details_report_link",
    taxRemitted: "tax_remitted",
    returnConfirmationId: "return_confirmation_id",
    paymentConfirmationId: "payment_confirmation_id",
    blockApproval: "block_approval",
    pausedUntilDate: "paused_until_date",
    registrationId: "registration_id",
    creditsUtilized: "credits_utilized",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FilingDetailsRead$ {
  /** @deprecated use `FilingDetailsRead$inboundSchema` instead. */
  export const inboundSchema = FilingDetailsRead$inboundSchema;
  /** @deprecated use `FilingDetailsRead$outboundSchema` instead. */
  export const outboundSchema = FilingDetailsRead$outboundSchema;
  /** @deprecated use `FilingDetailsRead$Outbound` instead. */
  export type Outbound = FilingDetailsRead$Outbound;
}

export function filingDetailsReadToJSON(
  filingDetailsRead: FilingDetailsRead,
): string {
  return JSON.stringify(
    FilingDetailsRead$outboundSchema.parse(filingDetailsRead),
  );
}

export function filingDetailsReadFromJSON(
  jsonString: string,
): SafeParseResult<FilingDetailsRead, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FilingDetailsRead$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FilingDetailsRead' from JSON`,
  );
}
