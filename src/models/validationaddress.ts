/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type ValidationAddress = {
  /**
   * Primary address line, such as street name and number
   */
  line1?: string | undefined;
  /**
   * Additional address details, such as an apartment or suite number
   */
  line2?: string | undefined;
  /**
   * Additional address details for complex addresses
   */
  line3?: string | undefined;
  /**
   * The city or town name for the address
   */
  city?: string | undefined;
  /**
   * State, province, or region of the address
   */
  state?: string | undefined;
  /**
   * Country code in ISO 3166-1 alpha-2 format (e.g., 'US' for the United States).
   *
   * @remarks
   *         Defaults to 'US'.
   *         should not be empty. Not validating here as the validation
   *         structure can be different for different providers
   */
  country?: string | undefined;
  /**
   * ZIP or postal code for the address. Can be empty for some locales.
   *
   * @remarks
   *         Not validating here as the validation structure can be different for different providers
   */
  postalCode?: string | undefined;
  /**
   * Unique identifier for the request, if applicable
   */
  id?: number | undefined;
  /**
   * County or district name for the address
   */
  county?: string | undefined;
  /**
   * A complete address string that can be used as an alternative to providing individual fields.
   */
  fullAddress?: string | undefined;
};

/** @internal */
export const ValidationAddress$inboundSchema: z.ZodType<
  ValidationAddress,
  z.ZodTypeDef,
  unknown
> = z.object({
  line1: z.string().optional(),
  line2: z.string().optional(),
  line3: z.string().optional(),
  city: z.string().optional(),
  state: z.string().optional(),
  country: z.string().default("US"),
  postalCode: z.string().default(""),
  id: z.number().int().optional(),
  county: z.string().optional(),
  full_address: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "full_address": "fullAddress",
  });
});

/** @internal */
export type ValidationAddress$Outbound = {
  line1?: string | undefined;
  line2?: string | undefined;
  line3?: string | undefined;
  city?: string | undefined;
  state?: string | undefined;
  country: string;
  postalCode: string;
  id?: number | undefined;
  county?: string | undefined;
  full_address?: string | undefined;
};

/** @internal */
export const ValidationAddress$outboundSchema: z.ZodType<
  ValidationAddress$Outbound,
  z.ZodTypeDef,
  ValidationAddress
> = z.object({
  line1: z.string().optional(),
  line2: z.string().optional(),
  line3: z.string().optional(),
  city: z.string().optional(),
  state: z.string().optional(),
  country: z.string().default("US"),
  postalCode: z.string().default(""),
  id: z.number().int().optional(),
  county: z.string().optional(),
  fullAddress: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    fullAddress: "full_address",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ValidationAddress$ {
  /** @deprecated use `ValidationAddress$inboundSchema` instead. */
  export const inboundSchema = ValidationAddress$inboundSchema;
  /** @deprecated use `ValidationAddress$outboundSchema` instead. */
  export const outboundSchema = ValidationAddress$outboundSchema;
  /** @deprecated use `ValidationAddress$Outbound` instead. */
  export type Outbound = ValidationAddress$Outbound;
}

export function validationAddressToJSON(
  validationAddress: ValidationAddress,
): string {
  return JSON.stringify(
    ValidationAddress$outboundSchema.parse(validationAddress),
  );
}

export function validationAddressFromJSON(
  jsonString: string,
): SafeParseResult<ValidationAddress, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ValidationAddress$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ValidationAddress' from JSON`,
  );
}
