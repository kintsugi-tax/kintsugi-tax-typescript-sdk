/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  RelatedEntityType,
  RelatedEntityType$inboundSchema,
  RelatedEntityType$outboundSchema,
} from "./relatedentitytype.js";

export type AttachmentRead = {
  /**
   * The unique identifier of the exemption associated
   *
   * @remarks
   *         with the attachment.
   */
  relatedEntityId: string;
  relatedEntityType: RelatedEntityType;
  /**
   * The unique identifier of the uploaded attachment (attachment ID).
   */
  id: string;
};

/** @internal */
export const AttachmentRead$inboundSchema: z.ZodType<
  AttachmentRead,
  z.ZodTypeDef,
  unknown
> = z.object({
  related_entity_id: z.string(),
  related_entity_type: RelatedEntityType$inboundSchema,
  id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "related_entity_id": "relatedEntityId",
    "related_entity_type": "relatedEntityType",
  });
});

/** @internal */
export type AttachmentRead$Outbound = {
  related_entity_id: string;
  related_entity_type: string;
  id: string;
};

/** @internal */
export const AttachmentRead$outboundSchema: z.ZodType<
  AttachmentRead$Outbound,
  z.ZodTypeDef,
  AttachmentRead
> = z.object({
  relatedEntityId: z.string(),
  relatedEntityType: RelatedEntityType$outboundSchema,
  id: z.string(),
}).transform((v) => {
  return remap$(v, {
    relatedEntityId: "related_entity_id",
    relatedEntityType: "related_entity_type",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AttachmentRead$ {
  /** @deprecated use `AttachmentRead$inboundSchema` instead. */
  export const inboundSchema = AttachmentRead$inboundSchema;
  /** @deprecated use `AttachmentRead$outboundSchema` instead. */
  export const outboundSchema = AttachmentRead$outboundSchema;
  /** @deprecated use `AttachmentRead$Outbound` instead. */
  export type Outbound = AttachmentRead$Outbound;
}

export function attachmentReadToJSON(attachmentRead: AttachmentRead): string {
  return JSON.stringify(AttachmentRead$outboundSchema.parse(attachmentRead));
}

export function attachmentReadFromJSON(
  jsonString: string,
): SafeParseResult<AttachmentRead, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AttachmentRead$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AttachmentRead' from JSON`,
  );
}
