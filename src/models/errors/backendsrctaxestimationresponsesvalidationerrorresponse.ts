/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import * as models from "../index.js";
import { SDKError } from "./sdkerror.js";

export type BackendSrcTaxEstimationResponsesValidationErrorResponseData = {
  detail: Array<models.BackendSrcTaxEstimationResponsesValidationErrorItem>;
};

export class BackendSrcTaxEstimationResponsesValidationErrorResponse
  extends SDKError
{
  detail: Array<models.BackendSrcTaxEstimationResponsesValidationErrorItem>;

  /** The original data that was passed to this error instance. */
  data$: BackendSrcTaxEstimationResponsesValidationErrorResponseData;

  constructor(
    err: BackendSrcTaxEstimationResponsesValidationErrorResponseData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.detail = err.detail;

    this.name = "BackendSrcTaxEstimationResponsesValidationErrorResponse";
  }
}

/** @internal */
export const BackendSrcTaxEstimationResponsesValidationErrorResponse$inboundSchema:
  z.ZodType<
    BackendSrcTaxEstimationResponsesValidationErrorResponse,
    z.ZodTypeDef,
    unknown
  > = z.object({
    detail: z.array(
      models.BackendSrcTaxEstimationResponsesValidationErrorItem$inboundSchema,
    ),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      return new BackendSrcTaxEstimationResponsesValidationErrorResponse(v, {
        request: v.request$,
        response: v.response$,
        body: v.body$,
      });
    });

/** @internal */
export type BackendSrcTaxEstimationResponsesValidationErrorResponse$Outbound = {
  detail: Array<
    models.BackendSrcTaxEstimationResponsesValidationErrorItem$Outbound
  >;
};

/** @internal */
export const BackendSrcTaxEstimationResponsesValidationErrorResponse$outboundSchema:
  z.ZodType<
    BackendSrcTaxEstimationResponsesValidationErrorResponse$Outbound,
    z.ZodTypeDef,
    BackendSrcTaxEstimationResponsesValidationErrorResponse
  > = z.instanceof(BackendSrcTaxEstimationResponsesValidationErrorResponse)
    .transform(v => v.data$)
    .pipe(z.object({
      detail: z.array(
        models
          .BackendSrcTaxEstimationResponsesValidationErrorItem$outboundSchema,
      ),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BackendSrcTaxEstimationResponsesValidationErrorResponse$ {
  /** @deprecated use `BackendSrcTaxEstimationResponsesValidationErrorResponse$inboundSchema` instead. */
  export const inboundSchema =
    BackendSrcTaxEstimationResponsesValidationErrorResponse$inboundSchema;
  /** @deprecated use `BackendSrcTaxEstimationResponsesValidationErrorResponse$outboundSchema` instead. */
  export const outboundSchema =
    BackendSrcTaxEstimationResponsesValidationErrorResponse$outboundSchema;
  /** @deprecated use `BackendSrcTaxEstimationResponsesValidationErrorResponse$Outbound` instead. */
  export type Outbound =
    BackendSrcTaxEstimationResponsesValidationErrorResponse$Outbound;
}
